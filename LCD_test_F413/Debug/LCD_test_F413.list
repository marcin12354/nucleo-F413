
LCD_test_F413.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007378  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000480c  08007558  08007558  00008558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd64  0800bd64  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd64  0800bd64  0000cd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd6c  0800bd6c  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd6c  0800bd6c  0000cd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd70  0800bd70  0000cd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800bd74  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c38  20000068  0800bddc  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ca0  0800bddc  0000dca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d67a  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004396  00000000  00000000  0004a712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002958  00000000  00000000  0004eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f00  00000000  00000000  00051400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002469f  00000000  00000000  00053300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ddfa  00000000  00000000  0007799f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddb6d  00000000  00000000  00095799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173306  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb58  00000000  00000000  0017334c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0017eea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007540 	.word	0x08007540

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08007540 	.word	0x08007540

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <display_proc>:
char gui_TB_current_limit_array[15];
char gui_TB_current_measured_array[10];
char gui_TB_voltage_measured_array[10];
char gui_TB_CC_array[3];

void display_proc(cbuf_handle_t q) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
	static display_window_t window = DISPLAY_WINDOW_WELCOME;

	static display_current_limit_mode_t mode = DISPLAY_CURENT_LIMIT_NORMAL_MODE;


	switch (window) {
 80005b8:	4b2c      	ldr	r3, [pc, #176]	@ (800066c <display_proc+0xbc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d83a      	bhi.n	8000636 <display_proc+0x86>
 80005c0:	a201      	add	r2, pc, #4	@ (adr r2, 80005c8 <display_proc+0x18>)
 80005c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c6:	bf00      	nop
 80005c8:	080005d9 	.word	0x080005d9
 80005cc:	0800060b 	.word	0x0800060b
 80005d0:	08000637 	.word	0x08000637
 80005d4:	08000637 	.word	0x08000637
	case DISPLAY_WINDOW_WELCOME:
		//display_current_limit(mode,1000);

		u8g2_ClearBuffer(&u8g2);
 80005d8:	4825      	ldr	r0, [pc, #148]	@ (8000670 <display_proc+0xc0>)
 80005da:	f003 fd17 	bl	800400c <u8g2_ClearBuffer>
		u8g2_DrawFrame(&u8g2, 0, 0, 128, 64);
 80005de:	2340      	movs	r3, #64	@ 0x40
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2380      	movs	r3, #128	@ 0x80
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	4821      	ldr	r0, [pc, #132]	@ (8000670 <display_proc+0xc0>)
 80005ea:	f003 fb56 	bl	8003c9a <u8g2_DrawFrame>
		u8g2_SetFont(&u8g2, u8g2_font_inr16_mr);
 80005ee:	4921      	ldr	r1, [pc, #132]	@ (8000674 <display_proc+0xc4>)
 80005f0:	481f      	ldr	r0, [pc, #124]	@ (8000670 <display_proc+0xc0>)
 80005f2:	f004 fdcd 	bl	8005190 <u8g2_SetFont>
		u8g2_DrawUTF8(&u8g2, 15, 40, "WELCOME");
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <display_proc+0xc8>)
 80005f8:	2228      	movs	r2, #40	@ 0x28
 80005fa:	210f      	movs	r1, #15
 80005fc:	481c      	ldr	r0, [pc, #112]	@ (8000670 <display_proc+0xc0>)
 80005fe:	f004 fd07 	bl	8005010 <u8g2_DrawUTF8>
		u8g2_SendBuffer(&u8g2);
 8000602:	481b      	ldr	r0, [pc, #108]	@ (8000670 <display_proc+0xc0>)
 8000604:	f003 fd75 	bl	80040f2 <u8g2_SendBuffer>

		break;
 8000608:	e016      	b.n	8000638 <display_proc+0x88>
	case DISPLAY_WINDOW_MENU:

		u8g2_ClearBuffer(&u8g2);
 800060a:	4819      	ldr	r0, [pc, #100]	@ (8000670 <display_proc+0xc0>)
 800060c:	f003 fcfe 	bl	800400c <u8g2_ClearBuffer>
		gui_textbox_display(&gui_TB_voltage);
 8000610:	481a      	ldr	r0, [pc, #104]	@ (800067c <display_proc+0xcc>)
 8000612:	f000 fabd 	bl	8000b90 <gui_textbox_display>
		gui_textbox_display(&gui_TB_current_limit);
 8000616:	481a      	ldr	r0, [pc, #104]	@ (8000680 <display_proc+0xd0>)
 8000618:	f000 faba 	bl	8000b90 <gui_textbox_display>
		gui_textbox_display(&gui_TB_current_measured);
 800061c:	4819      	ldr	r0, [pc, #100]	@ (8000684 <display_proc+0xd4>)
 800061e:	f000 fab7 	bl	8000b90 <gui_textbox_display>
		gui_textbox_display(&gui_TB_voltage_measured);
 8000622:	4819      	ldr	r0, [pc, #100]	@ (8000688 <display_proc+0xd8>)
 8000624:	f000 fab4 	bl	8000b90 <gui_textbox_display>
		gui_textbox_display(&gui_TB_CC);
 8000628:	4818      	ldr	r0, [pc, #96]	@ (800068c <display_proc+0xdc>)
 800062a:	f000 fab1 	bl	8000b90 <gui_textbox_display>
		u8g2_SendBuffer(&u8g2);
 800062e:	4810      	ldr	r0, [pc, #64]	@ (8000670 <display_proc+0xc0>)
 8000630:	f003 fd5f 	bl	80040f2 <u8g2_SendBuffer>

		break;
 8000634:	e000      	b.n	8000638 <display_proc+0x88>
	case DISPLAY_WINDOW_CHARGER:

		break;
	default:

		break;
 8000636:	bf00      	nop
	}


	if(mode == DISPLAY_CURENT_LIMIT_NORMAL_MODE && window == DISPLAY_WINDOW_MENU){
 8000638:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <display_proc+0xe0>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d107      	bne.n	8000650 <display_proc+0xa0>
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <display_proc+0xbc>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d103      	bne.n	8000650 <display_proc+0xa0>
		mode = DISPLAY_CURENT_LIMIT_INSERTION_MODE;
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <display_proc+0xe0>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	e002      	b.n	8000656 <display_proc+0xa6>
	}
	else{
		mode = DISPLAY_CURENT_LIMIT_NORMAL_MODE;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <display_proc+0xe0>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	}

	if (window == DISPLAY_WINDOW_WELCOME){
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <display_proc+0xbc>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <display_proc+0xb4>

			window = DISPLAY_WINDOW_MENU;
 800065e:	4b03      	ldr	r3, [pc, #12]	@ (800066c <display_proc+0xbc>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
	}
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000190 	.word	0x20000190
 8000670:	200006c0 	.word	0x200006c0
 8000674:	08009064 	.word	0x08009064
 8000678:	08007558 	.word	0x08007558
 800067c:	20000084 	.word	0x20000084
 8000680:	200000a4 	.word	0x200000a4
 8000684:	200000c4 	.word	0x200000c4
 8000688:	200000e4 	.word	0x200000e4
 800068c:	20000104 	.word	0x20000104
 8000690:	20000191 	.word	0x20000191

08000694 <app_is_display_timeout>:
#define APP_DISPLAY_TIMER_TIME 20

uint16_t volatile app_display_timer = 0;
uint16_t volatile app_display_timer_flag = 0;

uint8_t app_is_display_timeout(void) {
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	if (app_display_timer_flag == 1) {
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <app_is_display_timeout+0x24>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d104      	bne.n	80006ac <app_is_display_timeout+0x18>
		app_display_timer_flag = 0;
 80006a2:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <app_is_display_timeout+0x24>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	801a      	strh	r2, [r3, #0]
		return 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e000      	b.n	80006ae <app_is_display_timeout+0x1a>
	}
	return 0;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	20000162 	.word	0x20000162

080006bc <app_display_timer_proc>:

void app_display_timer_proc(void){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	app_display_timer++;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <app_display_timer_proc+0x34>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	3301      	adds	r3, #1
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <app_display_timer_proc+0x34>)
 80006cc:	801a      	strh	r2, [r3, #0]
	if (app_display_timer == APP_DISPLAY_TIMER_TIME){
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <app_display_timer_proc+0x34>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b14      	cmp	r3, #20
 80006d6:	d105      	bne.n	80006e4 <app_display_timer_proc+0x28>
		app_display_timer = 0;
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <app_display_timer_proc+0x34>)
 80006da:	2200      	movs	r2, #0
 80006dc:	801a      	strh	r2, [r3, #0]
		app_display_timer_flag = 1;
 80006de:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <app_display_timer_proc+0x38>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	801a      	strh	r2, [r3, #0]
	}


}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000160 	.word	0x20000160
 80006f4:	20000162 	.word	0x20000162

080006f8 <app_tick_init>:
	uint8_t index;
}app_tick_calback_s;

app_tick_calback_s publisher;

void app_tick_init(void){
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	publisher.index = 0;
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <app_tick_init+0x18>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000164 	.word	0x20000164

08000714 <app_register_tick_callback>:

uint8_t app_register_tick_callback(app_tick_callback callback) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

	if (publisher.index < APP_TICK_CALLBACK_TABLE_SIZE) {
 800071c:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <app_register_tick_callback+0x44>)
 800071e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000722:	2b09      	cmp	r3, #9
 8000724:	d811      	bhi.n	800074a <app_register_tick_callback+0x36>
		publisher.table[publisher.index] = callback;
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <app_register_tick_callback+0x44>)
 8000728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800072c:	4619      	mov	r1, r3
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <app_register_tick_callback+0x44>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		publisher.index++;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <app_register_tick_callback+0x44>)
 8000738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800073c:	3301      	adds	r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <app_register_tick_callback+0x44>)
 8000742:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		return 1;
 8000746:	2301      	movs	r3, #1
 8000748:	e000      	b.n	800074c <app_register_tick_callback+0x38>
	} else {
		return 0; //ERROR
 800074a:	2300      	movs	r3, #0
	}
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	20000164 	.word	0x20000164

0800075c <app_ticks>:

void app_ticks (void){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	if (publisher.index != 0) {
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <app_ticks+0x48>)
 8000764:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000768:	2b00      	cmp	r3, #0
 800076a:	d016      	beq.n	800079a <app_ticks+0x3e>
		for (uint8_t i = 0; i <= publisher.index; i++) {
 800076c:	2300      	movs	r3, #0
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	e00d      	b.n	800078e <app_ticks+0x32>
			if (publisher.table[i] != 0) {
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <app_ticks+0x48>)
 8000776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d004      	beq.n	8000788 <app_ticks+0x2c>
				publisher.table[i]();
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <app_ticks+0x48>)
 8000782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000786:	4798      	blx	r3
		for (uint8_t i = 0; i <= publisher.index; i++) {
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	3301      	adds	r3, #1
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <app_ticks+0x48>)
 8000790:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	429a      	cmp	r2, r3
 8000798:	d9eb      	bls.n	8000772 <app_ticks+0x16>
			}
		}
	}
	//app_display_timer_proc();
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000164 	.word	0x20000164

080007a8 <app_run>:

void app_run(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af04      	add	r7, sp, #16

	gui_textbox_init(&gui_TB_voltage, gui_TB_voltage_array,
 80007ae:	2310      	movs	r3, #16
 80007b0:	9302      	str	r3, [sp, #8]
 80007b2:	231e      	movs	r3, #30
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	2300      	movs	r3, #0
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2300      	movs	r3, #0
 80007bc:	220a      	movs	r2, #10
 80007be:	4954      	ldr	r1, [pc, #336]	@ (8000910 <app_run+0x168>)
 80007c0:	4854      	ldr	r0, [pc, #336]	@ (8000914 <app_run+0x16c>)
 80007c2:	f000 f8cd 	bl	8000960 <gui_textbox_init>
			sizeof(gui_TB_voltage_array), 0, 0, 30, 16);
	gui_textbox_setFrameType(&gui_TB_voltage, ROUNDED_RECT, 2);
 80007c6:	2202      	movs	r2, #2
 80007c8:	2103      	movs	r1, #3
 80007ca:	4852      	ldr	r0, [pc, #328]	@ (8000914 <app_run+0x16c>)
 80007cc:	f000 f9a0 	bl	8000b10 <gui_textbox_setFrameType>
	gui_textbox_addText(&gui_TB_voltage, "SET\0");
 80007d0:	4951      	ldr	r1, [pc, #324]	@ (8000918 <app_run+0x170>)
 80007d2:	4850      	ldr	r0, [pc, #320]	@ (8000914 <app_run+0x16c>)
 80007d4:	f000 f932 	bl	8000a3c <gui_textbox_addText>
	gui_textbox_setAllignHV(&gui_TB_voltage, H_ALIGN_CENTER, V_ALIGN_CENTER);
 80007d8:	2220      	movs	r2, #32
 80007da:	2101      	movs	r1, #1
 80007dc:	484d      	ldr	r0, [pc, #308]	@ (8000914 <app_run+0x16c>)
 80007de:	f000 f9b9 	bl	8000b54 <gui_textbox_setAllignHV>
	gui_textbox_setFont(&gui_TB_voltage, u8g2_font_6x12_mf);
 80007e2:	494e      	ldr	r1, [pc, #312]	@ (800091c <app_run+0x174>)
 80007e4:	484b      	ldr	r0, [pc, #300]	@ (8000914 <app_run+0x16c>)
 80007e6:	f000 f91b 	bl	8000a20 <gui_textbox_setFont>
	gui_textbox_setCursorPos(&gui_TB_voltage, CURSOR_POSSITION, 4);
 80007ea:	2204      	movs	r2, #4
 80007ec:	2102      	movs	r1, #2
 80007ee:	4849      	ldr	r0, [pc, #292]	@ (8000914 <app_run+0x16c>)
 80007f0:	f000 f943 	bl	8000a7a <gui_textbox_setCursorPos>
	gui_TB_voltage.cursor_blink_mode = BLINK_NO;
 80007f4:	4b47      	ldr	r3, [pc, #284]	@ (8000914 <app_run+0x16c>)
 80007f6:	2210      	movs	r2, #16
 80007f8:	731a      	strb	r2, [r3, #12]

	gui_textbox_init(&gui_TB_current_limit, gui_TB_current_limit_array,
 80007fa:	2310      	movs	r3, #16
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	2361      	movs	r3, #97	@ 0x61
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	2300      	movs	r3, #0
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	231f      	movs	r3, #31
 8000808:	220f      	movs	r2, #15
 800080a:	4945      	ldr	r1, [pc, #276]	@ (8000920 <app_run+0x178>)
 800080c:	4845      	ldr	r0, [pc, #276]	@ (8000924 <app_run+0x17c>)
 800080e:	f000 f8a7 	bl	8000960 <gui_textbox_init>
			sizeof(gui_TB_current_limit_array), 31, 0, 97, 16);
	gui_textbox_setFrameType(&gui_TB_current_limit, ROUNDED_RECT, 2);
 8000812:	2202      	movs	r2, #2
 8000814:	2103      	movs	r1, #3
 8000816:	4843      	ldr	r0, [pc, #268]	@ (8000924 <app_run+0x17c>)
 8000818:	f000 f97a 	bl	8000b10 <gui_textbox_setFrameType>
	gui_textbox_addText(&gui_TB_current_limit, "12.4V 1.00A\0");
 800081c:	4942      	ldr	r1, [pc, #264]	@ (8000928 <app_run+0x180>)
 800081e:	4841      	ldr	r0, [pc, #260]	@ (8000924 <app_run+0x17c>)
 8000820:	f000 f90c 	bl	8000a3c <gui_textbox_addText>
	gui_textbox_setAllignHV(&gui_TB_current_limit, H_ALIGN_CENTER,
 8000824:	2220      	movs	r2, #32
 8000826:	2101      	movs	r1, #1
 8000828:	483e      	ldr	r0, [pc, #248]	@ (8000924 <app_run+0x17c>)
 800082a:	f000 f993 	bl	8000b54 <gui_textbox_setAllignHV>
			V_ALIGN_CENTER);
	gui_textbox_setFont(&gui_TB_current_limit, u8g2_font_6x12_mf);
 800082e:	493b      	ldr	r1, [pc, #236]	@ (800091c <app_run+0x174>)
 8000830:	483c      	ldr	r0, [pc, #240]	@ (8000924 <app_run+0x17c>)
 8000832:	f000 f8f5 	bl	8000a20 <gui_textbox_setFont>
	gui_TB_current_limit.cursor_blink_mode = BLINK_NO;
 8000836:	4b3b      	ldr	r3, [pc, #236]	@ (8000924 <app_run+0x17c>)
 8000838:	2210      	movs	r2, #16
 800083a:	731a      	strb	r2, [r3, #12]

	gui_textbox_init(&gui_TB_current_measured, gui_TB_current_measured_array,
 800083c:	2316      	movs	r3, #22
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	2350      	movs	r3, #80	@ 0x50
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	2311      	movs	r3, #17
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2330      	movs	r3, #48	@ 0x30
 800084a:	220a      	movs	r2, #10
 800084c:	4937      	ldr	r1, [pc, #220]	@ (800092c <app_run+0x184>)
 800084e:	4838      	ldr	r0, [pc, #224]	@ (8000930 <app_run+0x188>)
 8000850:	f000 f886 	bl	8000960 <gui_textbox_init>
			sizeof(gui_TB_current_measured_array), 48, 17, 80, 22);
	gui_textbox_setFrameType(&gui_TB_current_measured, ROUNDED_RECT, 2);
 8000854:	2202      	movs	r2, #2
 8000856:	2103      	movs	r1, #3
 8000858:	4835      	ldr	r0, [pc, #212]	@ (8000930 <app_run+0x188>)
 800085a:	f000 f959 	bl	8000b10 <gui_textbox_setFrameType>
	gui_textbox_addText(&gui_TB_current_measured, "1.001A\0");
 800085e:	4935      	ldr	r1, [pc, #212]	@ (8000934 <app_run+0x18c>)
 8000860:	4833      	ldr	r0, [pc, #204]	@ (8000930 <app_run+0x188>)
 8000862:	f000 f8eb 	bl	8000a3c <gui_textbox_addText>
	gui_textbox_setAllignHV(&gui_TB_current_measured, H_ALIGN_CENTER,
 8000866:	2220      	movs	r2, #32
 8000868:	2101      	movs	r1, #1
 800086a:	4831      	ldr	r0, [pc, #196]	@ (8000930 <app_run+0x188>)
 800086c:	f000 f972 	bl	8000b54 <gui_textbox_setAllignHV>
			V_ALIGN_CENTER);
	gui_textbox_setFont(&gui_TB_current_measured, u8g2_font_10x20_mf);
 8000870:	4931      	ldr	r1, [pc, #196]	@ (8000938 <app_run+0x190>)
 8000872:	482f      	ldr	r0, [pc, #188]	@ (8000930 <app_run+0x188>)
 8000874:	f000 f8d4 	bl	8000a20 <gui_textbox_setFont>

	gui_textbox_init(&gui_TB_voltage_measured, gui_TB_voltage_measured_array,
 8000878:	2316      	movs	r3, #22
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	2350      	movs	r3, #80	@ 0x50
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	2329      	movs	r3, #41	@ 0x29
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2330      	movs	r3, #48	@ 0x30
 8000886:	220a      	movs	r2, #10
 8000888:	492c      	ldr	r1, [pc, #176]	@ (800093c <app_run+0x194>)
 800088a:	482d      	ldr	r0, [pc, #180]	@ (8000940 <app_run+0x198>)
 800088c:	f000 f868 	bl	8000960 <gui_textbox_init>
			sizeof(gui_TB_voltage_measured_array), 48, 41, 80, 22);
	gui_textbox_setFrameType(&gui_TB_voltage_measured, ROUNDED_RECT, 2);
 8000890:	2202      	movs	r2, #2
 8000892:	2103      	movs	r1, #3
 8000894:	482a      	ldr	r0, [pc, #168]	@ (8000940 <app_run+0x198>)
 8000896:	f000 f93b 	bl	8000b10 <gui_textbox_setFrameType>
	gui_textbox_addText(&gui_TB_voltage_measured, "12.6V\0");
 800089a:	492a      	ldr	r1, [pc, #168]	@ (8000944 <app_run+0x19c>)
 800089c:	4828      	ldr	r0, [pc, #160]	@ (8000940 <app_run+0x198>)
 800089e:	f000 f8cd 	bl	8000a3c <gui_textbox_addText>
	gui_textbox_setAllignHV(&gui_TB_voltage_measured, H_ALIGN_CENTER,
 80008a2:	2220      	movs	r2, #32
 80008a4:	2101      	movs	r1, #1
 80008a6:	4826      	ldr	r0, [pc, #152]	@ (8000940 <app_run+0x198>)
 80008a8:	f000 f954 	bl	8000b54 <gui_textbox_setAllignHV>
			V_ALIGN_CENTER);
	gui_textbox_setFont(&gui_TB_voltage_measured, u8g2_font_10x20_mf);
 80008ac:	4922      	ldr	r1, [pc, #136]	@ (8000938 <app_run+0x190>)
 80008ae:	4824      	ldr	r0, [pc, #144]	@ (8000940 <app_run+0x198>)
 80008b0:	f000 f8b6 	bl	8000a20 <gui_textbox_setFont>

	gui_textbox_init(&gui_TB_CC, gui_TB_CC_array, sizeof(gui_TB_CC_array), 0,
 80008b4:	2328      	movs	r3, #40	@ 0x28
 80008b6:	9302      	str	r3, [sp, #8]
 80008b8:	232e      	movs	r3, #46	@ 0x2e
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	2314      	movs	r3, #20
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2300      	movs	r3, #0
 80008c2:	2203      	movs	r2, #3
 80008c4:	4920      	ldr	r1, [pc, #128]	@ (8000948 <app_run+0x1a0>)
 80008c6:	4821      	ldr	r0, [pc, #132]	@ (800094c <app_run+0x1a4>)
 80008c8:	f000 f84a 	bl	8000960 <gui_textbox_init>
			20, 46, 40);
	gui_textbox_setFrameType(&gui_TB_CC, ROUNDED_FILLED_RECT, 5);
 80008cc:	2205      	movs	r2, #5
 80008ce:	2104      	movs	r1, #4
 80008d0:	481e      	ldr	r0, [pc, #120]	@ (800094c <app_run+0x1a4>)
 80008d2:	f000 f91d 	bl	8000b10 <gui_textbox_setFrameType>
	gui_textbox_addText(&gui_TB_CC, "CC\0");
 80008d6:	491e      	ldr	r1, [pc, #120]	@ (8000950 <app_run+0x1a8>)
 80008d8:	481c      	ldr	r0, [pc, #112]	@ (800094c <app_run+0x1a4>)
 80008da:	f000 f8af 	bl	8000a3c <gui_textbox_addText>
	gui_textbox_setAllignHV(&gui_TB_CC, H_ALIGN_CENTER, V_ALIGN_CENTER);
 80008de:	2220      	movs	r2, #32
 80008e0:	2101      	movs	r1, #1
 80008e2:	481a      	ldr	r0, [pc, #104]	@ (800094c <app_run+0x1a4>)
 80008e4:	f000 f936 	bl	8000b54 <gui_textbox_setAllignHV>
	gui_textbox_setFont(&gui_TB_CC, u8g2_font_inb24_mf);
 80008e8:	491a      	ldr	r1, [pc, #104]	@ (8000954 <app_run+0x1ac>)
 80008ea:	4818      	ldr	r0, [pc, #96]	@ (800094c <app_run+0x1a4>)
 80008ec:	f000 f898 	bl	8000a20 <gui_textbox_setFont>


	app_tick_init();
 80008f0:	f7ff ff02 	bl	80006f8 <app_tick_init>
	app_register_tick_callback(app_display_timer_proc);
 80008f4:	4818      	ldr	r0, [pc, #96]	@ (8000958 <app_run+0x1b0>)
 80008f6:	f7ff ff0d 	bl	8000714 <app_register_tick_callback>


	while (1) {
		//circular_buf_put(queue,current_limit.x);
		if (app_is_display_timeout()) {
 80008fa:	f7ff fecb 	bl	8000694 <app_is_display_timeout>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0fa      	beq.n	80008fa <app_run+0x152>
			display_proc(queue);
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <app_run+0x1b4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fe51 	bl	80005b0 <display_proc>
		if (app_is_display_timeout()) {
 800090e:	e7f4      	b.n	80008fa <app_run+0x152>
 8000910:	20000124 	.word	0x20000124
 8000914:	20000084 	.word	0x20000084
 8000918:	08007560 	.word	0x08007560
 800091c:	08007624 	.word	0x08007624
 8000920:	20000130 	.word	0x20000130
 8000924:	200000a4 	.word	0x200000a4
 8000928:	08007568 	.word	0x08007568
 800092c:	20000140 	.word	0x20000140
 8000930:	200000c4 	.word	0x200000c4
 8000934:	08007578 	.word	0x08007578
 8000938:	08007ff4 	.word	0x08007ff4
 800093c:	2000014c 	.word	0x2000014c
 8000940:	200000e4 	.word	0x200000e4
 8000944:	08007580 	.word	0x08007580
 8000948:	20000158 	.word	0x20000158
 800094c:	20000104 	.word	0x20000104
 8000950:	08007588 	.word	0x08007588
 8000954:	080099fc 	.word	0x080099fc
 8000958:	080006bd 	.word	0x080006bd
 800095c:	2000015c 	.word	0x2000015c

08000960 <gui_textbox_init>:


extern u8g2_t u8g2;

void gui_textbox_init(	gui_textbox_t *self,char *str, uint8_t n,
						int8_t pos_x, int8_t pos_y,uint8_t size_x,uint8_t size_y ){
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	4611      	mov	r1, r2
 800096c:	461a      	mov	r2, r3
 800096e:	460b      	mov	r3, r1
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	4613      	mov	r3, r2
 8000974:	71bb      	strb	r3, [r7, #6]
	assert(self);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d105      	bne.n	8000988 <gui_textbox_init+0x28>
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <gui_textbox_init+0xa8>)
 800097e:	4a23      	ldr	r2, [pc, #140]	@ (8000a0c <gui_textbox_init+0xac>)
 8000980:	2118      	movs	r1, #24
 8000982:	4823      	ldr	r0, [pc, #140]	@ (8000a10 <gui_textbox_init+0xb0>)
 8000984:	f005 fe36 	bl	80065f4 <__assert_func>
	assert(n);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d105      	bne.n	800099a <gui_textbox_init+0x3a>
 800098e:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <gui_textbox_init+0xb4>)
 8000990:	4a1e      	ldr	r2, [pc, #120]	@ (8000a0c <gui_textbox_init+0xac>)
 8000992:	2119      	movs	r1, #25
 8000994:	481e      	ldr	r0, [pc, #120]	@ (8000a10 <gui_textbox_init+0xb0>)
 8000996:	f005 fe2d 	bl	80065f4 <__assert_func>
	assert(size_x);
 800099a:	7f3b      	ldrb	r3, [r7, #28]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d105      	bne.n	80009ac <gui_textbox_init+0x4c>
 80009a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <gui_textbox_init+0xb8>)
 80009a2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a0c <gui_textbox_init+0xac>)
 80009a4:	211a      	movs	r1, #26
 80009a6:	481a      	ldr	r0, [pc, #104]	@ (8000a10 <gui_textbox_init+0xb0>)
 80009a8:	f005 fe24 	bl	80065f4 <__assert_func>
	assert(size_y);
 80009ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d105      	bne.n	80009c0 <gui_textbox_init+0x60>
 80009b4:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <gui_textbox_init+0xbc>)
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <gui_textbox_init+0xac>)
 80009b8:	211b      	movs	r1, #27
 80009ba:	4815      	ldr	r0, [pc, #84]	@ (8000a10 <gui_textbox_init+0xb0>)
 80009bc:	f005 fe1a 	bl	80065f4 <__assert_func>

	self->str = str;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	605a      	str	r2, [r3, #4]
	self->cursor = str;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	609a      	str	r2, [r3, #8]
	self->str_size = n;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	735a      	strb	r2, [r3, #13]
	self->pos_x = pos_x;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	79ba      	ldrb	r2, [r7, #6]
 80009d6:	701a      	strb	r2, [r3, #0]
	self->pos_y = pos_y;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	7e3a      	ldrb	r2, [r7, #24]
 80009dc:	705a      	strb	r2, [r3, #1]
	self->size_x = size_x;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	7f3a      	ldrb	r2, [r7, #28]
 80009e2:	709a      	strb	r2, [r3, #2]
	self->size_y = size_y;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80009ea:	70da      	strb	r2, [r3, #3]
	self->radius = 0;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2200      	movs	r2, #0
 80009f0:	739a      	strb	r2, [r3, #14]
	self->align_mode = 0;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2200      	movs	r2, #0
 80009f6:	73da      	strb	r2, [r3, #15]
	self->frame_type = 0;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2200      	movs	r2, #0
 80009fc:	741a      	strb	r2, [r3, #16]

}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	0800758c 	.word	0x0800758c
 8000a0c:	080075c8 	.word	0x080075c8
 8000a10:	08007594 	.word	0x08007594
 8000a14:	080075b0 	.word	0x080075b0
 8000a18:	080075b4 	.word	0x080075b4
 8000a1c:	080075bc 	.word	0x080075bc

08000a20 <gui_textbox_setFont>:

void inline gui_textbox_setFont(gui_textbox_t *self, uint8_t *font){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
	self->font = font;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	615a      	str	r2, [r3, #20]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <gui_textbox_addText>:
void gui_textbox_deleteText(gui_textbox_t *self){
	memset(self->str,0,self->str_size);
	self->cursor = self->str;
}

void gui_textbox_addText(gui_textbox_t *self,const char * str){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	uint32_t size = self->str + self->str_size - self->cursor;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	7b52      	ldrb	r2, [r2, #13]
 8000a4e:	441a      	add	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	60fb      	str	r3, [r7, #12]
	memcpy(self->cursor,str,size);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	6839      	ldr	r1, [r7, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f006 f836 	bl	8006ad2 <memcpy>
	self->cursor += size;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	441a      	add	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	609a      	str	r2, [r3, #8]
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <gui_textbox_setCursorPos>:

void gui_textbox_setCursorPos(gui_textbox_t *self,gui_textbox_cursor_pos_t mode ,uint8_t pos){
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	70fb      	strb	r3, [r7, #3]
 8000a86:	4613      	mov	r3, r2
 8000a88:	70bb      	strb	r3, [r7, #2]
	if ((mode & 0x0F) == CURSOR_BEGIN){
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d103      	bne.n	8000a9c <gui_textbox_setCursorPos+0x22>
		self->cursor = self->str;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
	}
	if ((mode & 0x0F) == CURSOR_END){
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d11d      	bne.n	8000ae2 <gui_textbox_setCursorPos+0x68>
			self->cursor = self->str + self->str_size - 1;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	7b5b      	ldrb	r3, [r3, #13]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	441a      	add	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
			for(uint8_t a = 0; a < self->str_size; a++){
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e00b      	b.n	8000ad4 <gui_textbox_setCursorPos+0x5a>
				if (self->cursor != 0){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10d      	bne.n	8000ae0 <gui_textbox_setCursorPos+0x66>
					break;
				}else{
					self->cursor --;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	609a      	str	r2, [r3, #8]
			for(uint8_t a = 0; a < self->str_size; a++){
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7b5b      	ldrb	r3, [r3, #13]
 8000ad8:	7bfa      	ldrb	r2, [r7, #15]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d3ee      	bcc.n	8000abc <gui_textbox_setCursorPos+0x42>
 8000ade:	e000      	b.n	8000ae2 <gui_textbox_setCursorPos+0x68>
					break;
 8000ae0:	bf00      	nop
				}
			}

		}
	if ((mode & 0x0F) == CURSOR_POSSITION){
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	f003 030f 	and.w	r3, r3, #15
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d10b      	bne.n	8000b04 <gui_textbox_setCursorPos+0x8a>
		if (pos < self->str_size - 1){
 8000aec:	78ba      	ldrb	r2, [r7, #2]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7b5b      	ldrb	r3, [r3, #13]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	429a      	cmp	r2, r3
 8000af6:	da05      	bge.n	8000b04 <gui_textbox_setCursorPos+0x8a>
			self->cursor = self->str + pos;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	78bb      	ldrb	r3, [r7, #2]
 8000afe:	441a      	add	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	609a      	str	r2, [r3, #8]
		}
	}
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <gui_textbox_setFrameType>:

void gui_textbox_setFrameType(gui_textbox_t *self,gui_textbox_frame_type_t ftype,uint8_t r)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	70bb      	strb	r3, [r7, #2]
	assert(self);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d105      	bne.n	8000b32 <gui_textbox_setFrameType+0x22>
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <gui_textbox_setFrameType+0x38>)
 8000b28:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <gui_textbox_setFrameType+0x3c>)
 8000b2a:	215d      	movs	r1, #93	@ 0x5d
 8000b2c:	4808      	ldr	r0, [pc, #32]	@ (8000b50 <gui_textbox_setFrameType+0x40>)
 8000b2e:	f005 fd61 	bl	80065f4 <__assert_func>
	self->frame_type = ftype;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	78fa      	ldrb	r2, [r7, #3]
 8000b36:	741a      	strb	r2, [r3, #16]
	self->radius = r;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	78ba      	ldrb	r2, [r7, #2]
 8000b3c:	739a      	strb	r2, [r3, #14]
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	0800758c 	.word	0x0800758c
 8000b4c:	080075dc 	.word	0x080075dc
 8000b50:	08007594 	.word	0x08007594

08000b54 <gui_textbox_setAllignHV>:

void inline gui_textbox_setAllignHV(gui_textbox_t *self, gui_textbox_Halign_t H, gui_textbox_Valign_t V){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	70fb      	strb	r3, [r7, #3]
 8000b60:	4613      	mov	r3, r2
 8000b62:	70bb      	strb	r3, [r7, #2]
	self->align_mode = (V & 0xF0) | (H & 0x0F);
 8000b64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000b68:	f023 030f 	bic.w	r3, r3, #15
 8000b6c:	b25a      	sxtb	r2, r3
 8000b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	73da      	strb	r2, [r3, #15]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <gui_textbox_display>:

void gui_textbox_display(gui_textbox_t *self){
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	6078      	str	r0, [r7, #4]
	assert(self);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d105      	bne.n	8000baa <gui_textbox_display+0x1a>
 8000b9e:	4b99      	ldr	r3, [pc, #612]	@ (8000e04 <gui_textbox_display+0x274>)
 8000ba0:	4a99      	ldr	r2, [pc, #612]	@ (8000e08 <gui_textbox_display+0x278>)
 8000ba2:	2167      	movs	r1, #103	@ 0x67
 8000ba4:	4899      	ldr	r0, [pc, #612]	@ (8000e0c <gui_textbox_display+0x27c>)
 8000ba6:	f005 fd25 	bl	80065f4 <__assert_func>

	uint8_t x,y;
	u8g2_SetFont(&u8g2, self->font);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4897      	ldr	r0, [pc, #604]	@ (8000e10 <gui_textbox_display+0x280>)
 8000bb2:	f004 faed 	bl	8005190 <u8g2_SetFont>
	uint8_t str_lenght = u8g2_GetStrWidth(&u8g2,self->str);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4894      	ldr	r0, [pc, #592]	@ (8000e10 <gui_textbox_display+0x280>)
 8000bbe:	f004 fb51 	bl	8005264 <u8g2_GetStrWidth>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	737b      	strb	r3, [r7, #13]

	u8g2_SetFontPosBaseline(&u8g2);
 8000bc6:	4892      	ldr	r0, [pc, #584]	@ (8000e10 <gui_textbox_display+0x280>)
 8000bc8:	f004 fab4 	bl	8005134 <u8g2_SetFontPosBaseline>
	u8g2_SetDrawColor(&u8g2, 1);
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4890      	ldr	r0, [pc, #576]	@ (8000e10 <gui_textbox_display+0x280>)
 8000bd0:	f004 fcb3 	bl	800553a <u8g2_SetDrawColor>
	//u8g2_DrawUTF8(&u8g2, type.x + (type.box_x - width) / 2 , type.y + type.box_y - (type.box_y - height)/2 - 1, buffer);

	u8g2_SetClipWindow(&u8g2,self->pos_x,self->pos_y,self->pos_x + self->size_x,self->pos_y + self->size_y);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f993 3000 	ldrsb.w	r3, [r3]
 8000bda:	b2d9      	uxtb	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000be2:	b2d8      	uxtb	r0, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f993 3000 	ldrsb.w	r3, [r3]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	789b      	ldrb	r3, [r3, #2]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2dc      	uxtb	r4, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	78db      	ldrb	r3, [r3, #3]
 8000c00:	4413      	add	r3, r2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	4623      	mov	r3, r4
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4881      	ldr	r0, [pc, #516]	@ (8000e10 <gui_textbox_display+0x280>)
 8000c0c:	f004 fdc8 	bl	80057a0 <u8g2_SetClipWindow>

	switch (self->frame_type) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7c1b      	ldrb	r3, [r3, #16]
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d86d      	bhi.n	8000cf4 <gui_textbox_display+0x164>
 8000c18:	a201      	add	r2, pc, #4	@ (adr r2, 8000c20 <gui_textbox_display+0x90>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000cf5 	.word	0x08000cf5
 8000c24:	08000c35 	.word	0x08000c35
 8000c28:	08000c61 	.word	0x08000c61
 8000c2c:	08000c8d 	.word	0x08000c8d
 8000c30:	08000cc1 	.word	0x08000cc1
	case NO_FRAME:

		break;
	case RECT:
		u8g2_DrawFrame(&u8g2, self->pos_x, self->pos_y, self->size_x,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f993 3000 	ldrsb.w	r3, [r3]
 8000c3a:	b2d9      	uxtb	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7898      	ldrb	r0, [r3, #2]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	78db      	ldrb	r3, [r3, #3]
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	4603      	mov	r3, r0
 8000c50:	486f      	ldr	r0, [pc, #444]	@ (8000e10 <gui_textbox_display+0x280>)
 8000c52:	f003 f822 	bl	8003c9a <u8g2_DrawFrame>
				self->size_y);
		u8g2_SetDrawColor(&u8g2,1);
 8000c56:	2101      	movs	r1, #1
 8000c58:	486d      	ldr	r0, [pc, #436]	@ (8000e10 <gui_textbox_display+0x280>)
 8000c5a:	f004 fc6e 	bl	800553a <u8g2_SetDrawColor>
		break;
 8000c5e:	e04a      	b.n	8000cf6 <gui_textbox_display+0x166>
	case FILLED_RECT:
		u8g2_DrawBox(&u8g2, self->pos_x, self->pos_y, self->size_x,
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f993 3000 	ldrsb.w	r3, [r3]
 8000c66:	b2d9      	uxtb	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7898      	ldrb	r0, [r3, #2]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	78db      	ldrb	r3, [r3, #3]
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4864      	ldr	r0, [pc, #400]	@ (8000e10 <gui_textbox_display+0x280>)
 8000c7e:	f002 ffd6 	bl	8003c2e <u8g2_DrawBox>
				self->size_y);
		u8g2_SetDrawColor(&u8g2,0);
 8000c82:	2100      	movs	r1, #0
 8000c84:	4862      	ldr	r0, [pc, #392]	@ (8000e10 <gui_textbox_display+0x280>)
 8000c86:	f004 fc58 	bl	800553a <u8g2_SetDrawColor>
		break;
 8000c8a:	e034      	b.n	8000cf6 <gui_textbox_display+0x166>
	case ROUNDED_RECT:
		u8g2_DrawRFrame(&u8g2, self->pos_x, self->pos_y, self->size_x,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c92:	b2d9      	uxtb	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c9a:	b2d8      	uxtb	r0, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	789c      	ldrb	r4, [r3, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	78db      	ldrb	r3, [r3, #3]
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	7b92      	ldrb	r2, [r2, #14]
 8000ca8:	9201      	str	r2, [sp, #4]
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	4623      	mov	r3, r4
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4857      	ldr	r0, [pc, #348]	@ (8000e10 <gui_textbox_display+0x280>)
 8000cb2:	f003 f8f6 	bl	8003ea2 <u8g2_DrawRFrame>
				self->size_y, self->radius);
		u8g2_SetDrawColor(&u8g2,1);
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4855      	ldr	r0, [pc, #340]	@ (8000e10 <gui_textbox_display+0x280>)
 8000cba:	f004 fc3e 	bl	800553a <u8g2_SetDrawColor>
		break;
 8000cbe:	e01a      	b.n	8000cf6 <gui_textbox_display+0x166>
	case ROUNDED_FILLED_RECT:
		u8g2_DrawRBox(&u8g2, self->pos_x, self->pos_y, self->size_x,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8000cc6:	b2d9      	uxtb	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000cce:	b2d8      	uxtb	r0, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	789c      	ldrb	r4, [r3, #2]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	78db      	ldrb	r3, [r3, #3]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	7b92      	ldrb	r2, [r2, #14]
 8000cdc:	9201      	str	r2, [sp, #4]
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	4623      	mov	r3, r4
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	484a      	ldr	r0, [pc, #296]	@ (8000e10 <gui_textbox_display+0x280>)
 8000ce6:	f003 f82c 	bl	8003d42 <u8g2_DrawRBox>
				self->size_y, self->radius);
		u8g2_SetDrawColor(&u8g2,0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	4848      	ldr	r0, [pc, #288]	@ (8000e10 <gui_textbox_display+0x280>)
 8000cee:	f004 fc24 	bl	800553a <u8g2_SetDrawColor>
		break;
 8000cf2:	e000      	b.n	8000cf6 <gui_textbox_display+0x166>
	default:
		break;
 8000cf4:	bf00      	nop
	}
	// Consider if all calculation should be done on uin16_t to prevent over
	switch (self->align_mode & 0x0F) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7bdb      	ldrb	r3, [r3, #15]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d01d      	beq.n	8000d3e <gui_textbox_display+0x1ae>
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	dc29      	bgt.n	8000d5a <gui_textbox_display+0x1ca>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <gui_textbox_display+0x180>
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d007      	beq.n	8000d1e <gui_textbox_display+0x18e>
		break;
	case H_ALIGN_RIGHT:
		x = self->pos_x + self->size_x - str_lenght - 1;
		break;
	default:
		break;
 8000d0e:	e024      	b.n	8000d5a <gui_textbox_display+0x1ca>
		x = self->pos_x + 1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f993 3000 	ldrsb.w	r3, [r3]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d1c:	e01e      	b.n	8000d5c <gui_textbox_display+0x1cc>
		x = self->pos_x + (self->size_x - str_lenght) / 2;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f993 3000 	ldrsb.w	r3, [r3]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	7b7b      	ldrb	r3, [r7, #13]
 8000d2e:	1acb      	subs	r3, r1, r3
 8000d30:	0fd9      	lsrs	r1, r3, #31
 8000d32:	440b      	add	r3, r1
 8000d34:	105b      	asrs	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d3c:	e00e      	b.n	8000d5c <gui_textbox_display+0x1cc>
		x = self->pos_x + self->size_x - str_lenght - 1;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f993 3000 	ldrsb.w	r3, [r3]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	789b      	ldrb	r3, [r3, #2]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	7b7b      	ldrb	r3, [r7, #13]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	3b01      	subs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
		break;
 8000d58:	e000      	b.n	8000d5c <gui_textbox_display+0x1cc>
		break;
 8000d5a:	bf00      	nop
	}

	y = self->pos_y + self->size_y;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	78db      	ldrb	r3, [r3, #3]
 8000d68:	4413      	add	r3, r2
 8000d6a:	73bb      	strb	r3, [r7, #14]

	switch (self->align_mode & 0xF0) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7bdb      	ldrb	r3, [r3, #15]
 8000d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d74:	2b50      	cmp	r3, #80	@ 0x50
 8000d76:	d06b      	beq.n	8000e50 <gui_textbox_display+0x2c0>
 8000d78:	2b50      	cmp	r3, #80	@ 0x50
 8000d7a:	dc77      	bgt.n	8000e6c <gui_textbox_display+0x2dc>
 8000d7c:	2b40      	cmp	r3, #64	@ 0x40
 8000d7e:	d049      	beq.n	8000e14 <gui_textbox_display+0x284>
 8000d80:	2b40      	cmp	r3, #64	@ 0x40
 8000d82:	dc73      	bgt.n	8000e6c <gui_textbox_display+0x2dc>
 8000d84:	2b30      	cmp	r3, #48	@ 0x30
 8000d86:	d02e      	beq.n	8000de6 <gui_textbox_display+0x256>
 8000d88:	2b30      	cmp	r3, #48	@ 0x30
 8000d8a:	dc6f      	bgt.n	8000e6c <gui_textbox_display+0x2dc>
 8000d8c:	2b10      	cmp	r3, #16
 8000d8e:	d002      	beq.n	8000d96 <gui_textbox_display+0x206>
 8000d90:	2b20      	cmp	r3, #32
 8000d92:	d010      	beq.n	8000db6 <gui_textbox_display+0x226>
	case V_ALIGN_DOWN_BASELINE:
		u8g2_SetFontPosBottom(&u8g2);
		y = self->pos_y + self->size_y - 1;
		break;
	default:
		break;
 8000d94:	e06a      	b.n	8000e6c <gui_textbox_display+0x2dc>
		u8g2_SetFontPosBaseline(&u8g2);
 8000d96:	481e      	ldr	r0, [pc, #120]	@ (8000e10 <gui_textbox_display+0x280>)
 8000d98:	f004 f9cc 	bl	8005134 <u8g2_SetFontPosBaseline>
		y = self->pos_y + u8g2_GetAscent(&u8g2) + 1;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <gui_textbox_display+0x280>)
 8000da6:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4413      	add	r3, r2
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	3301      	adds	r3, #1
 8000db2:	73bb      	strb	r3, [r7, #14]
		break;
 8000db4:	e05b      	b.n	8000e6e <gui_textbox_display+0x2de>
		u8g2_SetFontPosBaseline(&u8g2);
 8000db6:	4816      	ldr	r0, [pc, #88]	@ (8000e10 <gui_textbox_display+0x280>)
 8000db8:	f004 f9bc 	bl	8005134 <u8g2_SetFontPosBaseline>
		y = self->pos_y + (self->size_y / 2) + u8g2_GetAscent(&u8g2) / 2;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	78db      	ldrb	r3, [r3, #3]
 8000dc8:	085b      	lsrs	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4413      	add	r3, r2
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <gui_textbox_display+0x280>)
 8000dd2:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 8000dd6:	0fd9      	lsrs	r1, r3, #31
 8000dd8:	440b      	add	r3, r1
 8000dda:	105b      	asrs	r3, r3, #1
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4413      	add	r3, r2
 8000de2:	73bb      	strb	r3, [r7, #14]
		break;
 8000de4:	e043      	b.n	8000e6e <gui_textbox_display+0x2de>
		u8g2_SetFontPosBaseline(&u8g2);
 8000de6:	480a      	ldr	r0, [pc, #40]	@ (8000e10 <gui_textbox_display+0x280>)
 8000de8:	f004 f9a4 	bl	8005134 <u8g2_SetFontPosBaseline>
		y = self->pos_y + self->size_y - 1;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	78db      	ldrb	r3, [r3, #3]
 8000df8:	4413      	add	r3, r2
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	73bb      	strb	r3, [r7, #14]
		break;
 8000e00:	e035      	b.n	8000e6e <gui_textbox_display+0x2de>
 8000e02:	bf00      	nop
 8000e04:	0800758c 	.word	0x0800758c
 8000e08:	080075f8 	.word	0x080075f8
 8000e0c:	08007594 	.word	0x08007594
 8000e10:	200006c0 	.word	0x200006c0
		u8g2_SetFontPosBottom(&u8g2);
 8000e14:	483d      	ldr	r0, [pc, #244]	@ (8000f0c <gui_textbox_display+0x37c>)
 8000e16:	f004 f9ab 	bl	8005170 <u8g2_SetFontPosBottom>
		y = self->pos_y + (self->size_y / 2) + u8g2_GetAscent(&u8g2) - u8g2_GetDescent(&u8g2) / 2;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	78db      	ldrb	r3, [r3, #3]
 8000e26:	085b      	lsrs	r3, r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b37      	ldr	r3, [pc, #220]	@ (8000f0c <gui_textbox_display+0x37c>)
 8000e30:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4413      	add	r3, r2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b34      	ldr	r3, [pc, #208]	@ (8000f0c <gui_textbox_display+0x37c>)
 8000e3c:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8000e40:	0fd9      	lsrs	r1, r3, #31
 8000e42:	440b      	add	r3, r1
 8000e44:	105b      	asrs	r3, r3, #1
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	73bb      	strb	r3, [r7, #14]
		break;
 8000e4e:	e00e      	b.n	8000e6e <gui_textbox_display+0x2de>
		u8g2_SetFontPosBottom(&u8g2);
 8000e50:	482e      	ldr	r0, [pc, #184]	@ (8000f0c <gui_textbox_display+0x37c>)
 8000e52:	f004 f98d 	bl	8005170 <u8g2_SetFontPosBottom>
		y = self->pos_y + self->size_y - 1;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	78db      	ldrb	r3, [r3, #3]
 8000e62:	4413      	add	r3, r2
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	3b01      	subs	r3, #1
 8000e68:	73bb      	strb	r3, [r7, #14]
		break;
 8000e6a:	e000      	b.n	8000e6e <gui_textbox_display+0x2de>
		break;
 8000e6c:	bf00      	nop
	}

	u8g2_SetClipWindow(&u8g2,self->pos_x,self->pos_y,self->pos_x + self->size_x,self->pos_y + self->size_y - 1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f993 3000 	ldrsb.w	r3, [r3]
 8000e74:	b2d9      	uxtb	r1, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e7c:	b2d8      	uxtb	r0, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f993 3000 	ldrsb.w	r3, [r3]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	789b      	ldrb	r3, [r3, #2]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b2dc      	uxtb	r4, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	78db      	ldrb	r3, [r3, #3]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	4818      	ldr	r0, [pc, #96]	@ (8000f0c <gui_textbox_display+0x37c>)
 8000eaa:	f004 fc79 	bl	80057a0 <u8g2_SetClipWindow>

	static char cursor_temp_char;
	if (self->cursor_blink_mode == BLINK_BAR){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7b1b      	ldrb	r3, [r3, #12]
 8000eb2:	2b20      	cmp	r3, #32
 8000eb4:	d11f      	bne.n	8000ef6 <gui_textbox_display+0x366>
		//cursor_temp_char =


		switch (*self->cursor) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b5f      	cmp	r3, #95	@ 0x5f
 8000ebe:	d010      	beq.n	8000ee2 <gui_textbox_display+0x352>
 8000ec0:	2b5f      	cmp	r3, #95	@ 0x5f
 8000ec2:	dc13      	bgt.n	8000eec <gui_textbox_display+0x35c>
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <gui_textbox_display+0x33e>
 8000ec8:	2b20      	cmp	r3, #32
 8000eca:	d005      	beq.n	8000ed8 <gui_textbox_display+0x348>
 8000ecc:	e00e      	b.n	8000eec <gui_textbox_display+0x35c>
		case 0:
			*self->cursor = ' ';
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	701a      	strb	r2, [r3, #0]
			break;
 8000ed6:	e00e      	b.n	8000ef6 <gui_textbox_display+0x366>
		case ' ':
			*self->cursor = '_';
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	225f      	movs	r2, #95	@ 0x5f
 8000ede:	701a      	strb	r2, [r3, #0]
			break;
 8000ee0:	e009      	b.n	8000ef6 <gui_textbox_display+0x366>

		case '_':
			*self->cursor = ' ';
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	701a      	strb	r2, [r3, #0]
			break;
 8000eea:	e004      	b.n	8000ef6 <gui_textbox_display+0x366>
		default:
			*self->cursor = '#';
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2223      	movs	r2, #35	@ 0x23
 8000ef2:	701a      	strb	r2, [r3, #0]
						break;
 8000ef4:	bf00      	nop
		}
	}

	u8g2_DrawUTF8(&u8g2,x,y,self->str);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	7bba      	ldrb	r2, [r7, #14]
 8000efc:	7bf9      	ldrb	r1, [r7, #15]
 8000efe:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <gui_textbox_display+0x37c>)
 8000f00:	f004 f886 	bl	8005010 <u8g2_DrawUTF8>

}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	200006c0 	.word	0x200006c0

08000f10 <gpio_and_delay_cb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	72fb      	strb	r3, [r7, #11]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	72bb      	strb	r3, [r7, #10]
	switch(msg){
 8000f22:	7afb      	ldrb	r3, [r7, #11]
 8000f24:	3b28      	subs	r3, #40	@ 0x28
 8000f26:	2b25      	cmp	r3, #37	@ 0x25
 8000f28:	f200 80db 	bhi.w	80010e2 <gpio_and_delay_cb+0x1d2>
 8000f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f34 <gpio_and_delay_cb+0x24>)
 8000f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f32:	bf00      	nop
 8000f34:	080010e7 	.word	0x080010e7
 8000f38:	08001015 	.word	0x08001015
 8000f3c:	0800101f 	.word	0x0800101f
 8000f40:	08001035 	.word	0x08001035
 8000f44:	080010e7 	.word	0x080010e7
 8000f48:	08000fcd 	.word	0x08000fcd
 8000f4c:	080010e3 	.word	0x080010e3
 8000f50:	080010e3 	.word	0x080010e3
 8000f54:	080010e3 	.word	0x080010e3
 8000f58:	080010e3 	.word	0x080010e3
 8000f5c:	080010e3 	.word	0x080010e3
 8000f60:	080010e3 	.word	0x080010e3
 8000f64:	080010e3 	.word	0x080010e3
 8000f68:	080010e3 	.word	0x080010e3
 8000f6c:	080010e3 	.word	0x080010e3
 8000f70:	080010e3 	.word	0x080010e3
 8000f74:	080010e3 	.word	0x080010e3
 8000f78:	080010e3 	.word	0x080010e3
 8000f7c:	080010e3 	.word	0x080010e3
 8000f80:	080010e3 	.word	0x080010e3
 8000f84:	080010e3 	.word	0x080010e3
 8000f88:	080010e3 	.word	0x080010e3
 8000f8c:	080010e3 	.word	0x080010e3
 8000f90:	080010e3 	.word	0x080010e3
 8000f94:	08001039 	.word	0x08001039
 8000f98:	0800105b 	.word	0x0800105b
 8000f9c:	080010e3 	.word	0x080010e3
 8000fa0:	080010e3 	.word	0x080010e3
 8000fa4:	080010e3 	.word	0x080010e3
 8000fa8:	080010e3 	.word	0x080010e3
 8000fac:	080010e3 	.word	0x080010e3
 8000fb0:	080010e3 	.word	0x080010e3
 8000fb4:	080010e3 	.word	0x080010e3
 8000fb8:	0800107d 	.word	0x0800107d
 8000fbc:	0800109f 	.word	0x0800109f
 8000fc0:	080010c1 	.word	0x080010c1
 8000fc4:	08000fd1 	.word	0x08000fd1
 8000fc8:	08000ff3 	.word	0x08000ff3

			case U8X8_MSG_DELAY_I2C:
				//for (uint16_t n = 0; n < 90; n++)
				//for (uint16_t n = 0; n < 2; n++)
				//{
					__NOP();
 8000fcc:	bf00      	nop
				//}

				break;
 8000fce:	e08b      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			case U8X8_MSG_GPIO_I2C_CLOCK:
				if (arg_int) HAL_GPIO_WritePin(I2C_SCL_PORT, I2C_SCL_PIN, SET);
 8000fd0:	7abb      	ldrb	r3, [r7, #10]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <gpio_and_delay_cb+0xd4>
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fdc:	4845      	ldr	r0, [pc, #276]	@ (80010f4 <gpio_and_delay_cb+0x1e4>)
 8000fde:	f000 ffd5 	bl	8001f8c <HAL_GPIO_WritePin>
					else HAL_GPIO_WritePin(I2C_SCL_PORT, I2C_SCL_PIN, RESET);
				break;
 8000fe2:	e081      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
					else HAL_GPIO_WritePin(I2C_SCL_PORT, I2C_SCL_PIN, RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fea:	4842      	ldr	r0, [pc, #264]	@ (80010f4 <gpio_and_delay_cb+0x1e4>)
 8000fec:	f000 ffce 	bl	8001f8c <HAL_GPIO_WritePin>
				break;
 8000ff0:	e07a      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			case U8X8_MSG_GPIO_I2C_DATA:
				if (arg_int) HAL_GPIO_WritePin(I2C_SDA_PORT, I2C_SDA_PIN, SET);
 8000ff2:	7abb      	ldrb	r3, [r7, #10]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <gpio_and_delay_cb+0xf6>
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ffe:	483d      	ldr	r0, [pc, #244]	@ (80010f4 <gpio_and_delay_cb+0x1e4>)
 8001000:	f000 ffc4 	bl	8001f8c <HAL_GPIO_WritePin>
					else HAL_GPIO_WritePin(I2C_SDA_PORT, I2C_SDA_PIN, RESET);
				break;
 8001004:	e070      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
					else HAL_GPIO_WritePin(I2C_SDA_PORT, I2C_SDA_PIN, RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800100c:	4839      	ldr	r0, [pc, #228]	@ (80010f4 <gpio_and_delay_cb+0x1e4>)
 800100e:	f000 ffbd 	bl	8001f8c <HAL_GPIO_WritePin>
				break;
 8001012:	e069      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			//Function which implements a delay, arg_int contains the amount of ms
			case U8X8_MSG_DELAY_MILLI:
			HAL_Delay(arg_int);
 8001014:	7abb      	ldrb	r3, [r7, #10]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fd1a 	bl	8001a50 <HAL_Delay>

			break;
 800101c:	e064      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			//Function which delays 10us
			case U8X8_MSG_DELAY_10MICRO:
			for (uint16_t n = 0; n < 90; n++)
 800101e:	2300      	movs	r3, #0
 8001020:	82fb      	strh	r3, [r7, #22]
 8001022:	e003      	b.n	800102c <gpio_and_delay_cb+0x11c>
			{
				__NOP();
 8001024:	bf00      	nop
			for (uint16_t n = 0; n < 90; n++)
 8001026:	8afb      	ldrh	r3, [r7, #22]
 8001028:	3301      	adds	r3, #1
 800102a:	82fb      	strh	r3, [r7, #22]
 800102c:	8afb      	ldrh	r3, [r7, #22]
 800102e:	2b59      	cmp	r3, #89	@ 0x59
 8001030:	d9f8      	bls.n	8001024 <gpio_and_delay_cb+0x114>
			}
			break;
 8001032:	e059      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			case U8X8_MSG_DELAY_NANO:

			break;
			//Function which delays 100ns
			case U8X8_MSG_DELAY_100NANO:
			__NOP();
 8001034:	bf00      	nop

			break;
 8001036:	e057      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			//Function to define the logic level of the clockline
			case U8X8_MSG_GPIO_SPI_CLOCK:
				if (arg_int) HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, RESET);
 8001038:	7abb      	ldrb	r3, [r7, #10]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <gpio_and_delay_cb+0x13c>
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001044:	482c      	ldr	r0, [pc, #176]	@ (80010f8 <gpio_and_delay_cb+0x1e8>)
 8001046:	f000 ffa1 	bl	8001f8c <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, SET);

			break;
 800104a:	e04d      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
				else HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001052:	4829      	ldr	r0, [pc, #164]	@ (80010f8 <gpio_and_delay_cb+0x1e8>)
 8001054:	f000 ff9a 	bl	8001f8c <HAL_GPIO_WritePin>
			break;
 8001058:	e046      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			//Function to define the logic level of the data line to the display
			case U8X8_MSG_GPIO_SPI_DATA:
				if (arg_int) HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, SET);
 800105a:	7abb      	ldrb	r3, [r7, #10]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <gpio_and_delay_cb+0x15e>
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001066:	4824      	ldr	r0, [pc, #144]	@ (80010f8 <gpio_and_delay_cb+0x1e8>)
 8001068:	f000 ff90 	bl	8001f8c <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, RESET);

			break;
 800106c:	e03c      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
				else HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001074:	4820      	ldr	r0, [pc, #128]	@ (80010f8 <gpio_and_delay_cb+0x1e8>)
 8001076:	f000 ff89 	bl	8001f8c <HAL_GPIO_WritePin>
			break;
 800107a:	e035      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			// Function to define the logic level of the CS line
			case U8X8_MSG_GPIO_CS:
				if (arg_int) HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 800107c:	7abb      	ldrb	r3, [r7, #10]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <gpio_and_delay_cb+0x180>
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001088:	481c      	ldr	r0, [pc, #112]	@ (80010fc <gpio_and_delay_cb+0x1ec>)
 800108a:	f000 ff7f 	bl	8001f8c <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);

			break;
 800108e:	e02b      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
				else HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001096:	4819      	ldr	r0, [pc, #100]	@ (80010fc <gpio_and_delay_cb+0x1ec>)
 8001098:	f000 ff78 	bl	8001f8c <HAL_GPIO_WritePin>
			break;
 800109c:	e024      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			//Function to define the logic level of the Data/ Command line
			case U8X8_MSG_GPIO_DC:
				if (arg_int) HAL_GPIO_WritePin(CD_LCD_PORT, CD_LCD_PIN, SET);
 800109e:	7abb      	ldrb	r3, [r7, #10]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <gpio_and_delay_cb+0x1a2>
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010aa:	4814      	ldr	r0, [pc, #80]	@ (80010fc <gpio_and_delay_cb+0x1ec>)
 80010ac:	f000 ff6e 	bl	8001f8c <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(CD_LCD_PORT, CD_LCD_PIN, RESET);

			break;
 80010b0:	e01a      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
				else HAL_GPIO_WritePin(CD_LCD_PORT, CD_LCD_PIN, RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b8:	4810      	ldr	r0, [pc, #64]	@ (80010fc <gpio_and_delay_cb+0x1ec>)
 80010ba:	f000 ff67 	bl	8001f8c <HAL_GPIO_WritePin>
			break;
 80010be:	e013      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			//Function to define the logic level of the RESET line
			case U8X8_MSG_GPIO_RESET:
				if (arg_int) HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, SET);
 80010c0:	7abb      	ldrb	r3, [r7, #10]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <gpio_and_delay_cb+0x1c4>
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010cc:	480a      	ldr	r0, [pc, #40]	@ (80010f8 <gpio_and_delay_cb+0x1e8>)
 80010ce:	f000 ff5d 	bl	8001f8c <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);

			break;
 80010d2:	e009      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
				else HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010da:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <gpio_and_delay_cb+0x1e8>)
 80010dc:	f000 ff56 	bl	8001f8c <HAL_GPIO_WritePin>
			break;
 80010e0:	e002      	b.n	80010e8 <gpio_and_delay_cb+0x1d8>
			default:
				return 0; //A message was received which is not implemented, return 0 to indicate an error
 80010e2:	2300      	movs	r3, #0
 80010e4:	e001      	b.n	80010ea <gpio_and_delay_cb+0x1da>
			break;
 80010e6:	bf00      	nop
		}

		return 1; // command processed successfully.
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40021400 	.word	0x40021400

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001104:	f000 fc32 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001108:	f000 f84e 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110c:	f000 f912 	bl	8001334 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001110:	f000 f8b6 	bl	8001280 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001114:	f000 f8de 	bl	80012d4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_sw_i2c, gpio_and_delay_cb);
 8001118:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <main+0x90>)
 800111a:	4a1e      	ldr	r2, [pc, #120]	@ (8001194 <main+0x94>)
 800111c:	491e      	ldr	r1, [pc, #120]	@ (8001198 <main+0x98>)
 800111e:	481f      	ldr	r0, [pc, #124]	@ (800119c <main+0x9c>)
 8001120:	f003 fa46 	bl	80045b0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
  //u8g2_Setup_st7565_erc12864_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, &gpio_and_delay_cb);
  //u8g2_Setup_st7565_erc12864_alt_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, &gpio_and_delay_cb);
  //u8g2_Setup_st7565_nhd_c12864_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, &gpio_and_delay_cb);
  //u8g2_Setup_st7565_jlx12864_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, &gpio_and_delay_cb);

  u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 8001124:	481d      	ldr	r0, [pc, #116]	@ (800119c <main+0x9c>)
 8001126:	f005 f9c3 	bl	80064b0 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
 800112a:	2100      	movs	r1, #0
 800112c:	481b      	ldr	r0, [pc, #108]	@ (800119c <main+0x9c>)
 800112e:	f005 f9ce 	bl	80064ce <u8x8_SetPowerSave>

  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001138:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <main+0xa0>)
 800113a:	f000 ff27 	bl	8001f8c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800113e:	2064      	movs	r0, #100	@ 0x64
 8001140:	f000 fc86 	bl	8001a50 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <main+0xa0>)
 800114c:	f000 ff1e 	bl	8001f8c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001150:	20c8      	movs	r0, #200	@ 0xc8
 8001152:	f000 fc7d 	bl	8001a50 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2101      	movs	r1, #1
 800115a:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <main+0xa4>)
 800115c:	f000 ff16 	bl	8001f8c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2101      	movs	r1, #1
 8001164:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <main+0xa4>)
 8001166:	f000 ff11 	bl	8001f8c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2180      	movs	r1, #128	@ 0x80
 800116e:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <main+0xa4>)
 8001170:	f000 ff0c 	bl	8001f8c <HAL_GPIO_WritePin>

	  HAL_Delay(2000);
 8001174:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001178:	f000 fc6a 	bl	8001a50 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2180      	movs	r1, #128	@ 0x80
 8001180:	4808      	ldr	r0, [pc, #32]	@ (80011a4 <main+0xa4>)
 8001182:	f000 ff03 	bl	8001f8c <HAL_GPIO_WritePin>

	  app_run();
 8001186:	f7ff fb0f 	bl	80007a8 <app_run>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, SET);
 800118a:	bf00      	nop
 800118c:	e7e3      	b.n	8001156 <main+0x56>
 800118e:	bf00      	nop
 8001190:	08000f11 	.word	0x08000f11
 8001194:	08005eb1 	.word	0x08005eb1
 8001198:	0800bc78 	.word	0x0800bc78
 800119c:	200006c0 	.word	0x200006c0
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40020400 	.word	0x40020400

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b094      	sub	sp, #80	@ 0x50
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2234      	movs	r2, #52	@ 0x34
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 fbff 	bl	80069ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <SystemClock_Config+0xd0>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	4a28      	ldr	r2, [pc, #160]	@ (8001278 <SystemClock_Config+0xd0>)
 80011d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011da:	6413      	str	r3, [r2, #64]	@ 0x40
 80011dc:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <SystemClock_Config+0xd0>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <SystemClock_Config+0xd4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a22      	ldr	r2, [pc, #136]	@ (800127c <SystemClock_Config+0xd4>)
 80011f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <SystemClock_Config+0xd4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001208:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800120c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2302      	movs	r3, #2
 8001210:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001212:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001216:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001218:	2308      	movs	r3, #8
 800121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 800121c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001220:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001222:	2304      	movs	r3, #4
 8001224:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001226:	2308      	movs	r3, #8
 8001228:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fcaa 	bl	8002b8c <HAL_RCC_OscConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800123e:	f000 f97d 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001242:	230f      	movs	r3, #15
 8001244:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001246:	2302      	movs	r3, #2
 8001248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800124e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2103      	movs	r1, #3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 ffe8 	bl	8002234 <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800126a:	f000 f967 	bl	800153c <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3750      	adds	r7, #80	@ 0x50
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_USART3_UART_Init+0x4c>)
 8001286:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <MX_USART3_UART_Init+0x50>)
 8001288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <MX_USART3_UART_Init+0x4c>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_USART3_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_USART3_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <MX_USART3_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_USART3_UART_Init+0x4c>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <MX_USART3_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_USART3_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_USART3_UART_Init+0x4c>)
 80012b8:	f001 feec 	bl	8003094 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012c2:	f000 f93b 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000194 	.word	0x20000194
 80012d0:	40004800 	.word	0x40004800

080012d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012e0:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012e2:	2206      	movs	r2, #6
 80012e4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012f4:	2202      	movs	r2, #2
 80012f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001300:	2200      	movs	r2, #0
 8001302:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001306:	2200      	movs	r2, #0
 8001308:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800130c:	2201      	movs	r2, #1
 800130e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001312:	2201      	movs	r2, #1
 8001314:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001318:	2200      	movs	r2, #0
 800131a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800131e:	f000 fe4e 	bl	8001fbe <HAL_PCD_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001328:	f000 f908 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200001dc 	.word	0x200001dc

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	@ 0x38
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
 800134e:	4b75      	ldr	r3, [pc, #468]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a74      	ldr	r2, [pc, #464]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b72      	ldr	r3, [pc, #456]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	623b      	str	r3, [r7, #32]
 8001364:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	4b6e      	ldr	r3, [pc, #440]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a6d      	ldr	r2, [pc, #436]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 8001370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b6b      	ldr	r3, [pc, #428]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	4b67      	ldr	r3, [pc, #412]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a66      	ldr	r2, [pc, #408]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b64      	ldr	r3, [pc, #400]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	4b60      	ldr	r3, [pc, #384]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0320 	and.w	r3, r3, #32
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b59      	ldr	r3, [pc, #356]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a58      	ldr	r2, [pc, #352]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b56      	ldr	r3, [pc, #344]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b52      	ldr	r3, [pc, #328]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a51      	ldr	r2, [pc, #324]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 80013fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b48      	ldr	r3, [pc, #288]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b44      	ldr	r3, [pc, #272]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a43      	ldr	r2, [pc, #268]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b41      	ldr	r3, [pc, #260]	@ (8001524 <MX_GPIO_Init+0x1f0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 800142a:	2200      	movs	r2, #0
 800142c:	f244 3181 	movw	r1, #17281	@ 0x4381
 8001430:	483d      	ldr	r0, [pc, #244]	@ (8001528 <MX_GPIO_Init+0x1f4>)
 8001432:	f000 fdab 	bl	8001f8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800143c:	483b      	ldr	r0, [pc, #236]	@ (800152c <MX_GPIO_Init+0x1f8>)
 800143e:	f000 fda5 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8001448:	4839      	ldr	r0, [pc, #228]	@ (8001530 <MX_GPIO_Init+0x1fc>)
 800144a:	f000 fd9f 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2140      	movs	r1, #64	@ 0x40
 8001452:	4838      	ldr	r0, [pc, #224]	@ (8001534 <MX_GPIO_Init+0x200>)
 8001454:	f000 fd9a 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	4832      	ldr	r0, [pc, #200]	@ (8001538 <MX_GPIO_Init+0x204>)
 8001470:	f000 fbf8 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8001474:	f244 3381 	movw	r3, #17281	@ 0x4381
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	4826      	ldr	r0, [pc, #152]	@ (8001528 <MX_GPIO_Init+0x1f4>)
 800148e:	f000 fbe9 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001492:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	4820      	ldr	r0, [pc, #128]	@ (800152c <MX_GPIO_Init+0x1f8>)
 80014ac:	f000 fbda 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80014b0:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	4819      	ldr	r0, [pc, #100]	@ (8001530 <MX_GPIO_Init+0x1fc>)
 80014ca:	f000 fbcb 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4813      	ldr	r0, [pc, #76]	@ (8001530 <MX_GPIO_Init+0x1fc>)
 80014e4:	f000 fbbe 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014e8:	2340      	movs	r3, #64	@ 0x40
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fc:	4619      	mov	r1, r3
 80014fe:	480d      	ldr	r0, [pc, #52]	@ (8001534 <MX_GPIO_Init+0x200>)
 8001500:	f000 fbb0 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001514:	4619      	mov	r1, r3
 8001516:	4807      	ldr	r0, [pc, #28]	@ (8001534 <MX_GPIO_Init+0x200>)
 8001518:	f000 fba4 	bl	8001c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800151c:	bf00      	nop
 800151e:	3738      	adds	r7, #56	@ 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40020400 	.word	0x40020400
 800152c:	40021400 	.word	0x40021400
 8001530:	40021000 	.word	0x40021000
 8001534:	40021800 	.word	0x40021800
 8001538:	40020800 	.word	0x40020800

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <Error_Handler+0x8>

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	4a0f      	ldr	r2, [pc, #60]	@ (8001594 <HAL_MspInit+0x4c>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800155c:	6453      	str	r3, [r2, #68]	@ 0x44
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <HAL_MspInit+0x4c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	@ 0x40
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	@ (800161c <HAL_UART_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12c      	bne.n	8001614 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <HAL_UART_MspInit+0x88>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	4a17      	ldr	r2, [pc, #92]	@ (8001620 <HAL_UART_MspInit+0x88>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_UART_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	@ (8001620 <HAL_UART_MspInit+0x88>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001604:	2307      	movs	r3, #7
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <HAL_UART_MspInit+0x8c>)
 8001610:	f000 fb28 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	@ 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40004800 	.word	0x40004800
 8001620:	40023800 	.word	0x40023800
 8001624:	40020c00 	.word	0x40020c00

08001628 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0a0      	sub	sp, #128	@ 0x80
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2258      	movs	r2, #88	@ 0x58
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f005 f9b6 	bl	80069ba <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001656:	d14d      	bne.n	80016f4 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001658:	2320      	movs	r3, #32
 800165a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800165c:	2300      	movs	r3, #0
 800165e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4618      	mov	r0, r3
 8001666:	f001 f805 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8001670:	f7ff ff64 	bl	800153c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_PCD_MspInit+0xd4>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	4a1f      	ldr	r2, [pc, #124]	@ (80016fc <HAL_PCD_MspInit+0xd4>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6313      	str	r3, [r2, #48]	@ 0x30
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <HAL_PCD_MspInit+0xd4>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001690:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001694:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016a2:	230a      	movs	r3, #10
 80016a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016aa:	4619      	mov	r1, r3
 80016ac:	4814      	ldr	r0, [pc, #80]	@ (8001700 <HAL_PCD_MspInit+0xd8>)
 80016ae:	f000 fad9 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016c4:	4619      	mov	r1, r3
 80016c6:	480e      	ldr	r0, [pc, #56]	@ (8001700 <HAL_PCD_MspInit+0xd8>)
 80016c8:	f000 facc 	bl	8001c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <HAL_PCD_MspInit+0xd4>)
 80016ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d0:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <HAL_PCD_MspInit+0xd4>)
 80016d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d6:	6353      	str	r3, [r2, #52]	@ 0x34
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <HAL_PCD_MspInit+0xd4>)
 80016de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <HAL_PCD_MspInit+0xd4>)
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e8:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <HAL_PCD_MspInit+0xd4>)
 80016ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3780      	adds	r7, #128	@ 0x80
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020000 	.word	0x40020000

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <UsageFault_Handler+0x4>

0800172c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 f959 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_ticks();
 800175e:	f7fe fffd 	bl	800075c <app_ticks>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}

08001766 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  return 1;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_kill>:

int _kill(int pid, int sig)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001780:	f005 f97a 	bl	8006a78 <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	2216      	movs	r2, #22
 8001788:	601a      	str	r2, [r3, #0]
  return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_exit>:

void _exit (int status)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800179e:	f04f 31ff 	mov.w	r1, #4294967295
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffe7 	bl	8001776 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <_exit+0x12>

080017ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e00a      	b.n	80017d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017be:	f3af 8000 	nop.w
 80017c2:	4601      	mov	r1, r0
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	60ba      	str	r2, [r7, #8]
 80017ca:	b2ca      	uxtb	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbf0      	blt.n	80017be <_read+0x12>
  }

  return len;
 80017dc:	687b      	ldr	r3, [r7, #4]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e009      	b.n	800180c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60ba      	str	r2, [r7, #8]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	dbf1      	blt.n	80017f8 <_write+0x12>
  }
  return len;
 8001814:	687b      	ldr	r3, [r7, #4]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_close>:

int _close(int file)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001846:	605a      	str	r2, [r3, #4]
  return 0;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_isatty>:

int _isatty(int file)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001890:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <_sbrk+0x5c>)
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <_sbrk+0x60>)
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <_sbrk+0x64>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <_sbrk+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d207      	bcs.n	80018c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b8:	f005 f8de 	bl	8006a78 <__errno>
 80018bc:	4603      	mov	r3, r0
 80018be:	220c      	movs	r2, #12
 80018c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	e009      	b.n	80018dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <_sbrk+0x64>)
 80018d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20050000 	.word	0x20050000
 80018e8:	00000400 	.word	0x00000400
 80018ec:	20000748 	.word	0x20000748
 80018f0:	20000ca0 	.word	0x20000ca0

080018f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <SystemInit+0x20>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <SystemInit+0x20>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001950 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800191c:	f7ff ffea 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	@ (8001964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001946:	f005 f89d 	bl	8006a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff fbd9 	bl	8001100 <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001950:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800195c:	0800bd74 	.word	0x0800bd74
  ldr r2, =_sbss
 8001960:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001964:	20000ca0 	.word	0x20000ca0

08001968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <HAL_Init+0x40>)
 8001976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800197a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_Init+0x40>)
 8001982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <HAL_Init+0x40>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f931 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fdd2 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f93b 	bl	8001c4a <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 f911 	bl	8001c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	2000074c 	.word	0x2000074c

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	2000074c 	.word	0x2000074c

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	@ (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	@ (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	@ 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	@ 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc8:	d301      	bcc.n	8001bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00f      	b.n	8001bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <SysTick_Config+0x40>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f7ff ff8e 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <SysTick_Config+0x40>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be6:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <SysTick_Config+0x40>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff47 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff5c 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff8e 	bl	8001b50 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5d 	bl	8001afc <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffb0 	bl	8001bb8 <SysTick_Config>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e165      	b.n	8001f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	f040 8154 	bne.w	8001f46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d005      	beq.n	8001cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d130      	bne.n	8001d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 0201 	and.w	r2, r3, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d017      	beq.n	8001d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d123      	bne.n	8001da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80ae 	beq.w	8001f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b5d      	ldr	r3, [pc, #372]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e06:	4a58      	ldr	r2, [pc, #352]	@ (8001f68 <HAL_GPIO_Init+0x304>)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001f6c <HAL_GPIO_Init+0x308>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d025      	beq.n	8001e7e <HAL_GPIO_Init+0x21a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4e      	ldr	r2, [pc, #312]	@ (8001f70 <HAL_GPIO_Init+0x30c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01f      	beq.n	8001e7a <HAL_GPIO_Init+0x216>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f74 <HAL_GPIO_Init+0x310>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d019      	beq.n	8001e76 <HAL_GPIO_Init+0x212>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4c      	ldr	r2, [pc, #304]	@ (8001f78 <HAL_GPIO_Init+0x314>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_GPIO_Init+0x20e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f7c <HAL_GPIO_Init+0x318>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00d      	beq.n	8001e6e <HAL_GPIO_Init+0x20a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4a      	ldr	r2, [pc, #296]	@ (8001f80 <HAL_GPIO_Init+0x31c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <HAL_GPIO_Init+0x206>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a49      	ldr	r2, [pc, #292]	@ (8001f84 <HAL_GPIO_Init+0x320>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_GPIO_Init+0x202>
 8001e62:	2306      	movs	r3, #6
 8001e64:	e00c      	b.n	8001e80 <HAL_GPIO_Init+0x21c>
 8001e66:	2307      	movs	r3, #7
 8001e68:	e00a      	b.n	8001e80 <HAL_GPIO_Init+0x21c>
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	e008      	b.n	8001e80 <HAL_GPIO_Init+0x21c>
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x21c>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e004      	b.n	8001e80 <HAL_GPIO_Init+0x21c>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_Init+0x21c>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_GPIO_Init+0x21c>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	f002 0203 	and.w	r2, r2, #3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4093      	lsls	r3, r2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e90:	4935      	ldr	r1, [pc, #212]	@ (8001f68 <HAL_GPIO_Init+0x304>)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f88 <HAL_GPIO_Init+0x324>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec2:	4a31      	ldr	r2, [pc, #196]	@ (8001f88 <HAL_GPIO_Init+0x324>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f88 <HAL_GPIO_Init+0x324>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eec:	4a26      	ldr	r2, [pc, #152]	@ (8001f88 <HAL_GPIO_Init+0x324>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef2:	4b25      	ldr	r3, [pc, #148]	@ (8001f88 <HAL_GPIO_Init+0x324>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f16:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <HAL_GPIO_Init+0x324>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_GPIO_Init+0x324>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f40:	4a11      	ldr	r2, [pc, #68]	@ (8001f88 <HAL_GPIO_Init+0x324>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	f67f ae96 	bls.w	8001c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3724      	adds	r7, #36	@ 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40021400 	.word	0x40021400
 8001f84:	40021800 	.word	0x40021800
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa8:	e003      	b.n	8001fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	041a      	lsls	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af02      	add	r7, sp, #8
 8001fc4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e108      	b.n	80021e2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fb1c 	bl	8001628 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ffe:	d102      	bne.n	8002006 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f001 fb7a 	bl	8003704 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7c1a      	ldrb	r2, [r3, #16]
 8002018:	f88d 2000 	strb.w	r2, [sp]
 800201c:	3304      	adds	r3, #4
 800201e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002020:	f001 fb0c 	bl	800363c <USB_CoreInit>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2202      	movs	r2, #2
 800202e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0d5      	b.n	80021e2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f001 fb72 	bl	8003726 <USB_SetCurrentMode>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0c6      	b.n	80021e2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e04a      	b.n	80020f0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	3315      	adds	r3, #21
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3314      	adds	r3, #20
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	b298      	uxth	r0, r3
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	332e      	adds	r3, #46	@ 0x2e
 8002096:	4602      	mov	r2, r0
 8002098:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	3318      	adds	r3, #24
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	331c      	adds	r3, #28
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3320      	adds	r3, #32
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3324      	adds	r3, #36	@ 0x24
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	3301      	adds	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	791b      	ldrb	r3, [r3, #4]
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3af      	bcc.n	800205a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e044      	b.n	800218a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	3301      	adds	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	791b      	ldrb	r3, [r3, #4]
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3b5      	bcc.n	8002100 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7c1a      	ldrb	r2, [r3, #16]
 800219c:	f88d 2000 	strb.w	r2, [sp]
 80021a0:	3304      	adds	r3, #4
 80021a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a4:	f001 fb0c 	bl	80037c0 <USB_DevInit>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e013      	b.n	80021e2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7b1b      	ldrb	r3, [r3, #12]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f80a 	bl	80021ea <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 fcc7 	bl	8003b6e <USB_DevDisconnect>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800221c:	f043 0303 	orr.w	r3, r3, #3
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0cc      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002248:	4b68      	ldr	r3, [pc, #416]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d90c      	bls.n	8002270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b65      	ldr	r3, [pc, #404]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b63      	ldr	r3, [pc, #396]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0b8      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d020      	beq.n	80022be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002288:	4b59      	ldr	r3, [pc, #356]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4a58      	ldr	r2, [pc, #352]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a0:	4b53      	ldr	r3, [pc, #332]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4a52      	ldr	r2, [pc, #328]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ac:	4b50      	ldr	r3, [pc, #320]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	494d      	ldr	r1, [pc, #308]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d044      	beq.n	8002354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b47      	ldr	r3, [pc, #284]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d119      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e07f      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f2:	4b3f      	ldr	r3, [pc, #252]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e06f      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002302:	4b3b      	ldr	r3, [pc, #236]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e067      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002312:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f023 0203 	bic.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4934      	ldr	r1, [pc, #208]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002324:	f7ff fb88 	bl	8001a38 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	e00a      	b.n	8002342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7ff fb84 	bl	8001a38 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e04f      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	4b2b      	ldr	r3, [pc, #172]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 020c 	and.w	r2, r3, #12
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	429a      	cmp	r2, r3
 8002352:	d1eb      	bne.n	800232c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002354:	4b25      	ldr	r3, [pc, #148]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d20c      	bcs.n	800237c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b22      	ldr	r3, [pc, #136]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b20      	ldr	r3, [pc, #128]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e032      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002388:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4916      	ldr	r1, [pc, #88]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	490e      	ldr	r1, [pc, #56]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ba:	f000 f821 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 80023be:	4602      	mov	r2, r0
 80023c0:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	490a      	ldr	r1, [pc, #40]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	5ccb      	ldrb	r3, [r1, r3]
 80023ce:	fa22 f303 	lsr.w	r3, r2, r3
 80023d2:	4a09      	ldr	r2, [pc, #36]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <HAL_RCC_ClockConfig+0x1c8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fae8 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023c00 	.word	0x40023c00
 80023f0:	40023800 	.word	0x40023800
 80023f4:	0800760c 	.word	0x0800760c
 80023f8:	20000000 	.word	0x20000000
 80023fc:	20000004 	.word	0x20000004

08002400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002404:	b094      	sub	sp, #80	@ 0x50
 8002406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	647b      	str	r3, [r7, #68]	@ 0x44
 800240c:	2300      	movs	r3, #0
 800240e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002410:	2300      	movs	r3, #0
 8002412:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002418:	4b79      	ldr	r3, [pc, #484]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x200>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d00d      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x40>
 8002424:	2b08      	cmp	r3, #8
 8002426:	f200 80e1 	bhi.w	80025ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x34>
 800242e:	2b04      	cmp	r3, #4
 8002430:	d003      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x3a>
 8002432:	e0db      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b73      	ldr	r3, [pc, #460]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x204>)
 8002436:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002438:	e0db      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800243a:	4b73      	ldr	r3, [pc, #460]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x208>)
 800243c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800243e:	e0d8      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002440:	4b6f      	ldr	r3, [pc, #444]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x200>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002448:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800244a:	4b6d      	ldr	r3, [pc, #436]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x200>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d063      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002456:	4b6a      	ldr	r3, [pc, #424]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x200>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	099b      	lsrs	r3, r3, #6
 800245c:	2200      	movs	r2, #0
 800245e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002460:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002468:	633b      	str	r3, [r7, #48]	@ 0x30
 800246a:	2300      	movs	r3, #0
 800246c:	637b      	str	r3, [r7, #52]	@ 0x34
 800246e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002472:	4622      	mov	r2, r4
 8002474:	462b      	mov	r3, r5
 8002476:	f04f 0000 	mov.w	r0, #0
 800247a:	f04f 0100 	mov.w	r1, #0
 800247e:	0159      	lsls	r1, r3, #5
 8002480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002484:	0150      	lsls	r0, r2, #5
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4621      	mov	r1, r4
 800248c:	1a51      	subs	r1, r2, r1
 800248e:	6139      	str	r1, [r7, #16]
 8002490:	4629      	mov	r1, r5
 8002492:	eb63 0301 	sbc.w	r3, r3, r1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024a4:	4659      	mov	r1, fp
 80024a6:	018b      	lsls	r3, r1, #6
 80024a8:	4651      	mov	r1, sl
 80024aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ae:	4651      	mov	r1, sl
 80024b0:	018a      	lsls	r2, r1, #6
 80024b2:	4651      	mov	r1, sl
 80024b4:	ebb2 0801 	subs.w	r8, r2, r1
 80024b8:	4659      	mov	r1, fp
 80024ba:	eb63 0901 	sbc.w	r9, r3, r1
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024d2:	4690      	mov	r8, r2
 80024d4:	4699      	mov	r9, r3
 80024d6:	4623      	mov	r3, r4
 80024d8:	eb18 0303 	adds.w	r3, r8, r3
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	462b      	mov	r3, r5
 80024e0:	eb49 0303 	adc.w	r3, r9, r3
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024f2:	4629      	mov	r1, r5
 80024f4:	024b      	lsls	r3, r1, #9
 80024f6:	4621      	mov	r1, r4
 80024f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024fc:	4621      	mov	r1, r4
 80024fe:	024a      	lsls	r2, r1, #9
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002506:	2200      	movs	r2, #0
 8002508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800250a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800250c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002510:	f7fd fed6 	bl	80002c0 <__aeabi_uldivmod>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4613      	mov	r3, r2
 800251a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800251c:	e058      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251e:	4b38      	ldr	r3, [pc, #224]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x200>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	2200      	movs	r2, #0
 8002526:	4618      	mov	r0, r3
 8002528:	4611      	mov	r1, r2
 800252a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800252e:	623b      	str	r3, [r7, #32]
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
 8002534:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002538:	4642      	mov	r2, r8
 800253a:	464b      	mov	r3, r9
 800253c:	f04f 0000 	mov.w	r0, #0
 8002540:	f04f 0100 	mov.w	r1, #0
 8002544:	0159      	lsls	r1, r3, #5
 8002546:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254a:	0150      	lsls	r0, r2, #5
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4641      	mov	r1, r8
 8002552:	ebb2 0a01 	subs.w	sl, r2, r1
 8002556:	4649      	mov	r1, r9
 8002558:	eb63 0b01 	sbc.w	fp, r3, r1
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002568:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800256c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002570:	ebb2 040a 	subs.w	r4, r2, sl
 8002574:	eb63 050b 	sbc.w	r5, r3, fp
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	00eb      	lsls	r3, r5, #3
 8002582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002586:	00e2      	lsls	r2, r4, #3
 8002588:	4614      	mov	r4, r2
 800258a:	461d      	mov	r5, r3
 800258c:	4643      	mov	r3, r8
 800258e:	18e3      	adds	r3, r4, r3
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	464b      	mov	r3, r9
 8002594:	eb45 0303 	adc.w	r3, r5, r3
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025a6:	4629      	mov	r1, r5
 80025a8:	028b      	lsls	r3, r1, #10
 80025aa:	4621      	mov	r1, r4
 80025ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025b0:	4621      	mov	r1, r4
 80025b2:	028a      	lsls	r2, r1, #10
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ba:	2200      	movs	r2, #0
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	61fa      	str	r2, [r7, #28]
 80025c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c4:	f7fd fe7c 	bl	80002c0 <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4613      	mov	r3, r2
 80025ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	3301      	adds	r3, #1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80025e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3750      	adds	r7, #80	@ 0x50
 80025f8:	46bd      	mov	sp, r7
 80025fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	00f42400 	.word	0x00f42400
 8002608:	007a1200 	.word	0x007a1200

0800260c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <HAL_RCC_GetHCLKFreq+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000000 	.word	0x20000000

08002624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002628:	f7ff fff0 	bl	800260c <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0a9b      	lsrs	r3, r3, #10
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4903      	ldr	r1, [pc, #12]	@ (8002648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800
 8002648:	0800761c 	.word	0x0800761c

0800264c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002650:	f7ff ffdc 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	0b5b      	lsrs	r3, r3, #13
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4903      	ldr	r1, [pc, #12]	@ (8002670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40023800 	.word	0x40023800
 8002670:	0800761c 	.word	0x0800761c

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d010      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002698:	4b7a      	ldr	r3, [pc, #488]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800269a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800269e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4977      	ldr	r1, [pc, #476]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d010      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80026c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80026c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026cc:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	496b      	ldr	r1, [pc, #428]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80026e4:	2301      	movs	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d022      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80026f4:	4b63      	ldr	r3, [pc, #396]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80026f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002702:	4960      	ldr	r1, [pc, #384]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800271e:	d10c      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002720:	4b58      	ldr	r3, [pc, #352]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002726:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	3b01      	subs	r3, #1
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	4954      	ldr	r1, [pc, #336]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d022      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002746:	4b4f      	ldr	r3, [pc, #316]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800274c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002754:	494b      	ldr	r1, [pc, #300]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002764:	2301      	movs	r3, #1
 8002766:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002770:	d10c      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002772:	4b44      	ldr	r3, [pc, #272]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002778:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	3b01      	subs	r3, #1
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	493f      	ldr	r1, [pc, #252]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 808a 	beq.w	80028ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b39      	ldr	r3, [pc, #228]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	4a38      	ldr	r2, [pc, #224]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027aa:	4b36      	ldr	r3, [pc, #216]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027b6:	4b34      	ldr	r3, [pc, #208]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a33      	ldr	r2, [pc, #204]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027c2:	f7ff f939 	bl	8001a38 <HAL_GetTick>
 80027c6:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7ff f935 	bl	8001a38 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e1d1      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e8:	4b26      	ldr	r3, [pc, #152]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f0:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d02f      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	429a      	cmp	r2, r3
 8002804:	d028      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002806:	4b1f      	ldr	r3, [pc, #124]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800280e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002810:	4b1e      	ldr	r3, [pc, #120]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800281c:	4a19      	ldr	r2, [pc, #100]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002822:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b01      	cmp	r3, #1
 800282c:	d114      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800282e:	f7ff f903 	bl	8001a38 <HAL_GetTick>
 8002832:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7ff f8ff 	bl	8001a38 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e199      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ee      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002860:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002864:	d114      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002866:	4b07      	ldr	r3, [pc, #28]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800287a:	4902      	ldr	r1, [pc, #8]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
 8002880:	e00c      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000
 800288c:	42470e40 	.word	0x42470e40
 8002890:	4b89      	ldr	r3, [pc, #548]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a88      	ldr	r2, [pc, #544]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002896:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800289a:	6093      	str	r3, [r2, #8]
 800289c:	4b86      	ldr	r3, [pc, #536]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800289e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	4983      	ldr	r1, [pc, #524]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 80028c0:	4b7e      	ldr	r3, [pc, #504]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80028c2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80028d0:	4b79      	ldr	r3, [pc, #484]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80028d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028de:	4976      	ldr	r1, [pc, #472]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d011      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028f2:	4b71      	ldr	r3, [pc, #452]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80028f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002900:	496d      	ldr	r1, [pc, #436]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002910:	d101      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002912:	2301      	movs	r3, #1
 8002914:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002922:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002928:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	4961      	ldr	r1, [pc, #388]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d004      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b80      	cmp	r3, #128	@ 0x80
 8002944:	f040 80c6 	bne.w	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002948:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800294e:	f7ff f873 	bl	8001a38 <HAL_GetTick>
 8002952:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002956:	f7ff f86f 	bl	8001a38 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e10b      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002968:	4b53      	ldr	r3, [pc, #332]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002974:	4a53      	ldr	r2, [pc, #332]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800297a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d023      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d019      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029b8:	d00e      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d115      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x386>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d6:	d110      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	019b      	lsls	r3, r3, #6
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	071b      	lsls	r3, r3, #28
 80029f2:	4931      	ldr	r1, [pc, #196]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d026      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d122      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a22:	4b25      	ldr	r3, [pc, #148]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a28:	0e1b      	lsrs	r3, r3, #24
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	019b      	lsls	r3, r3, #6
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	061b      	lsls	r3, r3, #24
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	071b      	lsls	r3, r3, #28
 8002a48:	491b      	ldr	r1, [pc, #108]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a56:	f023 021f 	bic.w	r2, r3, #31
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	4915      	ldr	r1, [pc, #84]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d010      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	071b      	lsls	r3, r3, #28
 8002a8e:	490a      	ldr	r1, [pc, #40]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe ffcc 	bl	8001a38 <HAL_GetTick>
 8002aa0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aa2:	e011      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aa4:	f7fe ffc8 	bl	8001a38 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d90a      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e064      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	424711e0 	.word	0x424711e0
 8002ac0:	42470068 	.word	0x42470068
 8002ac4:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0e7      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ae0:	4b29      	ldr	r3, [pc, #164]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ae6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aee:	4926      	ldr	r1, [pc, #152]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b02:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b08:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	491d      	ldr	r1, [pc, #116]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002b24:	4b18      	ldr	r3, [pc, #96]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b32:	4915      	ldr	r1, [pc, #84]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	490c      	ldr	r1, [pc, #48]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b68:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b6e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	4904      	ldr	r1, [pc, #16]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800

08002b8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e273      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d075      	beq.n	8002c96 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002baa:	4b88      	ldr	r3, [pc, #544]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb6:	4b85      	ldr	r3, [pc, #532]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d112      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc2:	4b82      	ldr	r3, [pc, #520]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d05b      	beq.n	8002c94 <HAL_RCC_OscConfig+0x108>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d157      	bne.n	8002c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e24e      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCC_OscConfig+0x74>
 8002bf2:	4b76      	ldr	r3, [pc, #472]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a75      	ldr	r2, [pc, #468]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e01d      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0a:	4b70      	ldr	r3, [pc, #448]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6f      	ldr	r2, [pc, #444]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b6d      	ldr	r3, [pc, #436]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c24:	4b69      	ldr	r3, [pc, #420]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a68      	ldr	r2, [pc, #416]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b66      	ldr	r3, [pc, #408]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a65      	ldr	r2, [pc, #404]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fef8 	bl	8001a38 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fef4 	bl	8001a38 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	@ 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e213      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0xc0>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fee4 	bl	8001a38 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe fee0 	bl	8001a38 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	@ 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1ff      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	4b51      	ldr	r3, [pc, #324]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0xe8>
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d063      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cae:	4b47      	ldr	r3, [pc, #284]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d11c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b44      	ldr	r3, [pc, #272]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d116      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	4b41      	ldr	r3, [pc, #260]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_RCC_OscConfig+0x152>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d001      	beq.n	8002cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e1d3      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4937      	ldr	r1, [pc, #220]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	e03a      	b.n	8002d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d020      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cfc:	4b34      	ldr	r3, [pc, #208]	@ (8002dd0 <HAL_RCC_OscConfig+0x244>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fe99 	bl	8001a38 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fe95 	bl	8001a38 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e1b4      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b28      	ldr	r3, [pc, #160]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4925      	ldr	r1, [pc, #148]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]
 8002d3c:	e015      	b.n	8002d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3e:	4b24      	ldr	r3, [pc, #144]	@ (8002dd0 <HAL_RCC_OscConfig+0x244>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fe78 	bl	8001a38 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4c:	f7fe fe74 	bl	8001a38 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e193      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d036      	beq.n	8002de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7e:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <HAL_RCC_OscConfig+0x248>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe fe58 	bl	8001a38 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe fe54 	bl	8001a38 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e173      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <HAL_RCC_OscConfig+0x240>)
 8002da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x200>
 8002daa:	e01b      	b.n	8002de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dac:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <HAL_RCC_OscConfig+0x248>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe fe41 	bl	8001a38 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	e00e      	b.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dba:	f7fe fe3d 	bl	8001a38 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d907      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e15c      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	42470000 	.word	0x42470000
 8002dd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	4b8a      	ldr	r3, [pc, #552]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ea      	bne.n	8002dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8097 	beq.w	8002f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df6:	4b83      	ldr	r3, [pc, #524]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	4b7f      	ldr	r3, [pc, #508]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e12:	4b7c      	ldr	r3, [pc, #496]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	4b79      	ldr	r3, [pc, #484]	@ (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d118      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2e:	4b76      	ldr	r3, [pc, #472]	@ (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a75      	ldr	r2, [pc, #468]	@ (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fdfd 	bl	8001a38 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e42:	f7fe fdf9 	bl	8001a38 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e118      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	4b6c      	ldr	r3, [pc, #432]	@ (8003008 <HAL_RCC_OscConfig+0x47c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2ea>
 8002e68:	4b66      	ldr	r3, [pc, #408]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6c:	4a65      	ldr	r2, [pc, #404]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e74:	e01c      	b.n	8002eb0 <HAL_RCC_OscConfig+0x324>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x30c>
 8002e7e:	4b61      	ldr	r3, [pc, #388]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e82:	4a60      	ldr	r2, [pc, #384]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	4a5d      	ldr	r2, [pc, #372]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0x324>
 8002e98:	4b5a      	ldr	r3, [pc, #360]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9c:	4a59      	ldr	r2, [pc, #356]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea4:	4b57      	ldr	r3, [pc, #348]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea8:	4a56      	ldr	r2, [pc, #344]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002eaa:	f023 0304 	bic.w	r3, r3, #4
 8002eae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d015      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe fdbe 	bl	8001a38 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec0:	f7fe fdba 	bl	8001a38 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0d7      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ee      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x334>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe fda8 	bl	8001a38 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eea:	e00a      	b.n	8002f02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7fe fda4 	bl	8001a38 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0c1      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f02:	4b40      	ldr	r3, [pc, #256]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ee      	bne.n	8002eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f14:	4b3b      	ldr	r3, [pc, #236]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	4a3a      	ldr	r2, [pc, #232]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80ad 	beq.w	8003084 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f2a:	4b36      	ldr	r3, [pc, #216]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d060      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d145      	bne.n	8002fca <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3e:	4b33      	ldr	r3, [pc, #204]	@ (800300c <HAL_RCC_OscConfig+0x480>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fd78 	bl	8001a38 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fd74 	bl	8001a38 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e093      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5e:	4b29      	ldr	r3, [pc, #164]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	019b      	lsls	r3, r3, #6
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	085b      	lsrs	r3, r3, #1
 8002f82:	3b01      	subs	r3, #1
 8002f84:	041b      	lsls	r3, r3, #16
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	061b      	lsls	r3, r3, #24
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f94:	071b      	lsls	r3, r3, #28
 8002f96:	491b      	ldr	r1, [pc, #108]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <HAL_RCC_OscConfig+0x480>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fd49 	bl	8001a38 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe fd45 	bl	8001a38 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e064      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x41e>
 8002fc8:	e05c      	b.n	8003084 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <HAL_RCC_OscConfig+0x480>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fd32 	bl	8001a38 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe fd2e 	bl	8001a38 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e04d      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_OscConfig+0x478>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x44c>
 8002ff6:	e045      	b.n	8003084 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e040      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
 8003004:	40023800 	.word	0x40023800
 8003008:	40007000 	.word	0x40007000
 800300c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003010:	4b1f      	ldr	r3, [pc, #124]	@ (8003090 <HAL_RCC_OscConfig+0x504>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d030      	beq.n	8003080 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d129      	bne.n	8003080 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d122      	bne.n	8003080 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	4293      	cmp	r3, r2
 800304a:	d119      	bne.n	8003080 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	3b01      	subs	r3, #1
 800305a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d10f      	bne.n	8003080 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d107      	bne.n	8003080 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800

08003094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e042      	b.n	800312c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe fa6c 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	@ 0x24
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f82b 	bl	8003134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800310c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b0c0      	sub	sp, #256	@ 0x100
 800313a:	af00      	add	r7, sp, #0
 800313c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003150:	68d9      	ldr	r1, [r3, #12]
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	ea40 0301 	orr.w	r3, r0, r1
 800315c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	431a      	orrs	r2, r3
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800318c:	f021 010c 	bic.w	r1, r1, #12
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800319a:	430b      	orrs	r3, r1
 800319c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ae:	6999      	ldr	r1, [r3, #24]
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	ea40 0301 	orr.w	r3, r0, r1
 80031ba:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b95      	ldr	r3, [pc, #596]	@ (8003418 <UART_SetConfig+0x2e4>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d011      	beq.n	80031ec <UART_SetConfig+0xb8>
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b93      	ldr	r3, [pc, #588]	@ (800341c <UART_SetConfig+0x2e8>)
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d00b      	beq.n	80031ec <UART_SetConfig+0xb8>
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b91      	ldr	r3, [pc, #580]	@ (8003420 <UART_SetConfig+0x2ec>)
 80031dc:	429a      	cmp	r2, r3
 80031de:	d005      	beq.n	80031ec <UART_SetConfig+0xb8>
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003424 <UART_SetConfig+0x2f0>)
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d104      	bne.n	80031f6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031ec:	f7ff fa2e 	bl	800264c <HAL_RCC_GetPCLK2Freq>
 80031f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031f4:	e003      	b.n	80031fe <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031f6:	f7ff fa15 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 80031fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003208:	f040 8110 	bne.w	800342c <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800320c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003210:	2200      	movs	r2, #0
 8003212:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003216:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800321a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800321e:	4622      	mov	r2, r4
 8003220:	462b      	mov	r3, r5
 8003222:	1891      	adds	r1, r2, r2
 8003224:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003226:	415b      	adcs	r3, r3
 8003228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800322a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800322e:	4621      	mov	r1, r4
 8003230:	eb12 0801 	adds.w	r8, r2, r1
 8003234:	4629      	mov	r1, r5
 8003236:	eb43 0901 	adc.w	r9, r3, r1
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800324a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800324e:	4690      	mov	r8, r2
 8003250:	4699      	mov	r9, r3
 8003252:	4623      	mov	r3, r4
 8003254:	eb18 0303 	adds.w	r3, r8, r3
 8003258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800325c:	462b      	mov	r3, r5
 800325e:	eb49 0303 	adc.w	r3, r9, r3
 8003262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003272:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003276:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800327a:	460b      	mov	r3, r1
 800327c:	18db      	adds	r3, r3, r3
 800327e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003280:	4613      	mov	r3, r2
 8003282:	eb42 0303 	adc.w	r3, r2, r3
 8003286:	657b      	str	r3, [r7, #84]	@ 0x54
 8003288:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800328c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003290:	f7fd f816 	bl	80002c0 <__aeabi_uldivmod>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4b63      	ldr	r3, [pc, #396]	@ (8003428 <UART_SetConfig+0x2f4>)
 800329a:	fba3 2302 	umull	r2, r3, r3, r2
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	011c      	lsls	r4, r3, #4
 80032a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	1891      	adds	r1, r2, r2
 80032ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032bc:	415b      	adcs	r3, r3
 80032be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032c4:	4641      	mov	r1, r8
 80032c6:	eb12 0a01 	adds.w	sl, r2, r1
 80032ca:	4649      	mov	r1, r9
 80032cc:	eb43 0b01 	adc.w	fp, r3, r1
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032e4:	4692      	mov	sl, r2
 80032e6:	469b      	mov	fp, r3
 80032e8:	4643      	mov	r3, r8
 80032ea:	eb1a 0303 	adds.w	r3, sl, r3
 80032ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032f2:	464b      	mov	r3, r9
 80032f4:	eb4b 0303 	adc.w	r3, fp, r3
 80032f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003308:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800330c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003310:	460b      	mov	r3, r1
 8003312:	18db      	adds	r3, r3, r3
 8003314:	643b      	str	r3, [r7, #64]	@ 0x40
 8003316:	4613      	mov	r3, r2
 8003318:	eb42 0303 	adc.w	r3, r2, r3
 800331c:	647b      	str	r3, [r7, #68]	@ 0x44
 800331e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003322:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003326:	f7fc ffcb 	bl	80002c0 <__aeabi_uldivmod>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4611      	mov	r1, r2
 8003330:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <UART_SetConfig+0x2f4>)
 8003332:	fba3 2301 	umull	r2, r3, r3, r1
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	2264      	movs	r2, #100	@ 0x64
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	1acb      	subs	r3, r1, r3
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003346:	4b38      	ldr	r3, [pc, #224]	@ (8003428 <UART_SetConfig+0x2f4>)
 8003348:	fba3 2302 	umull	r2, r3, r3, r2
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003354:	441c      	add	r4, r3
 8003356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800335a:	2200      	movs	r2, #0
 800335c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003360:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003364:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003368:	4642      	mov	r2, r8
 800336a:	464b      	mov	r3, r9
 800336c:	1891      	adds	r1, r2, r2
 800336e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003370:	415b      	adcs	r3, r3
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003378:	4641      	mov	r1, r8
 800337a:	1851      	adds	r1, r2, r1
 800337c:	6339      	str	r1, [r7, #48]	@ 0x30
 800337e:	4649      	mov	r1, r9
 8003380:	414b      	adcs	r3, r1
 8003382:	637b      	str	r3, [r7, #52]	@ 0x34
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003390:	4659      	mov	r1, fp
 8003392:	00cb      	lsls	r3, r1, #3
 8003394:	4651      	mov	r1, sl
 8003396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339a:	4651      	mov	r1, sl
 800339c:	00ca      	lsls	r2, r1, #3
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	4642      	mov	r2, r8
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033ac:	464b      	mov	r3, r9
 80033ae:	460a      	mov	r2, r1
 80033b0:	eb42 0303 	adc.w	r3, r2, r3
 80033b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033cc:	460b      	mov	r3, r1
 80033ce:	18db      	adds	r3, r3, r3
 80033d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033d2:	4613      	mov	r3, r2
 80033d4:	eb42 0303 	adc.w	r3, r2, r3
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033e2:	f7fc ff6d 	bl	80002c0 <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <UART_SetConfig+0x2f4>)
 80033ec:	fba3 1302 	umull	r1, r3, r3, r2
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	2164      	movs	r1, #100	@ 0x64
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	3332      	adds	r3, #50	@ 0x32
 80033fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003428 <UART_SetConfig+0x2f4>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	f003 0207 	and.w	r2, r3, #7
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4422      	add	r2, r4
 8003412:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003414:	e10a      	b.n	800362c <UART_SetConfig+0x4f8>
 8003416:	bf00      	nop
 8003418:	40011000 	.word	0x40011000
 800341c:	40011400 	.word	0x40011400
 8003420:	40011800 	.word	0x40011800
 8003424:	40011c00 	.word	0x40011c00
 8003428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800342c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003430:	2200      	movs	r2, #0
 8003432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003436:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800343a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800343e:	4642      	mov	r2, r8
 8003440:	464b      	mov	r3, r9
 8003442:	1891      	adds	r1, r2, r2
 8003444:	6239      	str	r1, [r7, #32]
 8003446:	415b      	adcs	r3, r3
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
 800344a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800344e:	4641      	mov	r1, r8
 8003450:	1854      	adds	r4, r2, r1
 8003452:	4649      	mov	r1, r9
 8003454:	eb43 0501 	adc.w	r5, r3, r1
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	00eb      	lsls	r3, r5, #3
 8003462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003466:	00e2      	lsls	r2, r4, #3
 8003468:	4614      	mov	r4, r2
 800346a:	461d      	mov	r5, r3
 800346c:	4643      	mov	r3, r8
 800346e:	18e3      	adds	r3, r4, r3
 8003470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003474:	464b      	mov	r3, r9
 8003476:	eb45 0303 	adc.w	r3, r5, r3
 800347a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800348a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800349a:	4629      	mov	r1, r5
 800349c:	008b      	lsls	r3, r1, #2
 800349e:	4621      	mov	r1, r4
 80034a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a4:	4621      	mov	r1, r4
 80034a6:	008a      	lsls	r2, r1, #2
 80034a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034ac:	f7fc ff08 	bl	80002c0 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4b60      	ldr	r3, [pc, #384]	@ (8003638 <UART_SetConfig+0x504>)
 80034b6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	011c      	lsls	r4, r3, #4
 80034be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034d0:	4642      	mov	r2, r8
 80034d2:	464b      	mov	r3, r9
 80034d4:	1891      	adds	r1, r2, r2
 80034d6:	61b9      	str	r1, [r7, #24]
 80034d8:	415b      	adcs	r3, r3
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e0:	4641      	mov	r1, r8
 80034e2:	1851      	adds	r1, r2, r1
 80034e4:	6139      	str	r1, [r7, #16]
 80034e6:	4649      	mov	r1, r9
 80034e8:	414b      	adcs	r3, r1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034f8:	4659      	mov	r1, fp
 80034fa:	00cb      	lsls	r3, r1, #3
 80034fc:	4651      	mov	r1, sl
 80034fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003502:	4651      	mov	r1, sl
 8003504:	00ca      	lsls	r2, r1, #3
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	4603      	mov	r3, r0
 800350c:	4642      	mov	r2, r8
 800350e:	189b      	adds	r3, r3, r2
 8003510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003514:	464b      	mov	r3, r9
 8003516:	460a      	mov	r2, r1
 8003518:	eb42 0303 	adc.w	r3, r2, r3
 800351c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	67bb      	str	r3, [r7, #120]	@ 0x78
 800352a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003538:	4649      	mov	r1, r9
 800353a:	008b      	lsls	r3, r1, #2
 800353c:	4641      	mov	r1, r8
 800353e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003542:	4641      	mov	r1, r8
 8003544:	008a      	lsls	r2, r1, #2
 8003546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800354a:	f7fc feb9 	bl	80002c0 <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4611      	mov	r1, r2
 8003554:	4b38      	ldr	r3, [pc, #224]	@ (8003638 <UART_SetConfig+0x504>)
 8003556:	fba3 2301 	umull	r2, r3, r3, r1
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2264      	movs	r2, #100	@ 0x64
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	1acb      	subs	r3, r1, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	3332      	adds	r3, #50	@ 0x32
 8003568:	4a33      	ldr	r2, [pc, #204]	@ (8003638 <UART_SetConfig+0x504>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003574:	441c      	add	r4, r3
 8003576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357a:	2200      	movs	r2, #0
 800357c:	673b      	str	r3, [r7, #112]	@ 0x70
 800357e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003580:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	1891      	adds	r1, r2, r2
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	415b      	adcs	r3, r3
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003594:	4641      	mov	r1, r8
 8003596:	1851      	adds	r1, r2, r1
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	4649      	mov	r1, r9
 800359c:	414b      	adcs	r3, r1
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035ac:	4659      	mov	r1, fp
 80035ae:	00cb      	lsls	r3, r1, #3
 80035b0:	4651      	mov	r1, sl
 80035b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b6:	4651      	mov	r1, sl
 80035b8:	00ca      	lsls	r2, r1, #3
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	4642      	mov	r2, r8
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035c6:	464b      	mov	r3, r9
 80035c8:	460a      	mov	r2, r1
 80035ca:	eb42 0303 	adc.w	r3, r2, r3
 80035ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035da:	667a      	str	r2, [r7, #100]	@ 0x64
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035e8:	4649      	mov	r1, r9
 80035ea:	008b      	lsls	r3, r1, #2
 80035ec:	4641      	mov	r1, r8
 80035ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f2:	4641      	mov	r1, r8
 80035f4:	008a      	lsls	r2, r1, #2
 80035f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035fa:	f7fc fe61 	bl	80002c0 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4b0d      	ldr	r3, [pc, #52]	@ (8003638 <UART_SetConfig+0x504>)
 8003604:	fba3 1302 	umull	r1, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	2164      	movs	r1, #100	@ 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	3332      	adds	r3, #50	@ 0x32
 8003616:	4a08      	ldr	r2, [pc, #32]	@ (8003638 <UART_SetConfig+0x504>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	f003 020f 	and.w	r2, r3, #15
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4422      	add	r2, r4
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003632:	46bd      	mov	sp, r7
 8003634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003638:	51eb851f 	.word	0x51eb851f

0800363c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800363c:	b084      	sub	sp, #16
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	f107 001c 	add.w	r0, r7, #28
 800364a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800364e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003652:	2b01      	cmp	r3, #1
 8003654:	d123      	bne.n	800369e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800366a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800367e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003682:	2b01      	cmp	r3, #1
 8003684:	d105      	bne.n	8003692 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa9a 	bl	8003bcc <USB_CoreReset>
 8003698:	4603      	mov	r3, r0
 800369a:	73fb      	strb	r3, [r7, #15]
 800369c:	e01b      	b.n	80036d6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fa8e 	bl	8003bcc <USB_CoreReset>
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80036c8:	e005      	b.n	80036d6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036d6:	7fbb      	ldrb	r3, [r7, #30]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d10b      	bne.n	80036f4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f043 0206 	orr.w	r2, r3, #6
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003700:	b004      	add	sp, #16
 8003702:	4770      	bx	lr

08003704 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f023 0201 	bic.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d115      	bne.n	8003774 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003754:	200a      	movs	r0, #10
 8003756:	f7fe f97b 	bl	8001a50 <HAL_Delay>
      ms += 10U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	330a      	adds	r3, #10
 800375e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fa25 	bl	8003bb0 <USB_GetMode>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d01e      	beq.n	80037aa <USB_SetCurrentMode+0x84>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003770:	d9f0      	bls.n	8003754 <USB_SetCurrentMode+0x2e>
 8003772:	e01a      	b.n	80037aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d115      	bne.n	80037a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003786:	200a      	movs	r0, #10
 8003788:	f7fe f962 	bl	8001a50 <HAL_Delay>
      ms += 10U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	330a      	adds	r3, #10
 8003790:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fa0c 	bl	8003bb0 <USB_GetMode>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <USB_SetCurrentMode+0x84>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80037a2:	d9f0      	bls.n	8003786 <USB_SetCurrentMode+0x60>
 80037a4:	e001      	b.n	80037aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e005      	b.n	80037b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80037ae:	d101      	bne.n	80037b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037c0:	b084      	sub	sp, #16
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80037ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	e009      	b.n	80037f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	3340      	adds	r3, #64	@ 0x40
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	2200      	movs	r2, #0
 80037ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	3301      	adds	r3, #1
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b0e      	cmp	r3, #14
 80037f8:	d9f2      	bls.n	80037e0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d11c      	bne.n	800383c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003810:	f043 0302 	orr.w	r3, r3, #2
 8003814:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e005      	b.n	8003848 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800384e:	461a      	mov	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003854:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003858:	2b01      	cmp	r3, #1
 800385a:	d10d      	bne.n	8003878 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800385c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003860:	2b00      	cmp	r3, #0
 8003862:	d104      	bne.n	800386e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003864:	2100      	movs	r1, #0
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f968 	bl	8003b3c <USB_SetDevSpeed>
 800386c:	e008      	b.n	8003880 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800386e:	2101      	movs	r1, #1
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f963 	bl	8003b3c <USB_SetDevSpeed>
 8003876:	e003      	b.n	8003880 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003878:	2103      	movs	r1, #3
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f95e 	bl	8003b3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003880:	2110      	movs	r1, #16
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8fa 	bl	8003a7c <USB_FlushTxFifo>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f924 	bl	8003ae0 <USB_FlushRxFifo>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a8:	461a      	mov	r2, r3
 80038aa:	2300      	movs	r3, #0
 80038ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b4:	461a      	mov	r2, r3
 80038b6:	2300      	movs	r3, #0
 80038b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c0:	461a      	mov	r2, r3
 80038c2:	2300      	movs	r3, #0
 80038c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	e043      	b.n	8003954 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038e2:	d118      	bne.n	8003916 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f6:	461a      	mov	r2, r3
 80038f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e013      	b.n	8003928 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800390c:	461a      	mov	r2, r3
 800390e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e008      	b.n	8003928 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003922:	461a      	mov	r2, r3
 8003924:	2300      	movs	r3, #0
 8003926:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003934:	461a      	mov	r2, r3
 8003936:	2300      	movs	r3, #0
 8003938:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003946:	461a      	mov	r2, r3
 8003948:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800394c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	3301      	adds	r3, #1
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003958:	461a      	mov	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4293      	cmp	r3, r2
 800395e:	d3b5      	bcc.n	80038cc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e043      	b.n	80039ee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003978:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800397c:	d118      	bne.n	80039b0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003990:	461a      	mov	r2, r3
 8003992:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	e013      	b.n	80039c2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a6:	461a      	mov	r2, r3
 80039a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e008      	b.n	80039c2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ce:	461a      	mov	r2, r3
 80039d0:	2300      	movs	r3, #0
 80039d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e0:	461a      	mov	r2, r3
 80039e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	3301      	adds	r3, #1
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039f2:	461a      	mov	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d3b5      	bcc.n	8003966 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a0c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a1a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f043 0210 	orr.w	r2, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	4b10      	ldr	r3, [pc, #64]	@ (8003a78 <USB_DevInit+0x2b8>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f043 0208 	orr.w	r2, r3, #8
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d107      	bne.n	8003a68 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a60:	f043 0304 	orr.w	r3, r3, #4
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a74:	b004      	add	sp, #16
 8003a76:	4770      	bx	lr
 8003a78:	803c3800 	.word	0x803c3800

08003a7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a96:	d901      	bls.n	8003a9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e01b      	b.n	8003ad4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	daf2      	bge.n	8003a8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	019b      	lsls	r3, r3, #6
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ac0:	d901      	bls.n	8003ac6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e006      	b.n	8003ad4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d0f0      	beq.n	8003ab4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3301      	adds	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003af8:	d901      	bls.n	8003afe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e018      	b.n	8003b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	daf2      	bge.n	8003aec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3301      	adds	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b1c:	d901      	bls.n	8003b22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e006      	b.n	8003b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d0f0      	beq.n	8003b10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	68f9      	ldr	r1, [r7, #12]
 8003b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003b88:	f023 0303 	bic.w	r3, r3, #3
 8003b8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003be4:	d901      	bls.n	8003bea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e01b      	b.n	8003c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	daf2      	bge.n	8003bd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c0e:	d901      	bls.n	8003c14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e006      	b.n	8003c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d0f0      	beq.n	8003c02 <USB_CoreReset+0x36>

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af02      	add	r7, sp, #8
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	4608      	mov	r0, r1
 8003c38:	4611      	mov	r1, r2
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	70fb      	strb	r3, [r7, #3]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70bb      	strb	r3, [r7, #2]
 8003c44:	4613      	mov	r3, r2
 8003c46:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	787b      	ldrb	r3, [r7, #1]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	b2d8      	uxtb	r0, r3
 8003c50:	78ba      	ldrb	r2, [r7, #2]
 8003c52:	7c3b      	ldrb	r3, [r7, #16]
 8003c54:	4413      	add	r3, r2
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	78ba      	ldrb	r2, [r7, #2]
 8003c5a:	78f9      	ldrb	r1, [r7, #3]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4603      	mov	r3, r0
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f001 fcb4 	bl	80055ce <u8g2_IsIntersection>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8003c6c:	e00d      	b.n	8003c8a <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8003c6e:	787b      	ldrb	r3, [r7, #1]
 8003c70:	78ba      	ldrb	r2, [r7, #2]
 8003c72:	78f9      	ldrb	r1, [r7, #3]
 8003c74:	2000      	movs	r0, #0
 8003c76:	9000      	str	r0, [sp, #0]
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f001 fb76 	bl	800536a <u8g2_DrawHVLine>
    y++;    
 8003c7e:	78bb      	ldrb	r3, [r7, #2]
 8003c80:	3301      	adds	r3, #1
 8003c82:	70bb      	strb	r3, [r7, #2]
    h--;
 8003c84:	7c3b      	ldrb	r3, [r7, #16]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8003c8a:	7c3b      	ldrb	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ee      	bne.n	8003c6e <u8g2_DrawBox+0x40>
 8003c90:	e000      	b.n	8003c94 <u8g2_DrawBox+0x66>
    return;
 8003c92:	bf00      	nop
  }
}
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af02      	add	r7, sp, #8
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4603      	mov	r3, r0
 8003caa:	70fb      	strb	r3, [r7, #3]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70bb      	strb	r3, [r7, #2]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	787b      	ldrb	r3, [r7, #1]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	b2d8      	uxtb	r0, r3
 8003cc0:	78ba      	ldrb	r2, [r7, #2]
 8003cc2:	7e3b      	ldrb	r3, [r7, #24]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	78ba      	ldrb	r2, [r7, #2]
 8003cca:	78f9      	ldrb	r1, [r7, #3]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f001 fc7c 	bl	80055ce <u8g2_IsIntersection>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d02e      	beq.n	8003d3a <u8g2_DrawFrame+0xa0>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8003cdc:	787b      	ldrb	r3, [r7, #1]
 8003cde:	78ba      	ldrb	r2, [r7, #2]
 8003ce0:	78f9      	ldrb	r1, [r7, #3]
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	9000      	str	r0, [sp, #0]
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f001 fb3f 	bl	800536a <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8003cec:	7e3b      	ldrb	r3, [r7, #24]
 8003cee:	78ba      	ldrb	r2, [r7, #2]
 8003cf0:	78f9      	ldrb	r1, [r7, #3]
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	9000      	str	r0, [sp, #0]
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f001 fb37 	bl	800536a <u8g2_DrawHVLine>
  x+=w;
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	787b      	ldrb	r3, [r7, #1]
 8003d00:	4413      	add	r3, r2
 8003d02:	70fb      	strb	r3, [r7, #3]
  x--;
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8003d0a:	7e3b      	ldrb	r3, [r7, #24]
 8003d0c:	78ba      	ldrb	r2, [r7, #2]
 8003d0e:	78f9      	ldrb	r1, [r7, #3]
 8003d10:	2001      	movs	r0, #1
 8003d12:	9000      	str	r0, [sp, #0]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f001 fb28 	bl	800536a <u8g2_DrawHVLine>
  y+=h;
 8003d1a:	78ba      	ldrb	r2, [r7, #2]
 8003d1c:	7e3b      	ldrb	r3, [r7, #24]
 8003d1e:	4413      	add	r3, r2
 8003d20:	70bb      	strb	r3, [r7, #2]
  y--;
 8003d22:	78bb      	ldrb	r3, [r7, #2]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	78ba      	ldrb	r2, [r7, #2]
 8003d2c:	7bf9      	ldrb	r1, [r7, #15]
 8003d2e:	2000      	movs	r0, #0
 8003d30:	9000      	str	r0, [sp, #0]
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f001 fb19 	bl	800536a <u8g2_DrawHVLine>
 8003d38:	e000      	b.n	8003d3c <u8g2_DrawFrame+0xa2>
    return;
 8003d3a:	bf00      	nop
}
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af02      	add	r7, sp, #8
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	4608      	mov	r0, r1
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4603      	mov	r3, r0
 8003d52:	70fb      	strb	r3, [r7, #3]
 8003d54:	460b      	mov	r3, r1
 8003d56:	70bb      	strb	r3, [r7, #2]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	787b      	ldrb	r3, [r7, #1]
 8003d60:	4413      	add	r3, r2
 8003d62:	b2d8      	uxtb	r0, r3
 8003d64:	78ba      	ldrb	r2, [r7, #2]
 8003d66:	7e3b      	ldrb	r3, [r7, #24]
 8003d68:	4413      	add	r3, r2
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	78ba      	ldrb	r2, [r7, #2]
 8003d6e:	78f9      	ldrb	r1, [r7, #3]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	4603      	mov	r3, r0
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f001 fc2a 	bl	80055ce <u8g2_IsIntersection>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 808c 	beq.w	8003e9a <u8g2_DrawRBox+0x158>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	7f3b      	ldrb	r3, [r7, #28]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8003d8e:	78bb      	ldrb	r3, [r7, #2]
 8003d90:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8003d92:	7bba      	ldrb	r2, [r7, #14]
 8003d94:	7f3b      	ldrb	r3, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	73bb      	strb	r3, [r7, #14]
 
  xr = x;
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	737b      	strb	r3, [r7, #13]
  xr += w;
 8003d9e:	7b7a      	ldrb	r2, [r7, #13]
 8003da0:	787b      	ldrb	r3, [r7, #1]
 8003da2:	4413      	add	r3, r2
 8003da4:	737b      	strb	r3, [r7, #13]
  xr -= r;
 8003da6:	7b7a      	ldrb	r2, [r7, #13]
 8003da8:	7f3b      	ldrb	r3, [r7, #28]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	737b      	strb	r3, [r7, #13]
  xr -= 1;
 8003dae:	7b7b      	ldrb	r3, [r7, #13]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	737b      	strb	r3, [r7, #13]
  
  yl = y;
 8003db4:	78bb      	ldrb	r3, [r7, #2]
 8003db6:	733b      	strb	r3, [r7, #12]
  yl += h;
 8003db8:	7b3a      	ldrb	r2, [r7, #12]
 8003dba:	7e3b      	ldrb	r3, [r7, #24]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	733b      	strb	r3, [r7, #12]
  yl -= r; 
 8003dc0:	7b3a      	ldrb	r2, [r7, #12]
 8003dc2:	7f3b      	ldrb	r3, [r7, #28]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	733b      	strb	r3, [r7, #12]
  yl -= 1;
 8003dc8:	7b3b      	ldrb	r3, [r7, #12]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	733b      	strb	r3, [r7, #12]

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8003dce:	7f3b      	ldrb	r3, [r7, #28]
 8003dd0:	7bba      	ldrb	r2, [r7, #14]
 8003dd2:	7bf9      	ldrb	r1, [r7, #15]
 8003dd4:	2002      	movs	r0, #2
 8003dd6:	9000      	str	r0, [sp, #0]
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fba0 	bl	800451e <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8003dde:	7f3b      	ldrb	r3, [r7, #28]
 8003de0:	7bba      	ldrb	r2, [r7, #14]
 8003de2:	7b79      	ldrb	r1, [r7, #13]
 8003de4:	2001      	movs	r0, #1
 8003de6:	9000      	str	r0, [sp, #0]
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fb98 	bl	800451e <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8003dee:	7f3b      	ldrb	r3, [r7, #28]
 8003df0:	7b3a      	ldrb	r2, [r7, #12]
 8003df2:	7bf9      	ldrb	r1, [r7, #15]
 8003df4:	2004      	movs	r0, #4
 8003df6:	9000      	str	r0, [sp, #0]
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fb90 	bl	800451e <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8003dfe:	7f3b      	ldrb	r3, [r7, #28]
 8003e00:	7b3a      	ldrb	r2, [r7, #12]
 8003e02:	7b79      	ldrb	r1, [r7, #13]
 8003e04:	2008      	movs	r0, #8
 8003e06:	9000      	str	r0, [sp, #0]
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fb88 	bl	800451e <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8003e0e:	787b      	ldrb	r3, [r7, #1]
 8003e10:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003e12:	7afa      	ldrb	r2, [r7, #11]
 8003e14:	7f3b      	ldrb	r3, [r7, #28]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003e1a:	7afa      	ldrb	r2, [r7, #11]
 8003e1c:	7f3b      	ldrb	r3, [r7, #28]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	72fb      	strb	r3, [r7, #11]
    xl++;
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	3301      	adds	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
    yu++;
 8003e28:	7bbb      	ldrb	r3, [r7, #14]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d918      	bls.n	8003e66 <u8g2_DrawRBox+0x124>
    {
      ww -= 2;
 8003e34:	7afb      	ldrb	r3, [r7, #11]
 8003e36:	3b02      	subs	r3, #2
 8003e38:	72fb      	strb	r3, [r7, #11]
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8003e3a:	7f3b      	ldrb	r3, [r7, #28]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	7af8      	ldrb	r0, [r7, #11]
 8003e42:	78ba      	ldrb	r2, [r7, #2]
 8003e44:	7bf9      	ldrb	r1, [r7, #15]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	4603      	mov	r3, r0
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff feef 	bl	8003c2e <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
 8003e50:	7f3b      	ldrb	r3, [r7, #28]
 8003e52:	3301      	adds	r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	7af8      	ldrb	r0, [r7, #11]
 8003e58:	7b3a      	ldrb	r2, [r7, #12]
 8003e5a:	7bf9      	ldrb	r1, [r7, #15]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff fee4 	bl	8003c2e <u8g2_DrawBox>
    }
    
    hh = h;
 8003e66:	7e3b      	ldrb	r3, [r7, #24]
 8003e68:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003e6a:	7aba      	ldrb	r2, [r7, #10]
 8003e6c:	7f3b      	ldrb	r3, [r7, #28]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003e72:	7aba      	ldrb	r2, [r7, #10]
 8003e74:	7f3b      	ldrb	r3, [r7, #28]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	72bb      	strb	r3, [r7, #10]
    //h--;
    if ( hh >= 3 )
 8003e7a:	7abb      	ldrb	r3, [r7, #10]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d90d      	bls.n	8003e9c <u8g2_DrawRBox+0x15a>
    {
      hh -= 2;
 8003e80:	7abb      	ldrb	r3, [r7, #10]
 8003e82:	3b02      	subs	r3, #2
 8003e84:	72bb      	strb	r3, [r7, #10]
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8003e86:	7878      	ldrb	r0, [r7, #1]
 8003e88:	7bba      	ldrb	r2, [r7, #14]
 8003e8a:	78f9      	ldrb	r1, [r7, #3]
 8003e8c:	7abb      	ldrb	r3, [r7, #10]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	4603      	mov	r3, r0
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fecb 	bl	8003c2e <u8g2_DrawBox>
 8003e98:	e000      	b.n	8003e9c <u8g2_DrawRBox+0x15a>
    return;
 8003e9a:	bf00      	nop
    }
  }
}
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af02      	add	r7, sp, #8
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	4608      	mov	r0, r1
 8003eac:	4611      	mov	r1, r2
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	70fb      	strb	r3, [r7, #3]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	70bb      	strb	r3, [r7, #2]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003ebc:	78fa      	ldrb	r2, [r7, #3]
 8003ebe:	787b      	ldrb	r3, [r7, #1]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	b2d8      	uxtb	r0, r3
 8003ec4:	78ba      	ldrb	r2, [r7, #2]
 8003ec6:	7e3b      	ldrb	r3, [r7, #24]
 8003ec8:	4413      	add	r3, r2
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	78ba      	ldrb	r2, [r7, #2]
 8003ece:	78f9      	ldrb	r1, [r7, #3]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f001 fb7a 	bl	80055ce <u8g2_IsIntersection>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8091 	beq.w	8004004 <u8g2_DrawRFrame+0x162>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	7f3b      	ldrb	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8003eee:	78bb      	ldrb	r3, [r7, #2]
 8003ef0:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8003ef2:	7bba      	ldrb	r2, [r7, #14]
 8003ef4:	7f3b      	ldrb	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	737b      	strb	r3, [r7, #13]
    xr += w;
 8003efe:	7b7a      	ldrb	r2, [r7, #13]
 8003f00:	787b      	ldrb	r3, [r7, #1]
 8003f02:	4413      	add	r3, r2
 8003f04:	737b      	strb	r3, [r7, #13]
    xr -= r;
 8003f06:	7b7a      	ldrb	r2, [r7, #13]
 8003f08:	7f3b      	ldrb	r3, [r7, #28]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8003f0e:	7b7b      	ldrb	r3, [r7, #13]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 8003f14:	78bb      	ldrb	r3, [r7, #2]
 8003f16:	733b      	strb	r3, [r7, #12]
    yl += h;
 8003f18:	7b3a      	ldrb	r2, [r7, #12]
 8003f1a:	7e3b      	ldrb	r3, [r7, #24]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8003f20:	7b3a      	ldrb	r2, [r7, #12]
 8003f22:	7f3b      	ldrb	r3, [r7, #28]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 8003f28:	7b3b      	ldrb	r3, [r7, #12]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8003f2e:	7f3b      	ldrb	r3, [r7, #28]
 8003f30:	7bba      	ldrb	r2, [r7, #14]
 8003f32:	7bf9      	ldrb	r1, [r7, #15]
 8003f34:	2002      	movs	r0, #2
 8003f36:	9000      	str	r0, [sp, #0]
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f9ce 	bl	80042da <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8003f3e:	7f3b      	ldrb	r3, [r7, #28]
 8003f40:	7bba      	ldrb	r2, [r7, #14]
 8003f42:	7b79      	ldrb	r1, [r7, #13]
 8003f44:	2001      	movs	r0, #1
 8003f46:	9000      	str	r0, [sp, #0]
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f9c6 	bl	80042da <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8003f4e:	7f3b      	ldrb	r3, [r7, #28]
 8003f50:	7b3a      	ldrb	r2, [r7, #12]
 8003f52:	7bf9      	ldrb	r1, [r7, #15]
 8003f54:	2004      	movs	r0, #4
 8003f56:	9000      	str	r0, [sp, #0]
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f9be 	bl	80042da <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8003f5e:	7f3b      	ldrb	r3, [r7, #28]
 8003f60:	7b3a      	ldrb	r2, [r7, #12]
 8003f62:	7b79      	ldrb	r1, [r7, #13]
 8003f64:	2008      	movs	r0, #8
 8003f66:	9000      	str	r0, [sp, #0]
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f9b6 	bl	80042da <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8003f6e:	787b      	ldrb	r3, [r7, #1]
 8003f70:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003f72:	7afa      	ldrb	r2, [r7, #11]
 8003f74:	7f3b      	ldrb	r3, [r7, #28]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003f7a:	7afa      	ldrb	r2, [r7, #11]
 8003f7c:	7f3b      	ldrb	r3, [r7, #28]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	72fb      	strb	r3, [r7, #11]
    hh = h;
 8003f82:	7e3b      	ldrb	r3, [r7, #24]
 8003f84:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003f86:	7aba      	ldrb	r2, [r7, #10]
 8003f88:	7f3b      	ldrb	r3, [r7, #28]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003f8e:	7aba      	ldrb	r2, [r7, #10]
 8003f90:	7f3b      	ldrb	r3, [r7, #28]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
    yu++;
 8003f9c:	7bbb      	ldrb	r3, [r7, #14]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8003fa2:	7afb      	ldrb	r3, [r7, #11]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d914      	bls.n	8003fd2 <u8g2_DrawRFrame+0x130>
    {
      ww -= 2;
 8003fa8:	7afb      	ldrb	r3, [r7, #11]
 8003faa:	3b02      	subs	r3, #2
 8003fac:	72fb      	strb	r3, [r7, #11]
      h--;
 8003fae:	7e3b      	ldrb	r3, [r7, #24]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8003fb4:	7afb      	ldrb	r3, [r7, #11]
 8003fb6:	78ba      	ldrb	r2, [r7, #2]
 8003fb8:	7bf9      	ldrb	r1, [r7, #15]
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f001 fa58 	bl	8005470 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8003fc0:	78ba      	ldrb	r2, [r7, #2]
 8003fc2:	7e3b      	ldrb	r3, [r7, #24]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	7afb      	ldrb	r3, [r7, #11]
 8003fca:	7bf9      	ldrb	r1, [r7, #15]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f001 fa4f 	bl	8005470 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8003fd2:	7abb      	ldrb	r3, [r7, #10]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d916      	bls.n	8004006 <u8g2_DrawRFrame+0x164>
    {
      hh -= 2;
 8003fd8:	7abb      	ldrb	r3, [r7, #10]
 8003fda:	3b02      	subs	r3, #2
 8003fdc:	72bb      	strb	r3, [r7, #10]
      w--;
 8003fde:	787b      	ldrb	r3, [r7, #1]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8003fe4:	7abb      	ldrb	r3, [r7, #10]
 8003fe6:	7bba      	ldrb	r2, [r7, #14]
 8003fe8:	78f9      	ldrb	r1, [r7, #3]
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f001 fa59 	bl	80054a2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	787b      	ldrb	r3, [r7, #1]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	b2d9      	uxtb	r1, r3
 8003ff8:	7abb      	ldrb	r3, [r7, #10]
 8003ffa:	7bba      	ldrb	r2, [r7, #14]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f001 fa50 	bl	80054a2 <u8g2_DrawVLine>
 8004002:	e000      	b.n	8004006 <u8g2_DrawRFrame+0x164>
    return;
 8004004:	bf00      	nop
    }
  }
}
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	7c1b      	ldrb	r3, [r3, #16]
 800401a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	fb02 f303 	mul.w	r3, r2, r3
 800402a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f002 fcbd 	bl	80069ba <memset>
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af02      	add	r7, sp, #8
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
 8004054:	4613      	mov	r3, r2
 8004056:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	7c1b      	ldrb	r3, [r3, #16]
 800405e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004068:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	b29b      	uxth	r3, r3
 800406e:	89ba      	ldrh	r2, [r7, #12]
 8004070:	fb12 f303 	smulbb	r3, r2, r3
 8004074:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8004076:	89bb      	ldrh	r3, [r7, #12]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800407c:	89bb      	ldrh	r3, [r7, #12]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	4413      	add	r3, r2
 8004082:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8004084:	7bf9      	ldrb	r1, [r7, #15]
 8004086:	78ba      	ldrb	r2, [r7, #2]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	460b      	mov	r3, r1
 800408e:	2100      	movs	r1, #0
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f002 f9dc 	bl	800644e <u8x8_DrawTile>
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	7c5b      	ldrb	r3, [r3, #17]
 80040c0:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80040c2:	7bba      	ldrb	r2, [r7, #14]
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ffbd 	bl	8004048 <u8g2_send_tile_row>
    src_row++;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	3301      	adds	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80040d4:	7bbb      	ldrb	r3, [r7, #14]
 80040d6:	3301      	adds	r3, #1
 80040d8:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	7b7b      	ldrb	r3, [r7, #13]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d203      	bcs.n	80040ea <u8g2_send_buffer+0x4c>
 80040e2:	7bba      	ldrb	r2, [r7, #14]
 80040e4:	7b3b      	ldrb	r3, [r7, #12]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d3eb      	bcc.n	80040c2 <u8g2_send_buffer+0x24>
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff ffcf 	bl	800409e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f002 f9f5 	bl	80064f0 <u8x8_RefreshDisplay>
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	4608      	mov	r0, r1
 8004118:	4611      	mov	r1, r2
 800411a:	461a      	mov	r2, r3
 800411c:	4603      	mov	r3, r0
 800411e:	70fb      	strb	r3, [r7, #3]
 8004120:	460b      	mov	r3, r1
 8004122:	70bb      	strb	r3, [r7, #2]
 8004124:	4613      	mov	r3, r2
 8004126:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8004128:	7d3b      	ldrb	r3, [r7, #20]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d017      	beq.n	8004162 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8004132:	787a      	ldrb	r2, [r7, #1]
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	4413      	add	r3, r2
 8004138:	b2d9      	uxtb	r1, r3
 800413a:	7c3a      	ldrb	r2, [r7, #16]
 800413c:	78bb      	ldrb	r3, [r7, #2]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f001 f9c5 	bl	80054d4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 800414a:	787a      	ldrb	r2, [r7, #1]
 800414c:	78bb      	ldrb	r3, [r7, #2]
 800414e:	4413      	add	r3, r2
 8004150:	b2d9      	uxtb	r1, r3
 8004152:	7c3a      	ldrb	r2, [r7, #16]
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f001 f9b9 	bl	80054d4 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8004162:	7d3b      	ldrb	r3, [r7, #20]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d017      	beq.n	800419c <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 800416c:	787a      	ldrb	r2, [r7, #1]
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	b2d9      	uxtb	r1, r3
 8004174:	7c3a      	ldrb	r2, [r7, #16]
 8004176:	78bb      	ldrb	r3, [r7, #2]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f001 f9a8 	bl	80054d4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8004184:	787a      	ldrb	r2, [r7, #1]
 8004186:	78bb      	ldrb	r3, [r7, #2]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	b2d9      	uxtb	r1, r3
 800418c:	7c3a      	ldrb	r2, [r7, #16]
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f001 f99c 	bl	80054d4 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 800419c:	7d3b      	ldrb	r3, [r7, #20]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d017      	beq.n	80041d6 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80041a6:	787a      	ldrb	r2, [r7, #1]
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	4413      	add	r3, r2
 80041ac:	b2d9      	uxtb	r1, r3
 80041ae:	7c3a      	ldrb	r2, [r7, #16]
 80041b0:	78bb      	ldrb	r3, [r7, #2]
 80041b2:	4413      	add	r3, r2
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f001 f98b 	bl	80054d4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80041be:	787a      	ldrb	r2, [r7, #1]
 80041c0:	78bb      	ldrb	r3, [r7, #2]
 80041c2:	4413      	add	r3, r2
 80041c4:	b2d9      	uxtb	r1, r3
 80041c6:	7c3a      	ldrb	r2, [r7, #16]
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	4413      	add	r3, r2
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f001 f97f 	bl	80054d4 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80041d6:	7d3b      	ldrb	r3, [r7, #20]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d017      	beq.n	8004210 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 80041e0:	787a      	ldrb	r2, [r7, #1]
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	b2d9      	uxtb	r1, r3
 80041e8:	7c3a      	ldrb	r2, [r7, #16]
 80041ea:	78bb      	ldrb	r3, [r7, #2]
 80041ec:	4413      	add	r3, r2
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f001 f96e 	bl	80054d4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 80041f8:	787a      	ldrb	r2, [r7, #1]
 80041fa:	78bb      	ldrb	r3, [r7, #2]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	b2d9      	uxtb	r1, r3
 8004200:	7c3a      	ldrb	r2, [r7, #16]
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	4413      	add	r3, r2
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f001 f962 	bl	80054d4 <u8g2_DrawPixel>
    }
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af02      	add	r7, sp, #8
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	4608      	mov	r0, r1
 8004222:	4611      	mov	r1, r2
 8004224:	461a      	mov	r2, r3
 8004226:	4603      	mov	r3, r0
 8004228:	70fb      	strb	r3, [r7, #3]
 800422a:	460b      	mov	r3, r1
 800422c:	70bb      	strb	r3, [r7, #2]
 800422e:	4613      	mov	r3, r2
 8004230:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	787b      	ldrb	r3, [r7, #1]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 8004240:	2301      	movs	r3, #1
 8004242:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8004248:	7b7a      	ldrb	r2, [r7, #13]
 800424a:	787b      	ldrb	r3, [r7, #1]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8004252:	7b7b      	ldrb	r3, [r7, #13]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	737b      	strb	r3, [r7, #13]
    x = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	733b      	strb	r3, [r7, #12]
    y = rad;
 800425e:	787b      	ldrb	r3, [r7, #1]
 8004260:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8004262:	78f8      	ldrb	r0, [r7, #3]
 8004264:	7afa      	ldrb	r2, [r7, #11]
 8004266:	7b39      	ldrb	r1, [r7, #12]
 8004268:	7e3b      	ldrb	r3, [r7, #24]
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	78bb      	ldrb	r3, [r7, #2]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4603      	mov	r3, r0
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff ff4b 	bl	800410e <u8g2_draw_circle_section>
    
    while ( x < y )
 8004278:	e026      	b.n	80042c8 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 800427a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	db0b      	blt.n	800429a <u8g2_draw_circle+0x82>
      {
        y--;
 8004282:	7afb      	ldrb	r3, [r7, #11]
 8004284:	3b01      	subs	r3, #1
 8004286:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 8004288:	7b7b      	ldrb	r3, [r7, #13]
 800428a:	3302      	adds	r3, #2
 800428c:	b2db      	uxtb	r3, r3
 800428e:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	7b7b      	ldrb	r3, [r7, #13]
 8004294:	4413      	add	r3, r2
 8004296:	b2db      	uxtb	r3, r3
 8004298:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 800429a:	7b3b      	ldrb	r3, [r7, #12]
 800429c:	3301      	adds	r3, #1
 800429e:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 80042a0:	7bbb      	ldrb	r3, [r7, #14]
 80042a2:	3302      	adds	r3, #2
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	7bbb      	ldrb	r3, [r7, #14]
 80042ac:	4413      	add	r3, r2
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 80042b2:	78f8      	ldrb	r0, [r7, #3]
 80042b4:	7afa      	ldrb	r2, [r7, #11]
 80042b6:	7b39      	ldrb	r1, [r7, #12]
 80042b8:	7e3b      	ldrb	r3, [r7, #24]
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	78bb      	ldrb	r3, [r7, #2]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	4603      	mov	r3, r0
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ff23 	bl	800410e <u8g2_draw_circle_section>
    while ( x < y )
 80042c8:	7b3a      	ldrb	r2, [r7, #12]
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d3d4      	bcc.n	800427a <u8g2_draw_circle+0x62>
    }
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80042da:	b590      	push	{r4, r7, lr}
 80042dc:	b085      	sub	sp, #20
 80042de:	af02      	add	r7, sp, #8
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	4608      	mov	r0, r1
 80042e4:	4611      	mov	r1, r2
 80042e6:	461a      	mov	r2, r3
 80042e8:	4603      	mov	r3, r0
 80042ea:	70fb      	strb	r3, [r7, #3]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70bb      	strb	r3, [r7, #2]
 80042f0:	4613      	mov	r3, r2
 80042f2:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	787b      	ldrb	r3, [r7, #1]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	b2d9      	uxtb	r1, r3
 80042fc:	78ba      	ldrb	r2, [r7, #2]
 80042fe:	787b      	ldrb	r3, [r7, #1]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	b2d8      	uxtb	r0, r3
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	787b      	ldrb	r3, [r7, #1]
 8004308:	4413      	add	r3, r2
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3301      	adds	r3, #1
 800430e:	b2dc      	uxtb	r4, r3
 8004310:	78ba      	ldrb	r2, [r7, #2]
 8004312:	787b      	ldrb	r3, [r7, #1]
 8004314:	4413      	add	r3, r2
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	b2db      	uxtb	r3, r3
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	4623      	mov	r3, r4
 8004320:	4602      	mov	r2, r0
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f001 f953 	bl	80055ce <u8g2_IsIntersection>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 800432e:	7878      	ldrb	r0, [r7, #1]
 8004330:	78ba      	ldrb	r2, [r7, #2]
 8004332:	78f9      	ldrb	r1, [r7, #3]
 8004334:	7e3b      	ldrb	r3, [r7, #24]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4603      	mov	r3, r0
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff ff6c 	bl	8004218 <u8g2_draw_circle>
 8004340:	e000      	b.n	8004344 <u8g2_DrawCircle+0x6a>
      return;
 8004342:	bf00      	nop
}
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bd90      	pop	{r4, r7, pc}

0800434a <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	4608      	mov	r0, r1
 8004354:	4611      	mov	r1, r2
 8004356:	461a      	mov	r2, r3
 8004358:	4603      	mov	r3, r0
 800435a:	70fb      	strb	r3, [r7, #3]
 800435c:	460b      	mov	r3, r1
 800435e:	70bb      	strb	r3, [r7, #2]
 8004360:	4613      	mov	r3, r2
 8004362:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8004364:	7d3b      	ldrb	r3, [r7, #20]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01b      	beq.n	80043a6 <u8g2_draw_disc_section+0x5c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 800436e:	787a      	ldrb	r2, [r7, #1]
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	4413      	add	r3, r2
 8004374:	b2d9      	uxtb	r1, r3
 8004376:	7c3a      	ldrb	r2, [r7, #16]
 8004378:	78bb      	ldrb	r3, [r7, #2]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	b2da      	uxtb	r2, r3
 800437e:	78bb      	ldrb	r3, [r7, #2]
 8004380:	3301      	adds	r3, #1
 8004382:	b2db      	uxtb	r3, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f001 f88c 	bl	80054a2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 800438a:	787a      	ldrb	r2, [r7, #1]
 800438c:	78bb      	ldrb	r3, [r7, #2]
 800438e:	4413      	add	r3, r2
 8004390:	b2d9      	uxtb	r1, r3
 8004392:	7c3a      	ldrb	r2, [r7, #16]
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	b2da      	uxtb	r2, r3
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	3301      	adds	r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f001 f87e 	bl	80054a2 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 80043a6:	7d3b      	ldrb	r3, [r7, #20]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01b      	beq.n	80043e8 <u8g2_draw_disc_section+0x9e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 80043b0:	787a      	ldrb	r2, [r7, #1]
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	b2d9      	uxtb	r1, r3
 80043b8:	7c3a      	ldrb	r2, [r7, #16]
 80043ba:	78bb      	ldrb	r3, [r7, #2]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	78bb      	ldrb	r3, [r7, #2]
 80043c2:	3301      	adds	r3, #1
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 f86b 	bl	80054a2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 80043cc:	787a      	ldrb	r2, [r7, #1]
 80043ce:	78bb      	ldrb	r3, [r7, #2]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	b2d9      	uxtb	r1, r3
 80043d4:	7c3a      	ldrb	r2, [r7, #16]
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	3301      	adds	r3, #1
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f001 f85d 	bl	80054a2 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80043e8:	7d3b      	ldrb	r3, [r7, #20]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d015      	beq.n	800441e <u8g2_draw_disc_section+0xd4>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 80043f2:	787a      	ldrb	r2, [r7, #1]
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	4413      	add	r3, r2
 80043f8:	b2d9      	uxtb	r1, r3
 80043fa:	78bb      	ldrb	r3, [r7, #2]
 80043fc:	3301      	adds	r3, #1
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	7c3a      	ldrb	r2, [r7, #16]
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f001 f84d 	bl	80054a2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 8004408:	787a      	ldrb	r2, [r7, #1]
 800440a:	78bb      	ldrb	r3, [r7, #2]
 800440c:	4413      	add	r3, r2
 800440e:	b2d9      	uxtb	r1, r3
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	3301      	adds	r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	7c3a      	ldrb	r2, [r7, #16]
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 f842 	bl	80054a2 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 800441e:	7d3b      	ldrb	r3, [r7, #20]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d015      	beq.n	8004454 <u8g2_draw_disc_section+0x10a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 8004428:	787a      	ldrb	r2, [r7, #1]
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	b2d9      	uxtb	r1, r3
 8004430:	78bb      	ldrb	r3, [r7, #2]
 8004432:	3301      	adds	r3, #1
 8004434:	b2db      	uxtb	r3, r3
 8004436:	7c3a      	ldrb	r2, [r7, #16]
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f001 f832 	bl	80054a2 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 800443e:	787a      	ldrb	r2, [r7, #1]
 8004440:	78bb      	ldrb	r3, [r7, #2]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	b2d9      	uxtb	r1, r3
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	3301      	adds	r3, #1
 800444a:	b2db      	uxtb	r3, r3
 800444c:	7c3a      	ldrb	r2, [r7, #16]
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f001 f827 	bl	80054a2 <u8g2_DrawVLine>
    }
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af02      	add	r7, sp, #8
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	4608      	mov	r0, r1
 8004466:	4611      	mov	r1, r2
 8004468:	461a      	mov	r2, r3
 800446a:	4603      	mov	r3, r0
 800446c:	70fb      	strb	r3, [r7, #3]
 800446e:	460b      	mov	r3, r1
 8004470:	70bb      	strb	r3, [r7, #2]
 8004472:	4613      	mov	r3, r2
 8004474:	707b      	strb	r3, [r7, #1]
  u8g2_int_t ddF_x;
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
  f -= rad;
 800447a:	7bfa      	ldrb	r2, [r7, #15]
 800447c:	787b      	ldrb	r3, [r7, #1]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	b2db      	uxtb	r3, r3
 8004482:	73fb      	strb	r3, [r7, #15]
  ddF_x = 1;
 8004484:	2301      	movs	r3, #1
 8004486:	73bb      	strb	r3, [r7, #14]
  ddF_y = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	737b      	strb	r3, [r7, #13]
  ddF_y -= rad;
 800448c:	7b7a      	ldrb	r2, [r7, #13]
 800448e:	787b      	ldrb	r3, [r7, #1]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	b2db      	uxtb	r3, r3
 8004494:	737b      	strb	r3, [r7, #13]
  ddF_y *= 2;
 8004496:	7b7b      	ldrb	r3, [r7, #13]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	b2db      	uxtb	r3, r3
 800449c:	737b      	strb	r3, [r7, #13]
  x = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	733b      	strb	r3, [r7, #12]
  y = rad;
 80044a2:	787b      	ldrb	r3, [r7, #1]
 80044a4:	72fb      	strb	r3, [r7, #11]

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 80044a6:	78f8      	ldrb	r0, [r7, #3]
 80044a8:	7afa      	ldrb	r2, [r7, #11]
 80044aa:	7b39      	ldrb	r1, [r7, #12]
 80044ac:	7e3b      	ldrb	r3, [r7, #24]
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	78bb      	ldrb	r3, [r7, #2]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	4603      	mov	r3, r0
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ff47 	bl	800434a <u8g2_draw_disc_section>
  
  while ( x < y )
 80044bc:	e026      	b.n	800450c <u8g2_draw_disc+0xb0>
  {
    if (f >= 0) 
 80044be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	db0b      	blt.n	80044de <u8g2_draw_disc+0x82>
    {
      y--;
 80044c6:	7afb      	ldrb	r3, [r7, #11]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	72fb      	strb	r3, [r7, #11]
      ddF_y += 2;
 80044cc:	7b7b      	ldrb	r3, [r7, #13]
 80044ce:	3302      	adds	r3, #2
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	737b      	strb	r3, [r7, #13]
      f += ddF_y;
 80044d4:	7bfa      	ldrb	r2, [r7, #15]
 80044d6:	7b7b      	ldrb	r3, [r7, #13]
 80044d8:	4413      	add	r3, r2
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	73fb      	strb	r3, [r7, #15]
    }
    x++;
 80044de:	7b3b      	ldrb	r3, [r7, #12]
 80044e0:	3301      	adds	r3, #1
 80044e2:	733b      	strb	r3, [r7, #12]
    ddF_x += 2;
 80044e4:	7bbb      	ldrb	r3, [r7, #14]
 80044e6:	3302      	adds	r3, #2
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	73bb      	strb	r3, [r7, #14]
    f += ddF_x;
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	7bbb      	ldrb	r3, [r7, #14]
 80044f0:	4413      	add	r3, r2
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	73fb      	strb	r3, [r7, #15]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 80044f6:	78f8      	ldrb	r0, [r7, #3]
 80044f8:	7afa      	ldrb	r2, [r7, #11]
 80044fa:	7b39      	ldrb	r1, [r7, #12]
 80044fc:	7e3b      	ldrb	r3, [r7, #24]
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	78bb      	ldrb	r3, [r7, #2]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	4603      	mov	r3, r0
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff ff1f 	bl	800434a <u8g2_draw_disc_section>
  while ( x < y )
 800450c:	7b3a      	ldrb	r2, [r7, #12]
 800450e:	7afb      	ldrb	r3, [r7, #11]
 8004510:	429a      	cmp	r2, r3
 8004512:	d3d4      	bcc.n	80044be <u8g2_draw_disc+0x62>
  }
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800451e:	b590      	push	{r4, r7, lr}
 8004520:	b085      	sub	sp, #20
 8004522:	af02      	add	r7, sp, #8
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	4608      	mov	r0, r1
 8004528:	4611      	mov	r1, r2
 800452a:	461a      	mov	r2, r3
 800452c:	4603      	mov	r3, r0
 800452e:	70fb      	strb	r3, [r7, #3]
 8004530:	460b      	mov	r3, r1
 8004532:	70bb      	strb	r3, [r7, #2]
 8004534:	4613      	mov	r3, r2
 8004536:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	787b      	ldrb	r3, [r7, #1]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	b2d9      	uxtb	r1, r3
 8004540:	78ba      	ldrb	r2, [r7, #2]
 8004542:	787b      	ldrb	r3, [r7, #1]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	b2d8      	uxtb	r0, r3
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	787b      	ldrb	r3, [r7, #1]
 800454c:	4413      	add	r3, r2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3301      	adds	r3, #1
 8004552:	b2dc      	uxtb	r4, r3
 8004554:	78ba      	ldrb	r2, [r7, #2]
 8004556:	787b      	ldrb	r3, [r7, #1]
 8004558:	4413      	add	r3, r2
 800455a:	b2db      	uxtb	r3, r3
 800455c:	3301      	adds	r3, #1
 800455e:	b2db      	uxtb	r3, r3
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	4623      	mov	r3, r4
 8004564:	4602      	mov	r2, r0
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f001 f831 	bl	80055ce <u8g2_IsIntersection>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <u8g2_DrawDisc+0x68>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
 8004572:	7878      	ldrb	r0, [r7, #1]
 8004574:	78ba      	ldrb	r2, [r7, #2]
 8004576:	78f9      	ldrb	r1, [r7, #3]
 8004578:	7e3b      	ldrb	r3, [r7, #24]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	4603      	mov	r3, r0
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ff6c 	bl	800445c <u8g2_draw_disc>
 8004584:	e000      	b.n	8004588 <u8g2_DrawDisc+0x6a>
      return;
 8004586:	bf00      	nop
}
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	bd90      	pop	{r4, r7, pc}
	...

08004590 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2208      	movs	r2, #8
 800459c:	701a      	strb	r2, [r3, #0]
  return buf;
 800459e:	4b03      	ldr	r3, [pc, #12]	@ (80045ac <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	20000750 	.word	0x20000750

080045b0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a0b      	ldr	r2, [pc, #44]	@ (80045f4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 80045c6:	490c      	ldr	r1, [pc, #48]	@ (80045f8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f001 fff5 	bl	80065b8 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80045ce:	f107 0313 	add.w	r3, r7, #19
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ffdc 	bl	8004590 <u8g2_m_16_8_f>
 80045d8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80045da:	7cfa      	ldrb	r2, [r7, #19]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 80045e2:	6979      	ldr	r1, [r7, #20]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f001 f901 	bl	80057ec <u8g2_SetupBuffer>
}
 80045ea:	bf00      	nop
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	080060ed 	.word	0x080060ed
 80045f8:	08006349 	.word	0x08006349
 80045fc:	08005625 	.word	0x08005625

08004600 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	781b      	ldrb	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	81fb      	strh	r3, [r7, #14]
    font++;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3301      	adds	r3, #1
 8004642:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8004644:	89fb      	ldrh	r3, [r7, #14]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	89fb      	ldrh	r3, [r7, #14]
 8004652:	4413      	add	r3, r2
 8004654:	81fb      	strh	r3, [r7, #14]
    return pos;
 8004656:	89fb      	ldrh	r3, [r7, #14]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800466e:	2100      	movs	r1, #0
 8004670:	6838      	ldr	r0, [r7, #0]
 8004672:	f7ff ffc5 	bl	8004600 <u8g2_font_get_byte>
 8004676:	4603      	mov	r3, r0
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800467e:	2101      	movs	r1, #1
 8004680:	6838      	ldr	r0, [r7, #0]
 8004682:	f7ff ffbd 	bl	8004600 <u8g2_font_get_byte>
 8004686:	4603      	mov	r3, r0
 8004688:	461a      	mov	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800468e:	2102      	movs	r1, #2
 8004690:	6838      	ldr	r0, [r7, #0]
 8004692:	f7ff ffb5 	bl	8004600 <u8g2_font_get_byte>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800469e:	2103      	movs	r1, #3
 80046a0:	6838      	ldr	r0, [r7, #0]
 80046a2:	f7ff ffad 	bl	8004600 <u8g2_font_get_byte>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80046ae:	2104      	movs	r1, #4
 80046b0:	6838      	ldr	r0, [r7, #0]
 80046b2:	f7ff ffa5 	bl	8004600 <u8g2_font_get_byte>
 80046b6:	4603      	mov	r3, r0
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80046be:	2105      	movs	r1, #5
 80046c0:	6838      	ldr	r0, [r7, #0]
 80046c2:	f7ff ff9d 	bl	8004600 <u8g2_font_get_byte>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80046ce:	2106      	movs	r1, #6
 80046d0:	6838      	ldr	r0, [r7, #0]
 80046d2:	f7ff ff95 	bl	8004600 <u8g2_font_get_byte>
 80046d6:	4603      	mov	r3, r0
 80046d8:	461a      	mov	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80046de:	2107      	movs	r1, #7
 80046e0:	6838      	ldr	r0, [r7, #0]
 80046e2:	f7ff ff8d 	bl	8004600 <u8g2_font_get_byte>
 80046e6:	4603      	mov	r3, r0
 80046e8:	461a      	mov	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80046ee:	2108      	movs	r1, #8
 80046f0:	6838      	ldr	r0, [r7, #0]
 80046f2:	f7ff ff85 	bl	8004600 <u8g2_font_get_byte>
 80046f6:	4603      	mov	r3, r0
 80046f8:	461a      	mov	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80046fe:	2109      	movs	r1, #9
 8004700:	6838      	ldr	r0, [r7, #0]
 8004702:	f7ff ff7d 	bl	8004600 <u8g2_font_get_byte>
 8004706:	4603      	mov	r3, r0
 8004708:	b25a      	sxtb	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800470e:	210a      	movs	r1, #10
 8004710:	6838      	ldr	r0, [r7, #0]
 8004712:	f7ff ff75 	bl	8004600 <u8g2_font_get_byte>
 8004716:	4603      	mov	r3, r0
 8004718:	b25a      	sxtb	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800471e:	210b      	movs	r1, #11
 8004720:	6838      	ldr	r0, [r7, #0]
 8004722:	f7ff ff6d 	bl	8004600 <u8g2_font_get_byte>
 8004726:	4603      	mov	r3, r0
 8004728:	b25a      	sxtb	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800472e:	210c      	movs	r1, #12
 8004730:	6838      	ldr	r0, [r7, #0]
 8004732:	f7ff ff65 	bl	8004600 <u8g2_font_get_byte>
 8004736:	4603      	mov	r3, r0
 8004738:	b25a      	sxtb	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800473e:	210d      	movs	r1, #13
 8004740:	6838      	ldr	r0, [r7, #0]
 8004742:	f7ff ff5d 	bl	8004600 <u8g2_font_get_byte>
 8004746:	4603      	mov	r3, r0
 8004748:	b25a      	sxtb	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800474e:	210e      	movs	r1, #14
 8004750:	6838      	ldr	r0, [r7, #0]
 8004752:	f7ff ff55 	bl	8004600 <u8g2_font_get_byte>
 8004756:	4603      	mov	r3, r0
 8004758:	b25a      	sxtb	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800475e:	210f      	movs	r1, #15
 8004760:	6838      	ldr	r0, [r7, #0]
 8004762:	f7ff ff4d 	bl	8004600 <u8g2_font_get_byte>
 8004766:	4603      	mov	r3, r0
 8004768:	b25a      	sxtb	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800476e:	2110      	movs	r1, #16
 8004770:	6838      	ldr	r0, [r7, #0]
 8004772:	f7ff ff45 	bl	8004600 <u8g2_font_get_byte>
 8004776:	4603      	mov	r3, r0
 8004778:	b25a      	sxtb	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800477e:	2111      	movs	r1, #17
 8004780:	6838      	ldr	r0, [r7, #0]
 8004782:	f7ff ff4f 	bl	8004624 <u8g2_font_get_word>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800478e:	2113      	movs	r1, #19
 8004790:	6838      	ldr	r0, [r7, #0]
 8004792:	f7ff ff47 	bl	8004624 <u8g2_font_get_word>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800479e:	2115      	movs	r1, #21
 80047a0:	6838      	ldr	r0, [r7, #0]
 80047a2:	f7ff ff3f 	bl	8004624 <u8g2_font_get_word>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	82da      	strh	r2, [r3, #22]
#endif
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80047b6:	b480      	push	{r7}
 80047b8:	b085      	sub	sp, #20
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7a9b      	ldrb	r3, [r3, #10]
 80047c6:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	7b7b      	ldrb	r3, [r7, #13]
 80047d4:	fa42 f303 	asr.w	r3, r2, r3
 80047d8:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80047da:	7b7b      	ldrb	r3, [r7, #13]
 80047dc:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80047de:	7bba      	ldrb	r2, [r7, #14]
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	4413      	add	r3, r2
 80047e4:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80047e6:	7bbb      	ldrb	r3, [r7, #14]
 80047e8:	2b07      	cmp	r3, #7
 80047ea:	d91a      	bls.n	8004822 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80047ec:	2308      	movs	r3, #8
 80047ee:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80047f0:	7b3a      	ldrb	r2, [r7, #12]
 80047f2:	7b7b      	ldrb	r3, [r7, #13]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	7b3b      	ldrb	r3, [r7, #12]
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	b25a      	sxtb	r2, r3
 8004812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004816:	4313      	orrs	r3, r2
 8004818:	b25b      	sxtb	r3, r3
 800481a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800481c:	7bbb      	ldrb	r3, [r7, #14]
 800481e:	3b08      	subs	r3, #8
 8004820:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	f04f 32ff 	mov.w	r2, #4294967295
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	b2da      	uxtb	r2, r3
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	4013      	ands	r3, r2
 8004836:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7bba      	ldrb	r2, [r7, #14]
 800483c:	729a      	strb	r2, [r3, #10]
  return val;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	4619      	mov	r1, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ffaa 	bl	80047b6 <u8g2_font_decode_get_unsigned_bits>
 8004862:	4603      	mov	r3, r0
 8004864:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8004866:	2301      	movs	r3, #1
 8004868:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	3b01      	subs	r3, #1
 800486e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8004870:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800487c:	7bfa      	ldrb	r2, [r7, #15]
 800487e:	7bbb      	ldrb	r3, [r7, #14]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	73fb      	strb	r3, [r7, #15]
  return v;
 8004886:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8004892:	b490      	push	{r4, r7}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	4604      	mov	r4, r0
 800489a:	4608      	mov	r0, r1
 800489c:	4611      	mov	r1, r2
 800489e:	461a      	mov	r2, r3
 80048a0:	4623      	mov	r3, r4
 80048a2:	71fb      	strb	r3, [r7, #7]
 80048a4:	4603      	mov	r3, r0
 80048a6:	71bb      	strb	r3, [r7, #6]
 80048a8:	460b      	mov	r3, r1
 80048aa:	717b      	strb	r3, [r7, #5]
 80048ac:	4613      	mov	r3, r2
 80048ae:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80048b0:	793b      	ldrb	r3, [r7, #4]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d010      	beq.n	80048d8 <u8g2_add_vector_y+0x46>
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	dc13      	bgt.n	80048e2 <u8g2_add_vector_y+0x50>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <u8g2_add_vector_y+0x32>
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d005      	beq.n	80048ce <u8g2_add_vector_y+0x3c>
 80048c2:	e00e      	b.n	80048e2 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 80048c4:	797a      	ldrb	r2, [r7, #5]
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	4413      	add	r3, r2
 80048ca:	71fb      	strb	r3, [r7, #7]
      break;
 80048cc:	e00e      	b.n	80048ec <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80048ce:	79ba      	ldrb	r2, [r7, #6]
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	4413      	add	r3, r2
 80048d4:	71fb      	strb	r3, [r7, #7]
      break;
 80048d6:	e009      	b.n	80048ec <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 80048d8:	797b      	ldrb	r3, [r7, #5]
 80048da:	79fa      	ldrb	r2, [r7, #7]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	71fb      	strb	r3, [r7, #7]
      break;
 80048e0:	e004      	b.n	80048ec <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 80048e2:	79bb      	ldrb	r3, [r7, #6]
 80048e4:	79fa      	ldrb	r2, [r7, #7]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	71fb      	strb	r3, [r7, #7]
      break;      
 80048ea:	bf00      	nop
  }
  return dy;
 80048ec:	79fb      	ldrb	r3, [r7, #7]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc90      	pop	{r4, r7}
 80048f6:	4770      	bx	lr

080048f8 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80048f8:	b490      	push	{r4, r7}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	4623      	mov	r3, r4
 8004908:	71fb      	strb	r3, [r7, #7]
 800490a:	4603      	mov	r3, r0
 800490c:	71bb      	strb	r3, [r7, #6]
 800490e:	460b      	mov	r3, r1
 8004910:	717b      	strb	r3, [r7, #5]
 8004912:	4613      	mov	r3, r2
 8004914:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8004916:	793b      	ldrb	r3, [r7, #4]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d010      	beq.n	800493e <u8g2_add_vector_x+0x46>
 800491c:	2b02      	cmp	r3, #2
 800491e:	dc13      	bgt.n	8004948 <u8g2_add_vector_x+0x50>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <u8g2_add_vector_x+0x32>
 8004924:	2b01      	cmp	r3, #1
 8004926:	d005      	beq.n	8004934 <u8g2_add_vector_x+0x3c>
 8004928:	e00e      	b.n	8004948 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 800492a:	79ba      	ldrb	r2, [r7, #6]
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	4413      	add	r3, r2
 8004930:	71fb      	strb	r3, [r7, #7]
      break;
 8004932:	e00e      	b.n	8004952 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8004934:	797b      	ldrb	r3, [r7, #5]
 8004936:	79fa      	ldrb	r2, [r7, #7]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	71fb      	strb	r3, [r7, #7]
      break;
 800493c:	e009      	b.n	8004952 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 800493e:	79bb      	ldrb	r3, [r7, #6]
 8004940:	79fa      	ldrb	r2, [r7, #7]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	71fb      	strb	r3, [r7, #7]
      break;
 8004946:	e004      	b.n	8004952 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8004948:	797a      	ldrb	r2, [r7, #5]
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	4413      	add	r3, r2
 800494e:	71fb      	strb	r3, [r7, #7]
      break;      
 8004950:	bf00      	nop
  }
  return dx;
 8004952:	79fb      	ldrb	r3, [r7, #7]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bc90      	pop	{r4, r7}
 800495c:	4770      	bx	lr

0800495e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b088      	sub	sp, #32
 8004962:	af02      	add	r7, sp, #8
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	70fb      	strb	r3, [r7, #3]
 800496a:	4613      	mov	r3, r2
 800496c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3358      	adds	r3, #88	@ 0x58
 8004972:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800497e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004986:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800498e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8004990:	7bfa      	ldrb	r2, [r7, #15]
 8004992:	7d7b      	ldrb	r3, [r7, #21]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800499c:	7dfa      	ldrb	r2, [r7, #23]
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d201      	bcs.n	80049a8 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	791b      	ldrb	r3, [r3, #4]
 80049ac:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	795b      	ldrb	r3, [r3, #5]
 80049b2:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80049b4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80049b8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	7b9b      	ldrb	r3, [r3, #14]
 80049c0:	7bb8      	ldrb	r0, [r7, #14]
 80049c2:	f7ff ff99 	bl	80048f8 <u8g2_add_vector_x>
 80049c6:	4603      	mov	r3, r0
 80049c8:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80049ca:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80049ce:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	7b9b      	ldrb	r3, [r3, #14]
 80049d6:	7b78      	ldrb	r0, [r7, #13]
 80049d8:	f7ff ff5b 	bl	8004892 <u8g2_add_vector_y>
 80049dc:	4603      	mov	r3, r0
 80049de:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80049e0:	78bb      	ldrb	r3, [r7, #2]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00f      	beq.n	8004a06 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	7b1a      	ldrb	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
      u8g2_DrawHVLine(u8g2, 
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	7b9b      	ldrb	r3, [r3, #14]
 80049f4:	7db8      	ldrb	r0, [r7, #22]
 80049f6:	7b7a      	ldrb	r2, [r7, #13]
 80049f8:	7bb9      	ldrb	r1, [r7, #14]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	4603      	mov	r3, r0
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fcb3 	bl	800536a <u8g2_DrawHVLine>
 8004a04:	e012      	b.n	8004a2c <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	7adb      	ldrb	r3, [r3, #11]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10e      	bne.n	8004a2c <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	7b5a      	ldrb	r2, [r3, #13]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
      u8g2_DrawHVLine(u8g2, 
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	7b9b      	ldrb	r3, [r3, #14]
 8004a1c:	7db8      	ldrb	r0, [r7, #22]
 8004a1e:	7b7a      	ldrb	r2, [r7, #13]
 8004a20:	7bb9      	ldrb	r1, [r7, #14]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4603      	mov	r3, r0
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fc9f 	bl	800536a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004a2c:	7dfa      	ldrb	r2, [r7, #23]
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d309      	bcc.n	8004a48 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8004a34:	7dfa      	ldrb	r2, [r7, #23]
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	757b      	strb	r3, [r7, #21]
    ly++;
 8004a40:	7d3b      	ldrb	r3, [r7, #20]
 8004a42:	3301      	adds	r3, #1
 8004a44:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004a46:	e79f      	b.n	8004988 <u8g2_font_decode_len+0x2a>
      break;
 8004a48:	bf00      	nop
  }
  lx += cnt;
 8004a4a:	7d7a      	ldrb	r2, [r7, #21]
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	4413      	add	r3, r2
 8004a50:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8004a52:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8004a5a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	71da      	strb	r2, [r3, #7]
  
}
 8004a62:	bf00      	nop
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3358      	adds	r3, #88	@ 0x58
 8004a78:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f7ff fe91 	bl	80047b6 <u8g2_font_decode_get_unsigned_bits>
 8004a94:	4603      	mov	r3, r0
 8004a96:	b25a      	sxtb	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fe86 	bl	80047b6 <u8g2_font_decode_get_unsigned_bits>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	b25a      	sxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 2086 	ldrb.w	r2, [r3, #134]	@ 0x86
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	7b1b      	ldrb	r3, [r3, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2301      	moveq	r3, #1
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	735a      	strb	r2, [r3, #13]
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3358      	adds	r3, #88	@ 0x58
 8004ae6:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8004ae8:	6839      	ldr	r1, [r7, #0]
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ffbd 	bl	8004a6a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004af6:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8004afe:	4619      	mov	r1, r3
 8004b00:	6938      	ldr	r0, [r7, #16]
 8004b02:	f7ff fea3 	bl	800484c <u8g2_font_decode_get_signed_bits>
 8004b06:	4603      	mov	r3, r0
 8004b08:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8004b10:	4619      	mov	r1, r3
 8004b12:	6938      	ldr	r0, [r7, #16]
 8004b14:	f7ff fe9a 	bl	800484c <u8g2_font_decode_get_signed_bits>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004b22:	4619      	mov	r1, r3
 8004b24:	6938      	ldr	r0, [r7, #16]
 8004b26:	f7ff fe91 	bl	800484c <u8g2_font_decode_get_signed_bits>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f340 80cf 	ble.w	8004cd8 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	7918      	ldrb	r0, [r3, #4]
 8004b3e:	7bfa      	ldrb	r2, [r7, #15]
 8004b40:	7b7b      	ldrb	r3, [r7, #13]
 8004b42:	4413      	add	r3, r2
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	425b      	negs	r3, r3
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	b25a      	sxtb	r2, r3
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	7b9b      	ldrb	r3, [r3, #14]
 8004b50:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004b54:	f7ff fed0 	bl	80048f8 <u8g2_add_vector_x>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	7958      	ldrb	r0, [r3, #5]
 8004b64:	7bfa      	ldrb	r2, [r7, #15]
 8004b66:	7b7b      	ldrb	r3, [r7, #13]
 8004b68:	4413      	add	r3, r2
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	425b      	negs	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	b25a      	sxtb	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	7b9b      	ldrb	r3, [r3, #14]
 8004b76:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004b7a:	f7ff fe8a 	bl	8004892 <u8g2_add_vector_y>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	461a      	mov	r2, r3
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	791b      	ldrb	r3, [r3, #4]
 8004b8a:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	795b      	ldrb	r3, [r3, #5]
 8004b90:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
 8004b94:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8004b96:	7d7b      	ldrb	r3, [r7, #21]
 8004b98:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	7b9b      	ldrb	r3, [r3, #14]
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d852      	bhi.n	8004c48 <u8g2_font_decode_glyph+0x170>
 8004ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <u8g2_font_decode_glyph+0xd0>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bf5 	.word	0x08004bf5
 8004bb4:	08004c25 	.word	0x08004c25
      {
	case 0:
	    x1 += decode->glyph_width;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	7dbb      	ldrb	r3, [r7, #22]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8004bc6:	7bfa      	ldrb	r2, [r7, #15]
 8004bc8:	7d3b      	ldrb	r3, [r7, #20]
 8004bca:	4413      	add	r3, r2
 8004bcc:	753b      	strb	r3, [r7, #20]
	    break;
 8004bce:	e03b      	b.n	8004c48 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	7dfa      	ldrb	r2, [r7, #23]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8004bde:	7dbb      	ldrb	r3, [r7, #22]
 8004be0:	3301      	adds	r3, #1
 8004be2:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	7d3b      	ldrb	r3, [r7, #20]
 8004bee:	4413      	add	r3, r2
 8004bf0:	753b      	strb	r3, [r7, #20]
	    break;
 8004bf2:	e029      	b.n	8004c48 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	7dfa      	ldrb	r2, [r7, #23]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	3301      	adds	r3, #1
 8004c06:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8004c08:	7dbb      	ldrb	r3, [r7, #22]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	7d7a      	ldrb	r2, [r7, #21]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004c16:	7d7b      	ldrb	r3, [r7, #21]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	757b      	strb	r3, [r7, #21]
	    y1++;
 8004c1c:	7d3b      	ldrb	r3, [r7, #20]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	753b      	strb	r3, [r7, #20]
	    break;	  
 8004c22:	e011      	b.n	8004c48 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8004c24:	7bfa      	ldrb	r2, [r7, #15]
 8004c26:	7dbb      	ldrb	r3, [r7, #22]
 8004c28:	4413      	add	r3, r2
 8004c2a:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	7d7a      	ldrb	r2, [r7, #21]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004c3a:	7d7b      	ldrb	r3, [r7, #21]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8004c40:	7d3b      	ldrb	r3, [r7, #20]
 8004c42:	3301      	adds	r3, #1
 8004c44:	753b      	strb	r3, [r7, #20]
	    break;	  
 8004c46:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004c48:	7db8      	ldrb	r0, [r7, #22]
 8004c4a:	7d7a      	ldrb	r2, [r7, #21]
 8004c4c:	7df9      	ldrb	r1, [r7, #23]
 8004c4e:	7d3b      	ldrb	r3, [r7, #20]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	4603      	mov	r3, r0
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fcba 	bl	80055ce <u8g2_IsIntersection>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <u8g2_font_decode_glyph+0x18e>
	return d;
 8004c60:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004c64:	e03a      	b.n	8004cdc <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6938      	ldr	r0, [r7, #16]
 8004c7c:	f7ff fd9b 	bl	80047b6 <u8g2_font_decode_get_unsigned_bits>
 8004c80:	4603      	mov	r3, r0
 8004c82:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6938      	ldr	r0, [r7, #16]
 8004c8e:	f7ff fd92 	bl	80047b6 <u8g2_font_decode_get_unsigned_bits>
 8004c92:	4603      	mov	r3, r0
 8004c94:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8004c96:	7afb      	ldrb	r3, [r7, #11]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff fe5e 	bl	800495e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8004ca2:	7abb      	ldrb	r3, [r7, #10]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff fe58 	bl	800495e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8004cae:	2101      	movs	r1, #1
 8004cb0:	6938      	ldr	r0, [r7, #16]
 8004cb2:	f7ff fd80 	bl	80047b6 <u8g2_font_decode_get_unsigned_bits>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ec      	bne.n	8004c96 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004cc2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	dd00      	ble.n	8004ccc <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004cca:	e7d2      	b.n	8004c72 <u8g2_font_decode_glyph+0x19a>
	break;
 8004ccc:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	7b1a      	ldrb	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
  }
  return d;
 8004cd8:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	3317      	adds	r3, #23
 8004cfa:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004cfc:	887b      	ldrh	r3, [r7, #2]
 8004cfe:	2bff      	cmp	r3, #255	@ 0xff
 8004d00:	d82a      	bhi.n	8004d58 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8004d02:	887b      	ldrh	r3, [r7, #2]
 8004d04:	2b60      	cmp	r3, #96	@ 0x60
 8004d06:	d907      	bls.n	8004d18 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8004d0e:	461a      	mov	r2, r3
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e009      	b.n	8004d2c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004d18:	887b      	ldrh	r3, [r7, #2]
 8004d1a:	2b40      	cmp	r3, #64	@ 0x40
 8004d1c:	d906      	bls.n	8004d2c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 8004d24:	461a      	mov	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	4413      	add	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d04e      	beq.n	8004dd4 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	887b      	ldrh	r3, [r7, #2]
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d102      	bne.n	8004d48 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	3302      	adds	r3, #2
 8004d46:	e049      	b.n	8004ddc <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4413      	add	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004d56:	e7e9      	b.n	8004d2c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8004d5e:	461a      	mov	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	6938      	ldr	r0, [r7, #16]
 8004d6e:	f7ff fc59 	bl	8004624 <u8g2_font_get_word>
 8004d72:	4603      	mov	r3, r0
 8004d74:	461a      	mov	r2, r3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	6938      	ldr	r0, [r7, #16]
 8004d80:	f7ff fc50 	bl	8004624 <u8g2_font_get_word>
 8004d84:	4603      	mov	r3, r0
 8004d86:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8004d8e:	89fa      	ldrh	r2, [r7, #14]
 8004d90:	887b      	ldrh	r3, [r7, #2]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d3e9      	bcc.n	8004d6a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8004d9c:	89fb      	ldrh	r3, [r7, #14]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	3301      	adds	r3, #1
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	89fb      	ldrh	r3, [r7, #14]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8004db0:	89fb      	ldrh	r3, [r7, #14]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d010      	beq.n	8004dd8 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8004db6:	89fa      	ldrh	r2, [r7, #14]
 8004db8:	887b      	ldrh	r3, [r7, #2]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d102      	bne.n	8004dc4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3303      	adds	r3, #3
 8004dc2:	e00b      	b.n	8004ddc <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3302      	adds	r3, #2
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8004dd2:	e7e0      	b.n	8004d96 <u8g2_font_get_glyph_data+0xb2>
	break;
 8004dd4:	bf00      	nop
 8004dd6:	e000      	b.n	8004dda <u8g2_font_get_glyph_data+0xf6>
	break;
 8004dd8:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	461a      	mov	r2, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	70fb      	strb	r3, [r7, #3]
 8004df6:	460b      	mov	r3, r1
 8004df8:	70bb      	strb	r3, [r7, #2]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  u8g2->font_decode.target_y = y;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	78ba      	ldrb	r2, [r7, #2]
 8004e0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004e12:	883b      	ldrh	r3, [r7, #0]
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ff64 	bl	8004ce4 <u8g2_font_get_glyph_data>
 8004e1c:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff fe56 	bl	8004ad8 <u8g2_font_decode_glyph>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8004e46:	887b      	ldrh	r3, [r7, #2]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff ff4a 	bl	8004ce4 <u8g2_font_get_glyph_data>
 8004e50:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e027      	b.n	8004eac <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fe03 	bl	8004a6a <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f7ff fcea 	bl	800484c <u8g2_font_decode_get_signed_bits>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7ff fcdb 	bl	800484c <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f7ff fcd1 	bl	800484c <u8g2_font_decode_get_signed_bits>
 8004eaa:	4603      	mov	r3, r0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	70fb      	strb	r3, [r7, #3]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	70bb      	strb	r3, [r7, #2]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d833      	bhi.n	8004f40 <u8g2_DrawGlyph+0x8c>
 8004ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <u8g2_DrawGlyph+0x2c>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004f05 	.word	0x08004f05
 8004ee8:	08004f19 	.word	0x08004f19
 8004eec:	08004f2d 	.word	0x08004f2d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	78bb      	ldrb	r3, [r7, #2]
 8004efe:	4413      	add	r3, r2
 8004f00:	70bb      	strb	r3, [r7, #2]
      break;
 8004f02:	e01d      	b.n	8004f40 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	461a      	mov	r2, r3
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	70fb      	strb	r3, [r7, #3]
      break;
 8004f16:	e013      	b.n	8004f40 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4798      	blx	r3
 8004f20:	4603      	mov	r3, r0
 8004f22:	461a      	mov	r2, r3
 8004f24:	78bb      	ldrb	r3, [r7, #2]
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	70bb      	strb	r3, [r7, #2]
      break;
 8004f2a:	e009      	b.n	8004f40 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
 8004f34:	4603      	mov	r3, r0
 8004f36:	461a      	mov	r2, r3
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	70fb      	strb	r3, [r7, #3]
      break;
 8004f3e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004f40:	883b      	ldrh	r3, [r7, #0]
 8004f42:	78ba      	ldrb	r2, [r7, #2]
 8004f44:	78f9      	ldrb	r1, [r7, #3]
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff ff4c 	bl	8004de4 <u8g2_font_draw_glyph>
 8004f4c:	4603      	mov	r3, r0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop

08004f58 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	607b      	str	r3, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	72fb      	strb	r3, [r7, #11]
 8004f66:	4613      	mov	r3, r2
 8004f68:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 fd92 	bl	8005a94 <u8x8_utf8_init>
  sum = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	7812      	ldrb	r2, [r2, #0]
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	4798      	blx	r3
 8004f82:	4603      	mov	r3, r0
 8004f84:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8004f86:	8abb      	ldrh	r3, [r7, #20]
 8004f88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d038      	beq.n	8005002 <u8g2_draw_string+0xaa>
      break;
    str++;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3301      	adds	r3, #1
 8004f94:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8004f96:	8abb      	ldrh	r3, [r7, #20]
 8004f98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d0e9      	beq.n	8004f74 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004fa0:	8abb      	ldrh	r3, [r7, #20]
 8004fa2:	7aba      	ldrb	r2, [r7, #10]
 8004fa4:	7af9      	ldrb	r1, [r7, #11]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7ff ff84 	bl	8004eb4 <u8g2_DrawGlyph>
 8004fac:	4603      	mov	r3, r0
 8004fae:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d81e      	bhi.n	8004ff8 <u8g2_draw_string+0xa0>
 8004fba:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc0 <u8g2_draw_string+0x68>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004fdb 	.word	0x08004fdb
 8004fc8:	08004fe5 	.word	0x08004fe5
 8004fcc:	08004fef 	.word	0x08004fef
      {
	case 0:
	  x += delta;
 8004fd0:	7afa      	ldrb	r2, [r7, #11]
 8004fd2:	7cfb      	ldrb	r3, [r7, #19]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	72fb      	strb	r3, [r7, #11]
	  break;
 8004fd8:	e00e      	b.n	8004ff8 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004fda:	7aba      	ldrb	r2, [r7, #10]
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	4413      	add	r3, r2
 8004fe0:	72bb      	strb	r3, [r7, #10]
	  break;
 8004fe2:	e009      	b.n	8004ff8 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004fe4:	7afa      	ldrb	r2, [r7, #11]
 8004fe6:	7cfb      	ldrb	r3, [r7, #19]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	72fb      	strb	r3, [r7, #11]
	  break;
 8004fec:	e004      	b.n	8004ff8 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004fee:	7aba      	ldrb	r2, [r7, #10]
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	72bb      	strb	r3, [r7, #10]
	  break;
 8004ff6:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8004ff8:	7dfa      	ldrb	r2, [r7, #23]
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005000:	e7b8      	b.n	8004f74 <u8g2_draw_string+0x1c>
      break;
 8005002:	bf00      	nop
    }
  }
  return sum;
 8005004:	7dfb      	ldrb	r3, [r7, #23]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop

08005010 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	607b      	str	r3, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	72fb      	strb	r3, [r7, #11]
 800501e:	4613      	mov	r3, r2
 8005020:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a06      	ldr	r2, [pc, #24]	@ (8005040 <u8g2_DrawUTF8+0x30>)
 8005026:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8005028:	7aba      	ldrb	r2, [r7, #10]
 800502a:	7af9      	ldrb	r1, [r7, #11]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff ff92 	bl	8004f58 <u8g2_draw_string>
 8005034:	4603      	mov	r3, r0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	08005adf 	.word	0x08005adf

08005044 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05d      	beq.n	8005110 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f993 2075 	ldrsb.w	r2, [r3, #117]	@ 0x75
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f993 2076 	ldrsb.w	r2, [r3, #118]	@ 0x76
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005072:	2b00      	cmp	r3, #0
 8005074:	d04d      	beq.n	8005112 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800507c:	2b01      	cmp	r3, #1
 800507e:	d11c      	bne.n	80050ba <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f993 3077 	ldrsb.w	r3, [r3, #119]	@ 0x77
 800508c:	429a      	cmp	r2, r3
 800508e:	da05      	bge.n	800509c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f993 2077 	ldrsb.w	r2, [r3, #119]	@ 0x77
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f993 3078 	ldrsb.w	r3, [r3, #120]	@ 0x78
 80050a8:	429a      	cmp	r2, r3
 80050aa:	dd32      	ble.n	8005112 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f993 2078 	ldrsb.w	r2, [r3, #120]	@ 0x78
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 80050b8:	e02b      	b.n	8005112 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f993 3072 	ldrsb.w	r3, [r3, #114]	@ 0x72
 80050c8:	4619      	mov	r1, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f993 3074 	ldrsb.w	r3, [r3, #116]	@ 0x74
 80050d0:	440b      	add	r3, r1
 80050d2:	429a      	cmp	r2, r3
 80050d4:	da0d      	bge.n	80050f2 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f993 3072 	ldrsb.w	r3, [r3, #114]	@ 0x72
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f993 3074 	ldrsb.w	r3, [r3, #116]	@ 0x74
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	4413      	add	r3, r2
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	b25a      	sxtb	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f993 3074 	ldrsb.w	r3, [r3, #116]	@ 0x74
 80050fe:	429a      	cmp	r2, r3
 8005100:	dd07      	ble.n	8005112 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f993 2074 	ldrsb.w	r2, [r3, #116]	@ 0x74
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 800510e:	e000      	b.n	8005112 <u8g2_UpdateRefHeight+0xce>
    return;
 8005110:	bf00      	nop
  }  
}
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  return 0;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a04      	ldr	r2, [pc, #16]	@ (8005150 <u8g2_SetFontPosBaseline+0x1c>)
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	0800511d 	.word	0x0800511d

08005154 <u8g2_font_calc_vref_bottom>:


u8g2_uint_t u8g2_font_calc_vref_bottom(u8g2_t *u8g2)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  return (u8g2_uint_t)(u8g2->font_ref_descent);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8005162:	b2db      	uxtb	r3, r3
}
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <u8g2_SetFontPosBottom>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a04      	ldr	r2, [pc, #16]	@ (800518c <u8g2_SetFontPosBottom+0x1c>)
 800517c:	655a      	str	r2, [r3, #84]	@ 0x54
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	08005155 	.word	0x08005155

08005190 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d00b      	beq.n	80051bc <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	651a      	str	r2, [r3, #80]	@ 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3368      	adds	r3, #104	@ 0x68
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fa57 	bl	8004664 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff ff44 	bl	8005044 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fc5c 	bl	8005a94 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	7812      	ldrb	r2, [r2, #0]
 80051ec:	4611      	mov	r1, r2
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 80051f6:	89bb      	ldrh	r3, [r7, #12]
 80051f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d013      	beq.n	8005228 <u8g2_string_width+0x64>
      break;
    str++;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8005206:	89bb      	ldrh	r3, [r7, #12]
 8005208:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800520c:	4293      	cmp	r3, r2
 800520e:	d0e9      	beq.n	80051e4 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8005210:	89bb      	ldrh	r3, [r7, #12]
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fe10 	bl	8004e3a <u8g2_GetGlyphWidth>
 800521a:	4603      	mov	r3, r0
 800521c:	73bb      	strb	r3, [r7, #14]
      w += dx;
 800521e:	7bfa      	ldrb	r2, [r7, #15]
 8005220:	7bbb      	ldrb	r3, [r7, #14]
 8005222:	4413      	add	r3, r2
 8005224:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005226:	e7dd      	b.n	80051e4 <u8g2_string_width+0x20>
      break;
 8005228:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f993 3060 	ldrsb.w	r3, [r3, #96]	@ 0x60
 8005230:	2b00      	cmp	r3, #0
 8005232:	d011      	beq.n	8005258 <u8g2_string_width+0x94>
  {
    w -= dx;
 8005234:	7bfa      	ldrb	r2, [r7, #15]
 8005236:	7bbb      	ldrb	r3, [r7, #14]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f993 3060 	ldrsb.w	r3, [r3, #96]	@ 0x60
 8005242:	b2da      	uxtb	r2, r3
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	4413      	add	r3, r2
 8005248:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8005250:	b2da      	uxtb	r2, r3
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	4413      	add	r3, r2
 8005256:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a05      	ldr	r2, [pc, #20]	@ (8005288 <u8g2_GetStrWidth+0x24>)
 8005272:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff ffa4 	bl	80051c4 <u8g2_string_width>
 800527c:	4603      	mov	r3, r0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	08005ab1 	.word	0x08005ab1

0800528c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	4611      	mov	r1, r2
 8005298:	461a      	mov	r2, r3
 800529a:	460b      	mov	r3, r1
 800529c:	71fb      	strb	r3, [r7, #7]
 800529e:	4613      	mov	r3, r2
 80052a0:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	781a      	ldrb	r2, [r3, #0]
 80052b0:	7dbb      	ldrb	r3, [r7, #22]
 80052b2:	4413      	add	r3, r2
 80052b4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80052b6:	7dfa      	ldrb	r2, [r7, #23]
 80052b8:	7dbb      	ldrb	r3, [r7, #22]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d90b      	bls.n	80052d6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80052be:	7dfa      	ldrb	r2, [r7, #23]
 80052c0:	79bb      	ldrb	r3, [r7, #6]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d205      	bcs.n	80052d2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80052c6:	79bb      	ldrb	r3, [r7, #6]
 80052c8:	75bb      	strb	r3, [r7, #22]
      b--;
 80052ca:	7dbb      	ldrb	r3, [r7, #22]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	75bb      	strb	r3, [r7, #22]
 80052d0:	e001      	b.n	80052d6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80052d6:	7dfa      	ldrb	r2, [r7, #23]
 80052d8:	79bb      	ldrb	r3, [r7, #6]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d301      	bcc.n	80052e2 <u8g2_clip_intersection2+0x56>
    return 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	e01c      	b.n	800531c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80052e2:	7dba      	ldrb	r2, [r7, #22]
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d801      	bhi.n	80052ee <u8g2_clip_intersection2+0x62>
    return 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e016      	b.n	800531c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80052ee:	7dfa      	ldrb	r2, [r7, #23]
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d201      	bcs.n	80052fa <u8g2_clip_intersection2+0x6e>
    a = c;
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80052fa:	7dba      	ldrb	r2, [r7, #22]
 80052fc:	79bb      	ldrb	r3, [r7, #6]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d901      	bls.n	8005306 <u8g2_clip_intersection2+0x7a>
    b = d;
 8005302:	79bb      	ldrb	r3, [r7, #6]
 8005304:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	7dfa      	ldrb	r2, [r7, #23]
 800530a:	701a      	strb	r2, [r3, #0]
  b -= a;
 800530c:	7dba      	ldrb	r2, [r7, #22]
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	7dba      	ldrb	r2, [r7, #22]
 8005318:	701a      	strb	r2, [r3, #0]
  return 1;
 800531a:	2301      	movs	r3, #1
}
 800531c:	4618      	mov	r0, r3
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b085      	sub	sp, #20
 800532c:	af02      	add	r7, sp, #8
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	4608      	mov	r0, r1
 8005332:	4611      	mov	r1, r2
 8005334:	461a      	mov	r2, r3
 8005336:	4603      	mov	r3, r0
 8005338:	70fb      	strb	r3, [r7, #3]
 800533a:	460b      	mov	r3, r1
 800533c:	70bb      	strb	r3, [r7, #2]
 800533e:	4613      	mov	r3, r2
 8005340:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005348:	78ba      	ldrb	r2, [r7, #2]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8005352:	7878      	ldrb	r0, [r7, #1]
 8005354:	78ba      	ldrb	r2, [r7, #2]
 8005356:	78f9      	ldrb	r1, [r7, #3]
 8005358:	7e3b      	ldrb	r3, [r7, #24]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4603      	mov	r3, r0
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	47a0      	blx	r4
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	bd90      	pop	{r4, r7, pc}

0800536a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800536a:	b590      	push	{r4, r7, lr}
 800536c:	b085      	sub	sp, #20
 800536e:	af02      	add	r7, sp, #8
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	4608      	mov	r0, r1
 8005374:	4611      	mov	r1, r2
 8005376:	461a      	mov	r2, r3
 8005378:	4603      	mov	r3, r0
 800537a:	70fb      	strb	r3, [r7, #3]
 800537c:	460b      	mov	r3, r1
 800537e:	70bb      	strb	r3, [r7, #2]
 8005380:	4613      	mov	r3, r2
 8005382:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800538a:	2b00      	cmp	r3, #0
 800538c:	d06d      	beq.n	800546a <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800538e:	787b      	ldrb	r3, [r7, #1]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d06a      	beq.n	800546a <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8005394:	787b      	ldrb	r3, [r7, #1]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d918      	bls.n	80053cc <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800539a:	7e3b      	ldrb	r3, [r7, #24]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d109      	bne.n	80053b4 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	787b      	ldrb	r3, [r7, #1]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	70fb      	strb	r3, [r7, #3]
	  x++;
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	3301      	adds	r3, #1
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	70fb      	strb	r3, [r7, #3]
 80053b2:	e00b      	b.n	80053cc <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80053b4:	7e3b      	ldrb	r3, [r7, #24]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d108      	bne.n	80053cc <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80053ba:	78ba      	ldrb	r2, [r7, #2]
 80053bc:	787b      	ldrb	r3, [r7, #1]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	70bb      	strb	r3, [r7, #2]
	  y++;
 80053c4:	78bb      	ldrb	r3, [r7, #2]
 80053c6:	3301      	adds	r3, #1
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80053cc:	7e3b      	ldrb	r3, [r7, #24]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80053d4:	7e3b      	ldrb	r3, [r7, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d119      	bne.n	800540e <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 80053e0:	78bb      	ldrb	r3, [r7, #2]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d838      	bhi.n	8005458 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80053ec:	78bb      	ldrb	r3, [r7, #2]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d934      	bls.n	800545c <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80053fe:	1c79      	adds	r1, r7, #1
 8005400:	1cf8      	adds	r0, r7, #3
 8005402:	f7ff ff43 	bl	800528c <u8g2_clip_intersection2>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d119      	bne.n	8005440 <u8g2_DrawHVLine+0xd6>
	  return;
 800540c:	e02d      	b.n	800546a <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	429a      	cmp	r2, r3
 8005418:	d822      	bhi.n	8005460 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	429a      	cmp	r2, r3
 8005424:	d91e      	bls.n	8005464 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005432:	1c79      	adds	r1, r7, #1
 8005434:	1cb8      	adds	r0, r7, #2
 8005436:	f7ff ff29 	bl	800528c <u8g2_clip_intersection2>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005444:	689c      	ldr	r4, [r3, #8]
 8005446:	78f9      	ldrb	r1, [r7, #3]
 8005448:	78ba      	ldrb	r2, [r7, #2]
 800544a:	7878      	ldrb	r0, [r7, #1]
 800544c:	7e3b      	ldrb	r3, [r7, #24]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	4603      	mov	r3, r0
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	47a0      	blx	r4
 8005456:	e008      	b.n	800546a <u8g2_DrawHVLine+0x100>
	  return;
 8005458:	bf00      	nop
 800545a:	e006      	b.n	800546a <u8g2_DrawHVLine+0x100>
	  return;
 800545c:	bf00      	nop
 800545e:	e004      	b.n	800546a <u8g2_DrawHVLine+0x100>
	  return;
 8005460:	bf00      	nop
 8005462:	e002      	b.n	800546a <u8g2_DrawHVLine+0x100>
	  return;
 8005464:	bf00      	nop
 8005466:	e000      	b.n	800546a <u8g2_DrawHVLine+0x100>
	  return;
 8005468:	bf00      	nop
    }
}
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bd90      	pop	{r4, r7, pc}

08005470 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af02      	add	r7, sp, #8
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	4608      	mov	r0, r1
 800547a:	4611      	mov	r1, r2
 800547c:	461a      	mov	r2, r3
 800547e:	4603      	mov	r3, r0
 8005480:	70fb      	strb	r3, [r7, #3]
 8005482:	460b      	mov	r3, r1
 8005484:	70bb      	strb	r3, [r7, #2]
 8005486:	4613      	mov	r3, r2
 8005488:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800548a:	787b      	ldrb	r3, [r7, #1]
 800548c:	78ba      	ldrb	r2, [r7, #2]
 800548e:	78f9      	ldrb	r1, [r7, #3]
 8005490:	2000      	movs	r0, #0
 8005492:	9000      	str	r0, [sp, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff ff68 	bl	800536a <u8g2_DrawHVLine>
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af02      	add	r7, sp, #8
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	4608      	mov	r0, r1
 80054ac:	4611      	mov	r1, r2
 80054ae:	461a      	mov	r2, r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	70fb      	strb	r3, [r7, #3]
 80054b4:	460b      	mov	r3, r1
 80054b6:	70bb      	strb	r3, [r7, #2]
 80054b8:	4613      	mov	r3, r2
 80054ba:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80054bc:	787b      	ldrb	r3, [r7, #1]
 80054be:	78ba      	ldrb	r2, [r7, #2]
 80054c0:	78f9      	ldrb	r1, [r7, #3]
 80054c2:	2001      	movs	r0, #1
 80054c4:	9000      	str	r0, [sp, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff ff4f 	bl	800536a <u8g2_DrawHVLine>
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af02      	add	r7, sp, #8
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
 80054e0:	4613      	mov	r3, r2
 80054e2:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80054ea:	78ba      	ldrb	r2, [r7, #2]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d31a      	bcc.n	8005526 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80054f6:	78ba      	ldrb	r2, [r7, #2]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d216      	bcs.n	800552a <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005502:	78fa      	ldrb	r2, [r7, #3]
 8005504:	429a      	cmp	r2, r3
 8005506:	d312      	bcc.n	800552e <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	429a      	cmp	r2, r3
 8005512:	d20e      	bcs.n	8005532 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005514:	78ba      	ldrb	r2, [r7, #2]
 8005516:	78f9      	ldrb	r1, [r7, #3]
 8005518:	2300      	movs	r3, #0
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	2301      	movs	r3, #1
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff ff23 	bl	800536a <u8g2_DrawHVLine>
 8005524:	e006      	b.n	8005534 <u8g2_DrawPixel+0x60>
    return;
 8005526:	bf00      	nop
 8005528:	e004      	b.n	8005534 <u8g2_DrawPixel+0x60>
    return;
 800552a:	bf00      	nop
 800552c:	e002      	b.n	8005534 <u8g2_DrawPixel+0x60>
    return;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <u8g2_DrawPixel+0x60>
    return;
 8005532:	bf00      	nop
}
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
  if ( color >= 3 )
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d903      	bls.n	800555c <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8005568:	b490      	push	{r4, r7}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	4611      	mov	r1, r2
 8005574:	461a      	mov	r2, r3
 8005576:	4623      	mov	r3, r4
 8005578:	71fb      	strb	r3, [r7, #7]
 800557a:	4603      	mov	r3, r0
 800557c:	71bb      	strb	r3, [r7, #6]
 800557e:	460b      	mov	r3, r1
 8005580:	717b      	strb	r3, [r7, #5]
 8005582:	4613      	mov	r3, r2
 8005584:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8005586:	797a      	ldrb	r2, [r7, #5]
 8005588:	79bb      	ldrb	r3, [r7, #6]
 800558a:	429a      	cmp	r2, r3
 800558c:	d20d      	bcs.n	80055aa <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800558e:	793a      	ldrb	r2, [r7, #4]
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	429a      	cmp	r2, r3
 8005594:	d901      	bls.n	800559a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8005596:	2301      	movs	r3, #1
 8005598:	e014      	b.n	80055c4 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800559a:	797a      	ldrb	r2, [r7, #5]
 800559c:	793b      	ldrb	r3, [r7, #4]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d901      	bls.n	80055a6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e00e      	b.n	80055c4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e00c      	b.n	80055c4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80055aa:	793a      	ldrb	r2, [r7, #4]
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d907      	bls.n	80055c2 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80055b2:	797a      	ldrb	r2, [r7, #5]
 80055b4:	793b      	ldrb	r3, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d901      	bls.n	80055be <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e002      	b.n	80055c4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80055c2:	2300      	movs	r3, #0
    }
  }
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc90      	pop	{r4, r7}
 80055cc:	4770      	bx	lr

080055ce <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	4608      	mov	r0, r1
 80055d8:	4611      	mov	r1, r2
 80055da:	461a      	mov	r2, r3
 80055dc:	4603      	mov	r3, r0
 80055de:	70fb      	strb	r3, [r7, #3]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70bb      	strb	r3, [r7, #2]
 80055e4:	4613      	mov	r3, r2
 80055e6:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 80055f4:	7c3b      	ldrb	r3, [r7, #16]
 80055f6:	78ba      	ldrb	r2, [r7, #2]
 80055f8:	f7ff ffb6 	bl	8005568 <u8g2_is_intersection_decision_tree>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <u8g2_IsIntersection+0x38>
    return 0; 
 8005602:	2300      	movs	r3, #0
 8005604:	e00a      	b.n	800561c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 0045 	ldrb.w	r0, [r3, #69]	@ 0x45
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 1046 	ldrb.w	r1, [r3, #70]	@ 0x46
 8005612:	787b      	ldrb	r3, [r7, #1]
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	f7ff ffa7 	bl	8005568 <u8g2_is_intersection_decision_tree>
 800561a:	4603      	mov	r3, r0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	461a      	mov	r2, r3
 8005632:	4603      	mov	r3, r0
 8005634:	70fb      	strb	r3, [r7, #3]
 8005636:	460b      	mov	r3, r1
 8005638:	70bb      	strb	r3, [r7, #2]
 800563a:	4613      	mov	r3, r2
 800563c:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800563e:	78bb      	ldrb	r3, [r7, #2]
 8005640:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005642:	7cfb      	ldrb	r3, [r7, #19]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800564a:	2301      	movs	r3, #1
 800564c:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800564e:	7c3a      	ldrb	r2, [r7, #16]
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005666:	2b01      	cmp	r3, #1
 8005668:	d801      	bhi.n	800566e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800566a:	7c3b      	ldrb	r3, [r7, #16]
 800566c:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005674:	2b01      	cmp	r3, #1
 8005676:	d001      	beq.n	800567c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8005678:	7c3b      	ldrb	r3, [r7, #16]
 800567a:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800567c:	78bb      	ldrb	r3, [r7, #2]
 800567e:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8005680:	89fb      	ldrh	r3, [r7, #14]
 8005682:	f023 0307 	bic.w	r3, r3, #7
 8005686:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	7c1b      	ldrb	r3, [r3, #16]
 800568e:	461a      	mov	r2, r3
 8005690:	89fb      	ldrh	r3, [r7, #14]
 8005692:	fb13 f302 	smulbb	r3, r3, r2
 8005696:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569c:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800569e:	89fb      	ldrh	r3, [r7, #14]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4413      	add	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
  ptr += x;
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80056ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d117      	bne.n	80056e6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	7cbb      	ldrb	r3, [r7, #18]
 80056bc:	4313      	orrs	r3, r2
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	781a      	ldrb	r2, [r3, #0]
 80056c8:	7c7b      	ldrb	r3, [r7, #17]
 80056ca:	4053      	eors	r3, r2
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	701a      	strb	r2, [r3, #0]
	ptr++;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	3301      	adds	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
	len--;
 80056d8:	787b      	ldrb	r3, [r7, #1]
 80056da:	3b01      	subs	r3, #1
 80056dc:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80056de:	787b      	ldrb	r3, [r7, #1]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e8      	bne.n	80056b6 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80056e4:	e039      	b.n	800575a <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	7cbb      	ldrb	r3, [r7, #18]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	7c7b      	ldrb	r3, [r7, #17]
 80056fa:	4053      	eors	r3, r2
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	3301      	adds	r3, #1
 8005706:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	74fb      	strb	r3, [r7, #19]
      len--;
 8005710:	787b      	ldrb	r3, [r7, #1]
 8005712:	3b01      	subs	r3, #1
 8005714:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8005716:	7cfb      	ldrb	r3, [r7, #19]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d115      	bne.n	8005748 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005722:	461a      	mov	r2, r3
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8005730:	2b01      	cmp	r3, #1
 8005732:	d801      	bhi.n	8005738 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8005734:	2301      	movs	r3, #1
 8005736:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800573e:	2b01      	cmp	r3, #1
 8005740:	d008      	beq.n	8005754 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8005742:	2301      	movs	r3, #1
 8005744:	747b      	strb	r3, [r7, #17]
 8005746:	e005      	b.n	8005754 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8005748:	7cbb      	ldrb	r3, [r7, #18]
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800574e:	7c7b      	ldrb	r3, [r7, #17]
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8005754:	787b      	ldrb	r3, [r7, #1]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1c5      	bne.n	80056e6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
  u8g2->clip_y0 = 0;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	22ff      	movs	r2, #255	@ 0xff
 8005782:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	22ff      	movs	r2, #255	@ 0xff
 800578a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	4798      	blx	r3
}
 8005798:	bf00      	nop
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <u8g2_SetClipWindow>:

void u8g2_SetClipWindow(u8g2_t *u8g2, u8g2_uint_t clip_x0, u8g2_uint_t clip_y0, u8g2_uint_t clip_x1, u8g2_uint_t clip_y1 )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	4608      	mov	r0, r1
 80057aa:	4611      	mov	r1, r2
 80057ac:	461a      	mov	r2, r3
 80057ae:	4603      	mov	r3, r0
 80057b0:	70fb      	strb	r3, [r7, #3]
 80057b2:	460b      	mov	r3, r1
 80057b4:	70bb      	strb	r3, [r7, #2]
 80057b6:	4613      	mov	r3, r2
 80057b8:	707b      	strb	r3, [r7, #1]
  u8g2->clip_x0 = clip_x0;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
  u8g2->clip_y0 = clip_y0;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	78ba      	ldrb	r2, [r7, #2]
 80057c6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  u8g2->clip_x1 = clip_x1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	787a      	ldrb	r2, [r7, #1]
 80057ce:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  u8g2->clip_y1 = clip_y1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	7c3a      	ldrb	r2, [r7, #16]
 80057d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  u8g2->cb->update_page_win(u8g2);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	651a      	str	r2, [r3, #80]	@ 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	631a      	str	r2, [r3, #48]	@ 0x30
  
  u8g2->tile_buf_ptr = buf;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	639a      	str	r2, [r3, #56]	@ 0x38
  u8g2->tile_buf_height = tile_buf_height;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	79fa      	ldrb	r2, [r7, #7]
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  u8g2->tile_curr_row = 0;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
  u8g2->bitmap_transparency = 0;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
  
  u8g2->draw_color = 1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
  u8g2->is_auto_page_clear = 1;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
  
  u8g2->cb = u8g2_cb;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->cb->update_dimension(u8g2);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff ff89 	bl	8005766 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff fc6d 	bl	8005134 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
#endif
}
 8005862:	bf00      	nop
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800587e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7bfa      	ldrb	r2, [r7, #15]
 800588a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  
  t = display_info->tile_width;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	7c1b      	ldrb	r3, [r3, #16]
 8005892:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b1f      	cmp	r3, #31
 8005898:	d901      	bls.n	800589e <u8g2_update_dimension_common+0x34>
    t = 31;
 800589a:	231f      	movs	r3, #31
 800589c:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7bfa      	ldrb	r2, [r7, #15]
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_curr_row;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058b2:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	7bfa      	ldrb	r2, [r7, #15]
 80058be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
  t = u8g2->tile_buf_height;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c8:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
 80058d2:	4413      	add	r3, r2
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	7c52      	ldrb	r2, [r2, #17]
 80058d8:	4293      	cmp	r3, r2
 80058da:	dd06      	ble.n	80058ea <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	7c5a      	ldrb	r2, [r3, #17]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	4413      	add	r3, r2
 8005912:	b2da      	uxtb	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	22f0      	movs	r2, #240	@ 0xf0
 800591e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  if ( display_info->pixel_width <= 240 )
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	8a9b      	ldrh	r3, [r3, #20]
 8005926:	2bf0      	cmp	r3, #240	@ 0xf0
 8005928:	d805      	bhi.n	8005936 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	8a9b      	ldrh	r3, [r3, #20]
 800592e:	b2da      	uxtb	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  u8g2->height = display_info->pixel_height;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	8adb      	ldrh	r3, [r3, #22]
 800593a:	b2da      	uxtb	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
#endif

}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af02      	add	r7, sp, #8
 8005954:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 1049 	ldrb.w	r1, [r3, #73]	@ 0x49
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 004a 	ldrb.w	r0, [r3, #74]	@ 0x4a
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	4603      	mov	r3, r0
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fe2b 	bl	80055ce <u8g2_IsIntersection>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8005986:	e03b      	b.n	8005a00 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800599c:	429a      	cmp	r2, r3
 800599e:	d205      	bcs.n	80059ac <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d905      	bls.n	80059c8 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d205      	bcs.n	80059e4 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d905      	bls.n	8005a00 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 8005a00:	bf00      	nop
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff2a 	bl	800586a <u8g2_update_dimension_common>
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff ff7b 	bl	800594e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	4608      	mov	r0, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	70fb      	strb	r3, [r7, #3]
 8005a72:	460b      	mov	r3, r1
 8005a74:	70bb      	strb	r3, [r7, #2]
 8005a76:	4613      	mov	r3, r2
 8005a78:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005a7a:	7878      	ldrb	r0, [r7, #1]
 8005a7c:	78ba      	ldrb	r2, [r7, #2]
 8005a7e:	78f9      	ldrb	r1, [r7, #3]
 8005a80:	7c3b      	ldrb	r3, [r7, #16]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	4603      	mov	r3, r0
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff fc4e 	bl	8005328 <u8g2_draw_hv_line_2dir>
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <u8x8_ascii_next+0x18>
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	2b0a      	cmp	r3, #10
 8005ac6:	d102      	bne.n	8005ace <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8005ac8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005acc:	e001      	b.n	8005ad2 <u8x8_ascii_next+0x22>
  return b;
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	b29b      	uxth	r3, r3
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <u8x8_utf8_next+0x18>
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	2b0a      	cmp	r3, #10
 8005af4:	d102      	bne.n	8005afc <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8005af6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005afa:	e06e      	b.n	8005bda <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d145      	bne.n	8005b92 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	2bfb      	cmp	r3, #251	@ 0xfb
 8005b0a:	d908      	bls.n	8005b1e <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2205      	movs	r2, #5
 8005b10:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
      b &= 1;
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	70fb      	strb	r3, [r7, #3]
 8005b1c:	e032      	b.n	8005b84 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	2bf7      	cmp	r3, #247	@ 0xf7
 8005b22:	d908      	bls.n	8005b36 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2204      	movs	r2, #4
 8005b28:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
      b &= 3;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	70fb      	strb	r3, [r7, #3]
 8005b34:	e026      	b.n	8005b84 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	2bef      	cmp	r3, #239	@ 0xef
 8005b3a:	d908      	bls.n	8005b4e <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2203      	movs	r2, #3
 8005b40:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
      b &= 7;      
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	70fb      	strb	r3, [r7, #3]
 8005b4c:	e01a      	b.n	8005b84 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	2bdf      	cmp	r3, #223	@ 0xdf
 8005b52:	d908      	bls.n	8005b66 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
      b &= 15;
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	70fb      	strb	r3, [r7, #3]
 8005b64:	e00e      	b.n	8005b84 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	2bbf      	cmp	r3, #191	@ 0xbf
 8005b6a:	d908      	bls.n	8005b7e <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
      b &= 0x01f;
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	70fb      	strb	r3, [r7, #3]
 8005b7c:	e002      	b.n	8005b84 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	e02a      	b.n	8005bda <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8005b8c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8005b90:	e023      	b.n	8005bda <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8c1b      	ldrh	r3, [r3, #32]
 8005ba6:	019b      	lsls	r3, r3, #6
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bb4:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8c1a      	ldrh	r2, [r3, #32]
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8005bd0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8005bd4:	e001      	b.n	8005bda <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	8c1b      	ldrh	r3, [r3, #32]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005be6:	b590      	push	{r4, r7, lr}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	691c      	ldr	r4, [r3, #16]
 8005bf8:	7afa      	ldrb	r2, [r7, #11]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2117      	movs	r1, #23
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	47a0      	blx	r4
 8005c02:	4603      	mov	r3, r0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd90      	pop	{r4, r7, pc}

08005c0c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005c18:	1cfb      	adds	r3, r7, #3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff ffe1 	bl	8005be6 <u8x8_byte_SendBytes>
 8005c24:	4603      	mov	r3, r0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8005c2e:	b590      	push	{r4, r7, lr}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691c      	ldr	r4, [r3, #16]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2118      	movs	r1, #24
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	47a0      	blx	r4
 8005c44:	4603      	mov	r3, r0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd90      	pop	{r4, r7, pc}

08005c4e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8005c4e:	b590      	push	{r4, r7, lr}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691c      	ldr	r4, [r3, #16]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2119      	movs	r1, #25
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	47a0      	blx	r4
 8005c64:	4603      	mov	r3, r0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}

08005c6e <i2c_delay>:
  ignores ACK response (which is anyway not provided by some displays)
  also does not allow reading from the device
*/
static void i2c_delay(u8x8_t *u8x8) U8X8_NOINLINE;
static void i2c_delay(u8x8_t *u8x8)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  //u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_10MICRO, u8x8->display_info->i2c_bus_clock_100kHz);
  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_I2C, u8x8->display_info->i2c_bus_clock_100kHz);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	7b5b      	ldrb	r3, [r3, #13]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	212d      	movs	r1, #45	@ 0x2d
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fc44 	bl	800650e <u8x8_gpio_call>
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <i2c_init>:

static void i2c_init(u8x8_t *u8x8)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  u8x8_gpio_SetI2CClock(u8x8, 1);
 8005c96:	2201      	movs	r2, #1
 8005c98:	214c      	movs	r1, #76	@ 0x4c
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fc37 	bl	800650e <u8x8_gpio_call>
  u8x8_gpio_SetI2CData(u8x8, 1);
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	214d      	movs	r1, #77	@ 0x4d
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fc32 	bl	800650e <u8x8_gpio_call>
  
  i2c_delay(u8x8);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff ffdf 	bl	8005c6e <i2c_delay>
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <i2c_read_scl_and_delay>:

/* actually, the scl line is not observed, so this procedure does not return a value */

static void i2c_read_scl_and_delay(u8x8_t *u8x8)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CClock(u8x8, 1);
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	214c      	movs	r1, #76	@ 0x4c
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fc22 	bl	800650e <u8x8_gpio_call>

  i2c_delay(u8x8);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff ffcf 	bl	8005c6e <i2c_delay>
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <i2c_clear_scl>:

static void i2c_clear_scl(u8x8_t *u8x8)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  u8x8_gpio_SetI2CClock(u8x8, 0);
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	214c      	movs	r1, #76	@ 0x4c
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fc12 	bl	800650e <u8x8_gpio_call>
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <i2c_read_sda>:

static void i2c_read_sda(u8x8_t *u8x8)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CData(u8x8, 1);
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	214d      	movs	r1, #77	@ 0x4d
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fc05 	bl	800650e <u8x8_gpio_call>
}
 8005d04:	bf00      	nop
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <i2c_clear_sda>:

static void i2c_clear_sda(u8x8_t *u8x8)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* set open collector and drive low */
  u8x8_gpio_SetI2CData(u8x8, 0);
 8005d14:	2200      	movs	r2, #0
 8005d16:	214d      	movs	r1, #77	@ 0x4d
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fbf8 	bl	800650e <u8x8_gpio_call>
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <i2c_start>:

static void i2c_start(u8x8_t *u8x8)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  if ( u8x8->i2c_started != 0 )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <i2c_start+0x24>
  {
    /* if already started: do restart */
    i2c_read_sda(u8x8);     /* SDA = 1 */
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff ffda 	bl	8005cf2 <i2c_read_sda>
    i2c_delay(u8x8);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff ff95 	bl	8005c6e <i2c_delay>
    i2c_read_scl_and_delay(u8x8);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ffb7 	bl	8005cb8 <i2c_read_scl_and_delay>
  }
  i2c_read_sda(u8x8);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ffd1 	bl	8005cf2 <i2c_read_sda>
  /* send the start condition, both lines go from 1 to 0 */
  i2c_clear_sda(u8x8);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff ffdb 	bl	8005d0c <i2c_clear_sda>
  i2c_delay(u8x8);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff89 	bl	8005c6e <i2c_delay>
  i2c_clear_scl(u8x8);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff ffbb 	bl	8005cd8 <i2c_clear_scl>
  u8x8->i2c_started = 1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <i2c_stop>:


static void i2c_stop(u8x8_t *u8x8)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* set SDA to 0 */
  i2c_clear_sda(u8x8);  
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff ffc6 	bl	8005d0c <i2c_clear_sda>
  i2c_delay(u8x8);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff74 	bl	8005c6e <i2c_delay>
 
  /* now release all lines */
  i2c_read_scl_and_delay(u8x8);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff ff96 	bl	8005cb8 <i2c_read_scl_and_delay>
 
  /* set SDA to 1 */
  i2c_read_sda(u8x8);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff ffb0 	bl	8005cf2 <i2c_read_sda>
  i2c_delay(u8x8);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ff6b 	bl	8005c6e <i2c_delay>
  u8x8->i2c_started = 0;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <i2c_write_bit>:

static void i2c_write_bit(u8x8_t *u8x8, uint8_t val)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  if (val)
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <i2c_write_bit+0x1a>
    i2c_read_sda(u8x8);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff ff99 	bl	8005cf2 <i2c_read_sda>
 8005dc0:	e002      	b.n	8005dc8 <i2c_write_bit+0x20>
  else
    i2c_clear_sda(u8x8);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff ffa2 	bl	8005d0c <i2c_clear_sda>
 
  i2c_delay(u8x8);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff ff50 	bl	8005c6e <i2c_delay>
  i2c_read_scl_and_delay(u8x8);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff ff72 	bl	8005cb8 <i2c_read_scl_and_delay>
  i2c_clear_scl(u8x8);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff ff7f 	bl	8005cd8 <i2c_clear_scl>
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <i2c_read_bit>:

static void i2c_read_bit(u8x8_t *u8x8)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  //uint8_t val;
  /* do not drive SDA */
  i2c_read_sda(u8x8);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff ff81 	bl	8005cf2 <i2c_read_sda>
  i2c_delay(u8x8);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff ff3c 	bl	8005c6e <i2c_delay>
  i2c_read_scl_and_delay(u8x8);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff ff5e 	bl	8005cb8 <i2c_read_scl_and_delay>
  i2c_read_sda(u8x8);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff ff78 	bl	8005cf2 <i2c_read_sda>
  i2c_delay(u8x8);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff ff33 	bl	8005c6e <i2c_delay>
  i2c_clear_scl(u8x8);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ff65 	bl	8005cd8 <i2c_clear_scl>
  //return val;
}
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <i2c_write_byte>:

static void i2c_write_byte(u8x8_t *u8x8, uint8_t b)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b082      	sub	sp, #8
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
  i2c_write_bit(u8x8, b & 128);
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff ffbb 	bl	8005da8 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 64);
 8005e32:	78fb      	ldrb	r3, [r7, #3]
 8005e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ffb3 	bl	8005da8 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 32);
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ffab 	bl	8005da8 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 16);
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff ffa3 	bl	8005da8 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 8);
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ff9b 	bl	8005da8 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 4);
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff ff93 	bl	8005da8 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 2);
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff ff8b 	bl	8005da8 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 1);
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff ff83 	bl	8005da8 <i2c_write_bit>
    
  /* read ack from client */
  /* 0: ack was given by client */
  /* 1: nothing happend during ack cycle */  
  i2c_read_bit(u8x8);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff ff9d 	bl	8005de2 <i2c_read_bit>
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <u8x8_byte_sw_i2c>:

uint8_t u8x8_byte_sw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	72fb      	strb	r3, [r7, #11]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	72bb      	strb	r3, [r7, #10]
  uint8_t *data;

  switch(msg)
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	3b14      	subs	r3, #20
 8005ec6:	2b0c      	cmp	r3, #12
 8005ec8:	d842      	bhi.n	8005f50 <u8x8_byte_sw_i2c+0xa0>
 8005eca:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed0 <u8x8_byte_sw_i2c+0x20>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005f2b 	.word	0x08005f2b
 8005ed4:	08005f51 	.word	0x08005f51
 8005ed8:	08005f51 	.word	0x08005f51
 8005edc:	08005f05 	.word	0x08005f05
 8005ee0:	08005f33 	.word	0x08005f33
 8005ee4:	08005f49 	.word	0x08005f49
 8005ee8:	08005f51 	.word	0x08005f51
 8005eec:	08005f51 	.word	0x08005f51
 8005ef0:	08005f51 	.word	0x08005f51
 8005ef4:	08005f51 	.word	0x08005f51
 8005ef8:	08005f51 	.word	0x08005f51
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	08005f55 	.word	0x08005f55
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	617b      	str	r3, [r7, #20]
    
      while( arg_int > 0 )
 8005f08:	e00b      	b.n	8005f22 <u8x8_byte_sw_i2c+0x72>
      {
	i2c_write_byte(u8x8, *data);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff ff80 	bl	8005e16 <i2c_write_byte>
	data++;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	617b      	str	r3, [r7, #20]
	arg_int--;
 8005f1c:	7abb      	ldrb	r3, [r7, #10]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8005f22:	7abb      	ldrb	r3, [r7, #10]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f0      	bne.n	8005f0a <u8x8_byte_sw_i2c+0x5a>
      }
      
      break;
 8005f28:	e015      	b.n	8005f56 <u8x8_byte_sw_i2c+0xa6>
      
    case U8X8_MSG_BYTE_INIT:
      i2c_init(u8x8);
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff feaf 	bl	8005c8e <i2c_init>
      break;
 8005f30:	e011      	b.n	8005f56 <u8x8_byte_sw_i2c+0xa6>
    case U8X8_MSG_BYTE_SET_DC:
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      i2c_start(u8x8);
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7ff fef7 	bl	8005d26 <i2c_start>
      i2c_write_byte(u8x8, u8x8_GetI2CAddress(u8x8));
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f3e:	4619      	mov	r1, r3
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff ff68 	bl	8005e16 <i2c_write_byte>
      //i2c_write_byte(u8x8, 0x078);
      break;
 8005f46:	e006      	b.n	8005f56 <u8x8_byte_sw_i2c+0xa6>
    case U8X8_MSG_BYTE_END_TRANSFER:
      i2c_stop(u8x8);
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff ff12 	bl	8005d72 <i2c_stop>
      break;
 8005f4e:	e002      	b.n	8005f56 <u8x8_byte_sw_i2c+0xa6>
    default:
      return 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e001      	b.n	8005f58 <u8x8_byte_sw_i2c+0xa8>
      break;
 8005f54:	bf00      	nop
  }
  return 1;
 8005f56:	2301      	movs	r3, #1
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005f60:	b590      	push	{r4, r7, lr}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68dc      	ldr	r4, [r3, #12]
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	2300      	movs	r3, #0
 8005f74:	2115      	movs	r1, #21
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	47a0      	blx	r4
 8005f7a:	4603      	mov	r3, r0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd90      	pop	{r4, r7, pc}

08005f84 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005f84:	b590      	push	{r4, r7, lr}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68dc      	ldr	r4, [r3, #12]
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	2300      	movs	r3, #0
 8005f98:	2116      	movs	r1, #22
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	47a0      	blx	r4
 8005f9e:	4603      	mov	r3, r0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd90      	pop	{r4, r7, pc}

08005fa8 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68dc      	ldr	r4, [r3, #12]
 8005fba:	7afa      	ldrb	r2, [r7, #11]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2117      	movs	r1, #23
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	47a0      	blx	r4
 8005fc4:	4603      	mov	r3, r0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd90      	pop	{r4, r7, pc}

08005fce <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005fce:	b590      	push	{r4, r7, lr}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68dc      	ldr	r4, [r3, #12]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2118      	movs	r1, #24
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	47a0      	blx	r4
 8005fe4:	4603      	mov	r3, r0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd90      	pop	{r4, r7, pc}

08005fee <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8005fee:	b590      	push	{r4, r7, lr}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68dc      	ldr	r4, [r3, #12]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2119      	movs	r1, #25
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	47a0      	blx	r4
 8006004:	4603      	mov	r3, r0
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bd90      	pop	{r4, r7, pc}

0800600e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800600e:	b590      	push	{r4, r7, lr}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	73fb      	strb	r3, [r7, #15]
    data++;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	3301      	adds	r3, #1
 8006022:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	2bfe      	cmp	r3, #254	@ 0xfe
 8006028:	d031      	beq.n	800608e <u8x8_cad_SendSequence+0x80>
 800602a:	2bfe      	cmp	r3, #254	@ 0xfe
 800602c:	dc3d      	bgt.n	80060aa <u8x8_cad_SendSequence+0x9c>
 800602e:	2b19      	cmp	r3, #25
 8006030:	dc3b      	bgt.n	80060aa <u8x8_cad_SendSequence+0x9c>
 8006032:	2b18      	cmp	r3, #24
 8006034:	da23      	bge.n	800607e <u8x8_cad_SendSequence+0x70>
 8006036:	2b16      	cmp	r3, #22
 8006038:	dc02      	bgt.n	8006040 <u8x8_cad_SendSequence+0x32>
 800603a:	2b15      	cmp	r3, #21
 800603c:	da03      	bge.n	8006046 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800603e:	e034      	b.n	80060aa <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8006040:	2b17      	cmp	r3, #23
 8006042:	d00e      	beq.n	8006062 <u8x8_cad_SendSequence+0x54>
	return;
 8006044:	e031      	b.n	80060aa <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68dc      	ldr	r4, [r3, #12]
 8006050:	7bba      	ldrb	r2, [r7, #14]
 8006052:	7bf9      	ldrb	r1, [r7, #15]
 8006054:	2300      	movs	r3, #0
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	47a0      	blx	r4
	  data++;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	3301      	adds	r3, #1
 800605e:	603b      	str	r3, [r7, #0]
	  break;
 8006060:	e022      	b.n	80060a8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8006068:	f107 030e 	add.w	r3, r7, #14
 800606c:	461a      	mov	r2, r3
 800606e:	2101      	movs	r1, #1
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ff99 	bl	8005fa8 <u8x8_cad_SendData>
	  data++;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	603b      	str	r3, [r7, #0]
	  break;
 800607c:	e014      	b.n	80060a8 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68dc      	ldr	r4, [r3, #12]
 8006082:	7bf9      	ldrb	r1, [r7, #15]
 8006084:	2300      	movs	r3, #0
 8006086:	2200      	movs	r2, #0
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	47a0      	blx	r4
	  break;
 800608c:	e00c      	b.n	80060a8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	461a      	mov	r2, r3
 8006098:	2129      	movs	r1, #41	@ 0x29
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa37 	bl	800650e <u8x8_gpio_call>
	  data++;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	603b      	str	r3, [r7, #0]
	  break;
 80060a6:	bf00      	nop
    cmd = *data;
 80060a8:	e7b6      	b.n	8006018 <u8x8_cad_SendSequence+0xa>
	return;
 80060aa:	bf00      	nop
    }
  }
}
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd90      	pop	{r4, r7, pc}

080060b2 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80060b2:	b590      	push	{r4, r7, lr}
 80060b4:	b085      	sub	sp, #20
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	460b      	mov	r3, r1
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff fdb4 	bl	8005c2e <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80060c6:	2140      	movs	r1, #64	@ 0x40
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff fd9f 	bl	8005c0c <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	691c      	ldr	r4, [r3, #16]
 80060d2:	7afa      	ldrb	r2, [r7, #11]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2117      	movs	r1, #23
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff fdb6 	bl	8005c4e <u8x8_byte_EndTransfer>
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd90      	pop	{r4, r7, pc}
	...

080060ec <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	607b      	str	r3, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	72fb      	strb	r3, [r7, #11]
 80060fa:	4613      	mov	r3, r2
 80060fc:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80060fe:	7afb      	ldrb	r3, [r7, #11]
 8006100:	3b14      	subs	r3, #20
 8006102:	2b05      	cmp	r3, #5
 8006104:	d86e      	bhi.n	80061e4 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8006106:	a201      	add	r2, pc, #4	@ (adr r2, 800610c <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8006108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610c:	080061a3 	.word	0x080061a3
 8006110:	08006125 	.word	0x08006125
 8006114:	08006153 	.word	0x08006153
 8006118:	0800615f 	.word	0x0800615f
 800611c:	080061c7 	.word	0x080061c7
 8006120:	080061cf 	.word	0x080061cf
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8006124:	4b33      	ldr	r3, [pc, #204]	@ (80061f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff fd8e 	bl	8005c4e <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff fd7b 	bl	8005c2e <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8006138:	2100      	movs	r1, #0
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff fd66 	bl	8005c0c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8006140:	7abb      	ldrb	r3, [r7, #10]
 8006142:	4619      	mov	r1, r3
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff fd61 	bl	8005c0c <u8x8_byte_SendByte>
      in_transfer = 1;
 800614a:	4b2a      	ldr	r3, [pc, #168]	@ (80061f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800614c:	2201      	movs	r2, #1
 800614e:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8006150:	e04a      	b.n	80061e8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8006152:	7abb      	ldrb	r3, [r7, #10]
 8006154:	4619      	mov	r1, r3
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f7ff fd58 	bl	8005c0c <u8x8_byte_SendByte>
      break;      
 800615c:	e044      	b.n	80061e8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800615e:	4b25      	ldr	r3, [pc, #148]	@ (80061f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fd71 	bl	8005c4e <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8006170:	e00a      	b.n	8006188 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	2118      	movs	r1, #24
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff ff9b 	bl	80060b2 <u8x8_i2c_data_transfer>
	arg_int-=24;
 800617c:	7abb      	ldrb	r3, [r7, #10]
 800617e:	3b18      	subs	r3, #24
 8006180:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	3318      	adds	r3, #24
 8006186:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8006188:	7abb      	ldrb	r3, [r7, #10]
 800618a:	2b18      	cmp	r3, #24
 800618c:	d8f1      	bhi.n	8006172 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800618e:	7abb      	ldrb	r3, [r7, #10]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4619      	mov	r1, r3
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff ff8c 	bl	80060b2 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800619a:	4b16      	ldr	r3, [pc, #88]	@ (80061f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
      break;
 80061a0:	e022      	b.n	80061e8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80061a8:	2bff      	cmp	r3, #255	@ 0xff
 80061aa:	d103      	bne.n	80061b4 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2278      	movs	r2, #120	@ 0x78
 80061b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	691c      	ldr	r4, [r3, #16]
 80061b8:	7aba      	ldrb	r2, [r7, #10]
 80061ba:	7af9      	ldrb	r1, [r7, #11]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	47a0      	blx	r4
 80061c2:	4603      	mov	r3, r0
 80061c4:	e011      	b.n	80061ea <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80061c6:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
      break;
 80061cc:	e00c      	b.n	80061e8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80061ce:	4b09      	ldr	r3, [pc, #36]	@ (80061f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff fd39 	bl	8005c4e <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80061dc:	4b05      	ldr	r3, [pc, #20]	@ (80061f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
      break;
 80061e2:	e001      	b.n	80061e8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e000      	b.n	80061ea <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80061e8:	2301      	movs	r3, #1
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd90      	pop	{r4, r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000b50 	.word	0x20000b50

080061f8 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	72fb      	strb	r3, [r7, #11]
 8006206:	4613      	mov	r3, r2
 8006208:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800620a:	7afb      	ldrb	r3, [r7, #11]
 800620c:	3b0b      	subs	r3, #11
 800620e:	2b04      	cmp	r3, #4
 8006210:	f200 808a 	bhi.w	8006328 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8006214:	a201      	add	r2, pc, #4	@ (adr r2, 800621c <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8006216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621a:	bf00      	nop
 800621c:	08006231 	.word	0x08006231
 8006220:	08006329 	.word	0x08006329
 8006224:	0800624b 	.word	0x0800624b
 8006228:	0800627d 	.word	0x0800627d
 800622c:	0800629d 	.word	0x0800629d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8006230:	7abb      	ldrb	r3, [r7, #10]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8006236:	4940      	ldr	r1, [pc, #256]	@ (8006338 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff fee8 	bl	800600e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800623e:	e075      	b.n	800632c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8006240:	493e      	ldr	r1, [pc, #248]	@ (800633c <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff fee3 	bl	800600e <u8x8_cad_SendSequence>
      break;
 8006248:	e070      	b.n	800632c <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800624a:	7abb      	ldrb	r3, [r7, #10]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8006250:	493b      	ldr	r1, [pc, #236]	@ (8006340 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff fedb 	bl	800600e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	7c9a      	ldrb	r2, [r3, #18]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8006264:	e062      	b.n	800632c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8006266:	4937      	ldr	r1, [pc, #220]	@ (8006344 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7ff fed0 	bl	800600e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	7cda      	ldrb	r2, [r3, #19]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 800627a:	e057      	b.n	800632c <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff fea6 	bl	8005fce <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8006282:	2181      	movs	r1, #129	@ 0x81
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fe6b 	bl	8005f60 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800628a:	7abb      	ldrb	r3, [r7, #10]
 800628c:	4619      	mov	r1, r3
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fe78 	bl	8005f84 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff feaa 	bl	8005fee <u8x8_cad_EndTransfer>
      break;
 800629a:	e047      	b.n	800632c <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff fe96 	bl	8005fce <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	795b      	ldrb	r3, [r3, #5]
 80062a6:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	4413      	add	r3, r2
 80062b8:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80062ba:	2140      	movs	r1, #64	@ 0x40
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff fe4f 	bl	8005f60 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	091b      	lsrs	r3, r3, #4
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f043 0310 	orr.w	r3, r3, #16
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f7ff fe45 	bl	8005f60 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	4619      	mov	r1, r3
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f7ff fe4f 	bl	8005f84 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	799b      	ldrb	r3, [r3, #6]
 80062ea:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	4619      	mov	r1, r3
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f7ff fe46 	bl	8005f84 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	791b      	ldrb	r3, [r3, #4]
 80062fc:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8006304:	7dbb      	ldrb	r3, [r7, #22]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	b2db      	uxtb	r3, r3
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4619      	mov	r1, r3
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff fe4a 	bl	8005fa8 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8006314:	7abb      	ldrb	r3, [r7, #10]
 8006316:	3b01      	subs	r3, #1
 8006318:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800631a:	7abb      	ldrb	r3, [r7, #10]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1eb      	bne.n	80062f8 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff fe64 	bl	8005fee <u8x8_cad_EndTransfer>
      break;
 8006326:	e001      	b.n	800632c <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8006328:	2300      	movs	r3, #0
 800632a:	e000      	b.n	800632e <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800632c:	2301      	movs	r3, #1
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	0800bcbc 	.word	0x0800bcbc
 800633c:	0800bcc4 	.word	0x0800bcc4
 8006340:	0800bccc 	.word	0x0800bccc
 8006344:	0800bcd4 	.word	0x0800bcd4

08006348 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	607b      	str	r3, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	72fb      	strb	r3, [r7, #11]
 8006356:	4613      	mov	r3, r2
 8006358:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800635a:	7aba      	ldrb	r2, [r7, #10]
 800635c:	7af9      	ldrb	r1, [r7, #11]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff ff49 	bl	80061f8 <u8x8_d_ssd1306_sh1106_generic>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800636c:	2301      	movs	r3, #1
 800636e:	e014      	b.n	800639a <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8006370:	7afb      	ldrb	r3, [r7, #11]
 8006372:	2b09      	cmp	r3, #9
 8006374:	d009      	beq.n	800638a <u8x8_d_ssd1306_128x64_noname+0x42>
 8006376:	2b0a      	cmp	r3, #10
 8006378:	d10c      	bne.n	8006394 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f82a 	bl	80063d4 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8006380:	4908      	ldr	r1, [pc, #32]	@ (80063a4 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff fe43 	bl	800600e <u8x8_cad_SendSequence>
      break;
 8006388:	e006      	b.n	8006398 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800638a:	4907      	ldr	r1, [pc, #28]	@ (80063a8 <u8x8_d_ssd1306_128x64_noname+0x60>)
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f80d 	bl	80063ac <u8x8_d_helper_display_setup_memory>
      break;
 8006392:	e001      	b.n	8006398 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8006394:	2300      	movs	r3, #0
 8006396:	e000      	b.n	800639a <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8006398:	2301      	movs	r3, #1
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	0800bc84 	.word	0x0800bc84
 80063a8:	0800bcdc 	.word	0x0800bcdc

080063ac <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	7c9a      	ldrb	r2, [r3, #18]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80063d4:	b590      	push	{r4, r7, lr}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695c      	ldr	r4, [r3, #20]
 80063e0:	2300      	movs	r3, #0
 80063e2:	2200      	movs	r2, #0
 80063e4:	2128      	movs	r1, #40	@ 0x28
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68dc      	ldr	r4, [r3, #12]
 80063ee:	2300      	movs	r3, #0
 80063f0:	2200      	movs	r2, #0
 80063f2:	2114      	movs	r1, #20
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80063f8:	2201      	movs	r2, #1
 80063fa:	214b      	movs	r1, #75	@ 0x4b
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f886 	bl	800650e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	791b      	ldrb	r3, [r3, #4]
 8006408:	461a      	mov	r2, r3
 800640a:	2129      	movs	r1, #41	@ 0x29
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f87e 	bl	800650e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8006412:	2200      	movs	r2, #0
 8006414:	214b      	movs	r1, #75	@ 0x4b
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f879 	bl	800650e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	791b      	ldrb	r3, [r3, #4]
 8006422:	461a      	mov	r2, r3
 8006424:	2129      	movs	r1, #41	@ 0x29
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f871 	bl	800650e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800642c:	2201      	movs	r2, #1
 800642e:	214b      	movs	r1, #75	@ 0x4b
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f86c 	bl	800650e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	795b      	ldrb	r3, [r3, #5]
 800643c:	461a      	mov	r2, r3
 800643e:	2129      	movs	r1, #41	@ 0x29
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f864 	bl	800650e <u8x8_gpio_call>
}    
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	bd90      	pop	{r4, r7, pc}

0800644e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800644e:	b590      	push	{r4, r7, lr}
 8006450:	b085      	sub	sp, #20
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	4608      	mov	r0, r1
 8006458:	4611      	mov	r1, r2
 800645a:	461a      	mov	r2, r3
 800645c:	4603      	mov	r3, r0
 800645e:	70fb      	strb	r3, [r7, #3]
 8006460:	460b      	mov	r3, r1
 8006462:	70bb      	strb	r3, [r7, #2]
 8006464:	4613      	mov	r3, r2
 8006466:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800646c:	78bb      	ldrb	r3, [r7, #2]
 800646e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8006470:	787b      	ldrb	r3, [r7, #1]
 8006472:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689c      	ldr	r4, [r3, #8]
 800647c:	f107 0308 	add.w	r3, r7, #8
 8006480:	2201      	movs	r2, #1
 8006482:	210f      	movs	r1, #15
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	47a0      	blx	r4
 8006488:	4603      	mov	r3, r0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	bd90      	pop	{r4, r7, pc}

08006492 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8006492:	b590      	push	{r4, r7, lr}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689c      	ldr	r4, [r3, #8]
 800649e:	2300      	movs	r3, #0
 80064a0:	2200      	movs	r2, #0
 80064a2:	2109      	movs	r1, #9
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	47a0      	blx	r4
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd90      	pop	{r4, r7, pc}

080064b0 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80064b0:	b590      	push	{r4, r7, lr}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689c      	ldr	r4, [r3, #8]
 80064bc:	2300      	movs	r3, #0
 80064be:	2200      	movs	r2, #0
 80064c0:	210a      	movs	r1, #10
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	47a0      	blx	r4
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd90      	pop	{r4, r7, pc}

080064ce <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80064ce:	b590      	push	{r4, r7, lr}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	460b      	mov	r3, r1
 80064d8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689c      	ldr	r4, [r3, #8]
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	2300      	movs	r3, #0
 80064e2:	210b      	movs	r1, #11
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	47a0      	blx	r4
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd90      	pop	{r4, r7, pc}

080064f0 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80064f0:	b590      	push	{r4, r7, lr}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689c      	ldr	r4, [r3, #8]
 80064fc:	2300      	movs	r3, #0
 80064fe:	2200      	movs	r2, #0
 8006500:	2110      	movs	r1, #16
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	47a0      	blx	r4
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	bd90      	pop	{r4, r7, pc}

0800650e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800650e:	b590      	push	{r4, r7, lr}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
 800651a:	4613      	mov	r3, r2
 800651c:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695c      	ldr	r4, [r3, #20]
 8006522:	78ba      	ldrb	r2, [r7, #2]
 8006524:	78f9      	ldrb	r1, [r7, #3]
 8006526:	2300      	movs	r3, #0
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	47a0      	blx	r4
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	bd90      	pop	{r4, r7, pc}

08006534 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	607b      	str	r3, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	72fb      	strb	r3, [r7, #11]
 8006542:	4613      	mov	r3, r2
 8006544:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a13      	ldr	r2, [pc, #76]	@ (80065b4 <u8x8_SetupDefaults+0x60>)
 8006566:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a12      	ldr	r2, [pc, #72]	@ (80065b4 <u8x8_SetupDefaults+0x60>)
 800656c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a10      	ldr	r2, [pc, #64]	@ (80065b4 <u8x8_SetupDefaults+0x60>)
 8006572:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a0f      	ldr	r2, [pc, #60]	@ (80065b4 <u8x8_SetupDefaults+0x60>)
 8006578:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    u8x8->device_address = 0;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	22ff      	movs	r2, #255	@ 0xff
 800659c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	22ff      	movs	r2, #255	@ 0xff
 80065a4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	08006535 	.word	0x08006535

080065b8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff ffc4 	bl	8006554 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff ff54 	bl	8006492 <u8x8_SetupMemory>
}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <__assert_func>:
 80065f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065f6:	4614      	mov	r4, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4b09      	ldr	r3, [pc, #36]	@ (8006620 <__assert_func+0x2c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4605      	mov	r5, r0
 8006600:	68d8      	ldr	r0, [r3, #12]
 8006602:	b954      	cbnz	r4, 800661a <__assert_func+0x26>
 8006604:	4b07      	ldr	r3, [pc, #28]	@ (8006624 <__assert_func+0x30>)
 8006606:	461c      	mov	r4, r3
 8006608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800660c:	9100      	str	r1, [sp, #0]
 800660e:	462b      	mov	r3, r5
 8006610:	4905      	ldr	r1, [pc, #20]	@ (8006628 <__assert_func+0x34>)
 8006612:	f000 f95f 	bl	80068d4 <fiprintf>
 8006616:	f000 fa6a 	bl	8006aee <abort>
 800661a:	4b04      	ldr	r3, [pc, #16]	@ (800662c <__assert_func+0x38>)
 800661c:	e7f4      	b.n	8006608 <__assert_func+0x14>
 800661e:	bf00      	nop
 8006620:	20000018 	.word	0x20000018
 8006624:	0800bd2f 	.word	0x0800bd2f
 8006628:	0800bd01 	.word	0x0800bd01
 800662c:	0800bcf4 	.word	0x0800bcf4

08006630 <sbrk_aligned>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	4e0f      	ldr	r6, [pc, #60]	@ (8006670 <sbrk_aligned+0x40>)
 8006634:	460c      	mov	r4, r1
 8006636:	6831      	ldr	r1, [r6, #0]
 8006638:	4605      	mov	r5, r0
 800663a:	b911      	cbnz	r1, 8006642 <sbrk_aligned+0x12>
 800663c:	f000 f9fa 	bl	8006a34 <_sbrk_r>
 8006640:	6030      	str	r0, [r6, #0]
 8006642:	4621      	mov	r1, r4
 8006644:	4628      	mov	r0, r5
 8006646:	f000 f9f5 	bl	8006a34 <_sbrk_r>
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	d103      	bne.n	8006656 <sbrk_aligned+0x26>
 800664e:	f04f 34ff 	mov.w	r4, #4294967295
 8006652:	4620      	mov	r0, r4
 8006654:	bd70      	pop	{r4, r5, r6, pc}
 8006656:	1cc4      	adds	r4, r0, #3
 8006658:	f024 0403 	bic.w	r4, r4, #3
 800665c:	42a0      	cmp	r0, r4
 800665e:	d0f8      	beq.n	8006652 <sbrk_aligned+0x22>
 8006660:	1a21      	subs	r1, r4, r0
 8006662:	4628      	mov	r0, r5
 8006664:	f000 f9e6 	bl	8006a34 <_sbrk_r>
 8006668:	3001      	adds	r0, #1
 800666a:	d1f2      	bne.n	8006652 <sbrk_aligned+0x22>
 800666c:	e7ef      	b.n	800664e <sbrk_aligned+0x1e>
 800666e:	bf00      	nop
 8006670:	20000b54 	.word	0x20000b54

08006674 <_malloc_r>:
 8006674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006678:	1ccd      	adds	r5, r1, #3
 800667a:	f025 0503 	bic.w	r5, r5, #3
 800667e:	3508      	adds	r5, #8
 8006680:	2d0c      	cmp	r5, #12
 8006682:	bf38      	it	cc
 8006684:	250c      	movcc	r5, #12
 8006686:	2d00      	cmp	r5, #0
 8006688:	4606      	mov	r6, r0
 800668a:	db01      	blt.n	8006690 <_malloc_r+0x1c>
 800668c:	42a9      	cmp	r1, r5
 800668e:	d904      	bls.n	800669a <_malloc_r+0x26>
 8006690:	230c      	movs	r3, #12
 8006692:	6033      	str	r3, [r6, #0]
 8006694:	2000      	movs	r0, #0
 8006696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800669a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006770 <_malloc_r+0xfc>
 800669e:	f000 f869 	bl	8006774 <__malloc_lock>
 80066a2:	f8d8 3000 	ldr.w	r3, [r8]
 80066a6:	461c      	mov	r4, r3
 80066a8:	bb44      	cbnz	r4, 80066fc <_malloc_r+0x88>
 80066aa:	4629      	mov	r1, r5
 80066ac:	4630      	mov	r0, r6
 80066ae:	f7ff ffbf 	bl	8006630 <sbrk_aligned>
 80066b2:	1c43      	adds	r3, r0, #1
 80066b4:	4604      	mov	r4, r0
 80066b6:	d158      	bne.n	800676a <_malloc_r+0xf6>
 80066b8:	f8d8 4000 	ldr.w	r4, [r8]
 80066bc:	4627      	mov	r7, r4
 80066be:	2f00      	cmp	r7, #0
 80066c0:	d143      	bne.n	800674a <_malloc_r+0xd6>
 80066c2:	2c00      	cmp	r4, #0
 80066c4:	d04b      	beq.n	800675e <_malloc_r+0xea>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	4639      	mov	r1, r7
 80066ca:	4630      	mov	r0, r6
 80066cc:	eb04 0903 	add.w	r9, r4, r3
 80066d0:	f000 f9b0 	bl	8006a34 <_sbrk_r>
 80066d4:	4581      	cmp	r9, r0
 80066d6:	d142      	bne.n	800675e <_malloc_r+0xea>
 80066d8:	6821      	ldr	r1, [r4, #0]
 80066da:	1a6d      	subs	r5, r5, r1
 80066dc:	4629      	mov	r1, r5
 80066de:	4630      	mov	r0, r6
 80066e0:	f7ff ffa6 	bl	8006630 <sbrk_aligned>
 80066e4:	3001      	adds	r0, #1
 80066e6:	d03a      	beq.n	800675e <_malloc_r+0xea>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	442b      	add	r3, r5
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	f8d8 3000 	ldr.w	r3, [r8]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	bb62      	cbnz	r2, 8006750 <_malloc_r+0xdc>
 80066f6:	f8c8 7000 	str.w	r7, [r8]
 80066fa:	e00f      	b.n	800671c <_malloc_r+0xa8>
 80066fc:	6822      	ldr	r2, [r4, #0]
 80066fe:	1b52      	subs	r2, r2, r5
 8006700:	d420      	bmi.n	8006744 <_malloc_r+0xd0>
 8006702:	2a0b      	cmp	r2, #11
 8006704:	d917      	bls.n	8006736 <_malloc_r+0xc2>
 8006706:	1961      	adds	r1, r4, r5
 8006708:	42a3      	cmp	r3, r4
 800670a:	6025      	str	r5, [r4, #0]
 800670c:	bf18      	it	ne
 800670e:	6059      	strne	r1, [r3, #4]
 8006710:	6863      	ldr	r3, [r4, #4]
 8006712:	bf08      	it	eq
 8006714:	f8c8 1000 	streq.w	r1, [r8]
 8006718:	5162      	str	r2, [r4, r5]
 800671a:	604b      	str	r3, [r1, #4]
 800671c:	4630      	mov	r0, r6
 800671e:	f000 f82f 	bl	8006780 <__malloc_unlock>
 8006722:	f104 000b 	add.w	r0, r4, #11
 8006726:	1d23      	adds	r3, r4, #4
 8006728:	f020 0007 	bic.w	r0, r0, #7
 800672c:	1ac2      	subs	r2, r0, r3
 800672e:	bf1c      	itt	ne
 8006730:	1a1b      	subne	r3, r3, r0
 8006732:	50a3      	strne	r3, [r4, r2]
 8006734:	e7af      	b.n	8006696 <_malloc_r+0x22>
 8006736:	6862      	ldr	r2, [r4, #4]
 8006738:	42a3      	cmp	r3, r4
 800673a:	bf0c      	ite	eq
 800673c:	f8c8 2000 	streq.w	r2, [r8]
 8006740:	605a      	strne	r2, [r3, #4]
 8006742:	e7eb      	b.n	800671c <_malloc_r+0xa8>
 8006744:	4623      	mov	r3, r4
 8006746:	6864      	ldr	r4, [r4, #4]
 8006748:	e7ae      	b.n	80066a8 <_malloc_r+0x34>
 800674a:	463c      	mov	r4, r7
 800674c:	687f      	ldr	r7, [r7, #4]
 800674e:	e7b6      	b.n	80066be <_malloc_r+0x4a>
 8006750:	461a      	mov	r2, r3
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	42a3      	cmp	r3, r4
 8006756:	d1fb      	bne.n	8006750 <_malloc_r+0xdc>
 8006758:	2300      	movs	r3, #0
 800675a:	6053      	str	r3, [r2, #4]
 800675c:	e7de      	b.n	800671c <_malloc_r+0xa8>
 800675e:	230c      	movs	r3, #12
 8006760:	6033      	str	r3, [r6, #0]
 8006762:	4630      	mov	r0, r6
 8006764:	f000 f80c 	bl	8006780 <__malloc_unlock>
 8006768:	e794      	b.n	8006694 <_malloc_r+0x20>
 800676a:	6005      	str	r5, [r0, #0]
 800676c:	e7d6      	b.n	800671c <_malloc_r+0xa8>
 800676e:	bf00      	nop
 8006770:	20000b58 	.word	0x20000b58

08006774 <__malloc_lock>:
 8006774:	4801      	ldr	r0, [pc, #4]	@ (800677c <__malloc_lock+0x8>)
 8006776:	f000 b9aa 	b.w	8006ace <__retarget_lock_acquire_recursive>
 800677a:	bf00      	nop
 800677c:	20000c9c 	.word	0x20000c9c

08006780 <__malloc_unlock>:
 8006780:	4801      	ldr	r0, [pc, #4]	@ (8006788 <__malloc_unlock+0x8>)
 8006782:	f000 b9a5 	b.w	8006ad0 <__retarget_lock_release_recursive>
 8006786:	bf00      	nop
 8006788:	20000c9c 	.word	0x20000c9c

0800678c <std>:
 800678c:	2300      	movs	r3, #0
 800678e:	b510      	push	{r4, lr}
 8006790:	4604      	mov	r4, r0
 8006792:	e9c0 3300 	strd	r3, r3, [r0]
 8006796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800679a:	6083      	str	r3, [r0, #8]
 800679c:	8181      	strh	r1, [r0, #12]
 800679e:	6643      	str	r3, [r0, #100]	@ 0x64
 80067a0:	81c2      	strh	r2, [r0, #14]
 80067a2:	6183      	str	r3, [r0, #24]
 80067a4:	4619      	mov	r1, r3
 80067a6:	2208      	movs	r2, #8
 80067a8:	305c      	adds	r0, #92	@ 0x5c
 80067aa:	f000 f906 	bl	80069ba <memset>
 80067ae:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <std+0x58>)
 80067b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80067b2:	4b0d      	ldr	r3, [pc, #52]	@ (80067e8 <std+0x5c>)
 80067b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067b6:	4b0d      	ldr	r3, [pc, #52]	@ (80067ec <std+0x60>)
 80067b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067ba:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <std+0x64>)
 80067bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80067be:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <std+0x68>)
 80067c0:	6224      	str	r4, [r4, #32]
 80067c2:	429c      	cmp	r4, r3
 80067c4:	d006      	beq.n	80067d4 <std+0x48>
 80067c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067ca:	4294      	cmp	r4, r2
 80067cc:	d002      	beq.n	80067d4 <std+0x48>
 80067ce:	33d0      	adds	r3, #208	@ 0xd0
 80067d0:	429c      	cmp	r4, r3
 80067d2:	d105      	bne.n	80067e0 <std+0x54>
 80067d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067dc:	f000 b976 	b.w	8006acc <__retarget_lock_init_recursive>
 80067e0:	bd10      	pop	{r4, pc}
 80067e2:	bf00      	nop
 80067e4:	08006935 	.word	0x08006935
 80067e8:	08006957 	.word	0x08006957
 80067ec:	0800698f 	.word	0x0800698f
 80067f0:	080069b3 	.word	0x080069b3
 80067f4:	20000b5c 	.word	0x20000b5c

080067f8 <stdio_exit_handler>:
 80067f8:	4a02      	ldr	r2, [pc, #8]	@ (8006804 <stdio_exit_handler+0xc>)
 80067fa:	4903      	ldr	r1, [pc, #12]	@ (8006808 <stdio_exit_handler+0x10>)
 80067fc:	4803      	ldr	r0, [pc, #12]	@ (800680c <stdio_exit_handler+0x14>)
 80067fe:	f000 b87b 	b.w	80068f8 <_fwalk_sglue>
 8006802:	bf00      	nop
 8006804:	2000000c 	.word	0x2000000c
 8006808:	08007239 	.word	0x08007239
 800680c:	2000001c 	.word	0x2000001c

08006810 <cleanup_stdio>:
 8006810:	6841      	ldr	r1, [r0, #4]
 8006812:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <cleanup_stdio+0x34>)
 8006814:	4299      	cmp	r1, r3
 8006816:	b510      	push	{r4, lr}
 8006818:	4604      	mov	r4, r0
 800681a:	d001      	beq.n	8006820 <cleanup_stdio+0x10>
 800681c:	f000 fd0c 	bl	8007238 <_fflush_r>
 8006820:	68a1      	ldr	r1, [r4, #8]
 8006822:	4b09      	ldr	r3, [pc, #36]	@ (8006848 <cleanup_stdio+0x38>)
 8006824:	4299      	cmp	r1, r3
 8006826:	d002      	beq.n	800682e <cleanup_stdio+0x1e>
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fd05 	bl	8007238 <_fflush_r>
 800682e:	68e1      	ldr	r1, [r4, #12]
 8006830:	4b06      	ldr	r3, [pc, #24]	@ (800684c <cleanup_stdio+0x3c>)
 8006832:	4299      	cmp	r1, r3
 8006834:	d004      	beq.n	8006840 <cleanup_stdio+0x30>
 8006836:	4620      	mov	r0, r4
 8006838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683c:	f000 bcfc 	b.w	8007238 <_fflush_r>
 8006840:	bd10      	pop	{r4, pc}
 8006842:	bf00      	nop
 8006844:	20000b5c 	.word	0x20000b5c
 8006848:	20000bc4 	.word	0x20000bc4
 800684c:	20000c2c 	.word	0x20000c2c

08006850 <global_stdio_init.part.0>:
 8006850:	b510      	push	{r4, lr}
 8006852:	4b0b      	ldr	r3, [pc, #44]	@ (8006880 <global_stdio_init.part.0+0x30>)
 8006854:	4c0b      	ldr	r4, [pc, #44]	@ (8006884 <global_stdio_init.part.0+0x34>)
 8006856:	4a0c      	ldr	r2, [pc, #48]	@ (8006888 <global_stdio_init.part.0+0x38>)
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	4620      	mov	r0, r4
 800685c:	2200      	movs	r2, #0
 800685e:	2104      	movs	r1, #4
 8006860:	f7ff ff94 	bl	800678c <std>
 8006864:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006868:	2201      	movs	r2, #1
 800686a:	2109      	movs	r1, #9
 800686c:	f7ff ff8e 	bl	800678c <std>
 8006870:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006874:	2202      	movs	r2, #2
 8006876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800687a:	2112      	movs	r1, #18
 800687c:	f7ff bf86 	b.w	800678c <std>
 8006880:	20000c94 	.word	0x20000c94
 8006884:	20000b5c 	.word	0x20000b5c
 8006888:	080067f9 	.word	0x080067f9

0800688c <__sfp_lock_acquire>:
 800688c:	4801      	ldr	r0, [pc, #4]	@ (8006894 <__sfp_lock_acquire+0x8>)
 800688e:	f000 b91e 	b.w	8006ace <__retarget_lock_acquire_recursive>
 8006892:	bf00      	nop
 8006894:	20000c9d 	.word	0x20000c9d

08006898 <__sfp_lock_release>:
 8006898:	4801      	ldr	r0, [pc, #4]	@ (80068a0 <__sfp_lock_release+0x8>)
 800689a:	f000 b919 	b.w	8006ad0 <__retarget_lock_release_recursive>
 800689e:	bf00      	nop
 80068a0:	20000c9d 	.word	0x20000c9d

080068a4 <__sinit>:
 80068a4:	b510      	push	{r4, lr}
 80068a6:	4604      	mov	r4, r0
 80068a8:	f7ff fff0 	bl	800688c <__sfp_lock_acquire>
 80068ac:	6a23      	ldr	r3, [r4, #32]
 80068ae:	b11b      	cbz	r3, 80068b8 <__sinit+0x14>
 80068b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b4:	f7ff bff0 	b.w	8006898 <__sfp_lock_release>
 80068b8:	4b04      	ldr	r3, [pc, #16]	@ (80068cc <__sinit+0x28>)
 80068ba:	6223      	str	r3, [r4, #32]
 80068bc:	4b04      	ldr	r3, [pc, #16]	@ (80068d0 <__sinit+0x2c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1f5      	bne.n	80068b0 <__sinit+0xc>
 80068c4:	f7ff ffc4 	bl	8006850 <global_stdio_init.part.0>
 80068c8:	e7f2      	b.n	80068b0 <__sinit+0xc>
 80068ca:	bf00      	nop
 80068cc:	08006811 	.word	0x08006811
 80068d0:	20000c94 	.word	0x20000c94

080068d4 <fiprintf>:
 80068d4:	b40e      	push	{r1, r2, r3}
 80068d6:	b503      	push	{r0, r1, lr}
 80068d8:	4601      	mov	r1, r0
 80068da:	ab03      	add	r3, sp, #12
 80068dc:	4805      	ldr	r0, [pc, #20]	@ (80068f4 <fiprintf+0x20>)
 80068de:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e2:	6800      	ldr	r0, [r0, #0]
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	f000 f97d 	bl	8006be4 <_vfiprintf_r>
 80068ea:	b002      	add	sp, #8
 80068ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80068f0:	b003      	add	sp, #12
 80068f2:	4770      	bx	lr
 80068f4:	20000018 	.word	0x20000018

080068f8 <_fwalk_sglue>:
 80068f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068fc:	4607      	mov	r7, r0
 80068fe:	4688      	mov	r8, r1
 8006900:	4614      	mov	r4, r2
 8006902:	2600      	movs	r6, #0
 8006904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006908:	f1b9 0901 	subs.w	r9, r9, #1
 800690c:	d505      	bpl.n	800691a <_fwalk_sglue+0x22>
 800690e:	6824      	ldr	r4, [r4, #0]
 8006910:	2c00      	cmp	r4, #0
 8006912:	d1f7      	bne.n	8006904 <_fwalk_sglue+0xc>
 8006914:	4630      	mov	r0, r6
 8006916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800691a:	89ab      	ldrh	r3, [r5, #12]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d907      	bls.n	8006930 <_fwalk_sglue+0x38>
 8006920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006924:	3301      	adds	r3, #1
 8006926:	d003      	beq.n	8006930 <_fwalk_sglue+0x38>
 8006928:	4629      	mov	r1, r5
 800692a:	4638      	mov	r0, r7
 800692c:	47c0      	blx	r8
 800692e:	4306      	orrs	r6, r0
 8006930:	3568      	adds	r5, #104	@ 0x68
 8006932:	e7e9      	b.n	8006908 <_fwalk_sglue+0x10>

08006934 <__sread>:
 8006934:	b510      	push	{r4, lr}
 8006936:	460c      	mov	r4, r1
 8006938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693c:	f000 f868 	bl	8006a10 <_read_r>
 8006940:	2800      	cmp	r0, #0
 8006942:	bfab      	itete	ge
 8006944:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006946:	89a3      	ldrhlt	r3, [r4, #12]
 8006948:	181b      	addge	r3, r3, r0
 800694a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800694e:	bfac      	ite	ge
 8006950:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006952:	81a3      	strhlt	r3, [r4, #12]
 8006954:	bd10      	pop	{r4, pc}

08006956 <__swrite>:
 8006956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695a:	461f      	mov	r7, r3
 800695c:	898b      	ldrh	r3, [r1, #12]
 800695e:	05db      	lsls	r3, r3, #23
 8006960:	4605      	mov	r5, r0
 8006962:	460c      	mov	r4, r1
 8006964:	4616      	mov	r6, r2
 8006966:	d505      	bpl.n	8006974 <__swrite+0x1e>
 8006968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696c:	2302      	movs	r3, #2
 800696e:	2200      	movs	r2, #0
 8006970:	f000 f83c 	bl	80069ec <_lseek_r>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800697a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	4632      	mov	r2, r6
 8006982:	463b      	mov	r3, r7
 8006984:	4628      	mov	r0, r5
 8006986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800698a:	f000 b863 	b.w	8006a54 <_write_r>

0800698e <__sseek>:
 800698e:	b510      	push	{r4, lr}
 8006990:	460c      	mov	r4, r1
 8006992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006996:	f000 f829 	bl	80069ec <_lseek_r>
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	bf15      	itete	ne
 80069a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069aa:	81a3      	strheq	r3, [r4, #12]
 80069ac:	bf18      	it	ne
 80069ae:	81a3      	strhne	r3, [r4, #12]
 80069b0:	bd10      	pop	{r4, pc}

080069b2 <__sclose>:
 80069b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b6:	f000 b809 	b.w	80069cc <_close_r>

080069ba <memset>:
 80069ba:	4402      	add	r2, r0
 80069bc:	4603      	mov	r3, r0
 80069be:	4293      	cmp	r3, r2
 80069c0:	d100      	bne.n	80069c4 <memset+0xa>
 80069c2:	4770      	bx	lr
 80069c4:	f803 1b01 	strb.w	r1, [r3], #1
 80069c8:	e7f9      	b.n	80069be <memset+0x4>
	...

080069cc <_close_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4d06      	ldr	r5, [pc, #24]	@ (80069e8 <_close_r+0x1c>)
 80069d0:	2300      	movs	r3, #0
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	f7fa ff21 	bl	800181e <_close>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_close_r+0x1a>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_close_r+0x1a>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20000c98 	.word	0x20000c98

080069ec <_lseek_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4d07      	ldr	r5, [pc, #28]	@ (8006a0c <_lseek_r+0x20>)
 80069f0:	4604      	mov	r4, r0
 80069f2:	4608      	mov	r0, r1
 80069f4:	4611      	mov	r1, r2
 80069f6:	2200      	movs	r2, #0
 80069f8:	602a      	str	r2, [r5, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f7fa ff36 	bl	800186c <_lseek>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_lseek_r+0x1e>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_lseek_r+0x1e>
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	20000c98 	.word	0x20000c98

08006a10 <_read_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4d07      	ldr	r5, [pc, #28]	@ (8006a30 <_read_r+0x20>)
 8006a14:	4604      	mov	r4, r0
 8006a16:	4608      	mov	r0, r1
 8006a18:	4611      	mov	r1, r2
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	602a      	str	r2, [r5, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f7fa fec4 	bl	80017ac <_read>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d102      	bne.n	8006a2e <_read_r+0x1e>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	b103      	cbz	r3, 8006a2e <_read_r+0x1e>
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	bd38      	pop	{r3, r4, r5, pc}
 8006a30:	20000c98 	.word	0x20000c98

08006a34 <_sbrk_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d06      	ldr	r5, [pc, #24]	@ (8006a50 <_sbrk_r+0x1c>)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	602b      	str	r3, [r5, #0]
 8006a40:	f7fa ff22 	bl	8001888 <_sbrk>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_sbrk_r+0x1a>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_sbrk_r+0x1a>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	20000c98 	.word	0x20000c98

08006a54 <_write_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d07      	ldr	r5, [pc, #28]	@ (8006a74 <_write_r+0x20>)
 8006a58:	4604      	mov	r4, r0
 8006a5a:	4608      	mov	r0, r1
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	2200      	movs	r2, #0
 8006a60:	602a      	str	r2, [r5, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f7fa febf 	bl	80017e6 <_write>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_write_r+0x1e>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_write_r+0x1e>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	20000c98 	.word	0x20000c98

08006a78 <__errno>:
 8006a78:	4b01      	ldr	r3, [pc, #4]	@ (8006a80 <__errno+0x8>)
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	20000018 	.word	0x20000018

08006a84 <__libc_init_array>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	4d0d      	ldr	r5, [pc, #52]	@ (8006abc <__libc_init_array+0x38>)
 8006a88:	4c0d      	ldr	r4, [pc, #52]	@ (8006ac0 <__libc_init_array+0x3c>)
 8006a8a:	1b64      	subs	r4, r4, r5
 8006a8c:	10a4      	asrs	r4, r4, #2
 8006a8e:	2600      	movs	r6, #0
 8006a90:	42a6      	cmp	r6, r4
 8006a92:	d109      	bne.n	8006aa8 <__libc_init_array+0x24>
 8006a94:	4d0b      	ldr	r5, [pc, #44]	@ (8006ac4 <__libc_init_array+0x40>)
 8006a96:	4c0c      	ldr	r4, [pc, #48]	@ (8006ac8 <__libc_init_array+0x44>)
 8006a98:	f000 fd52 	bl	8007540 <_init>
 8006a9c:	1b64      	subs	r4, r4, r5
 8006a9e:	10a4      	asrs	r4, r4, #2
 8006aa0:	2600      	movs	r6, #0
 8006aa2:	42a6      	cmp	r6, r4
 8006aa4:	d105      	bne.n	8006ab2 <__libc_init_array+0x2e>
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aac:	4798      	blx	r3
 8006aae:	3601      	adds	r6, #1
 8006ab0:	e7ee      	b.n	8006a90 <__libc_init_array+0xc>
 8006ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab6:	4798      	blx	r3
 8006ab8:	3601      	adds	r6, #1
 8006aba:	e7f2      	b.n	8006aa2 <__libc_init_array+0x1e>
 8006abc:	0800bd6c 	.word	0x0800bd6c
 8006ac0:	0800bd6c 	.word	0x0800bd6c
 8006ac4:	0800bd6c 	.word	0x0800bd6c
 8006ac8:	0800bd70 	.word	0x0800bd70

08006acc <__retarget_lock_init_recursive>:
 8006acc:	4770      	bx	lr

08006ace <__retarget_lock_acquire_recursive>:
 8006ace:	4770      	bx	lr

08006ad0 <__retarget_lock_release_recursive>:
 8006ad0:	4770      	bx	lr

08006ad2 <memcpy>:
 8006ad2:	440a      	add	r2, r1
 8006ad4:	4291      	cmp	r1, r2
 8006ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ada:	d100      	bne.n	8006ade <memcpy+0xc>
 8006adc:	4770      	bx	lr
 8006ade:	b510      	push	{r4, lr}
 8006ae0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae8:	4291      	cmp	r1, r2
 8006aea:	d1f9      	bne.n	8006ae0 <memcpy+0xe>
 8006aec:	bd10      	pop	{r4, pc}

08006aee <abort>:
 8006aee:	b508      	push	{r3, lr}
 8006af0:	2006      	movs	r0, #6
 8006af2:	f000 fc85 	bl	8007400 <raise>
 8006af6:	2001      	movs	r0, #1
 8006af8:	f7fa fe4d 	bl	8001796 <_exit>

08006afc <_free_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4605      	mov	r5, r0
 8006b00:	2900      	cmp	r1, #0
 8006b02:	d041      	beq.n	8006b88 <_free_r+0x8c>
 8006b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b08:	1f0c      	subs	r4, r1, #4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfb8      	it	lt
 8006b0e:	18e4      	addlt	r4, r4, r3
 8006b10:	f7ff fe30 	bl	8006774 <__malloc_lock>
 8006b14:	4a1d      	ldr	r2, [pc, #116]	@ (8006b8c <_free_r+0x90>)
 8006b16:	6813      	ldr	r3, [r2, #0]
 8006b18:	b933      	cbnz	r3, 8006b28 <_free_r+0x2c>
 8006b1a:	6063      	str	r3, [r4, #4]
 8006b1c:	6014      	str	r4, [r2, #0]
 8006b1e:	4628      	mov	r0, r5
 8006b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b24:	f7ff be2c 	b.w	8006780 <__malloc_unlock>
 8006b28:	42a3      	cmp	r3, r4
 8006b2a:	d908      	bls.n	8006b3e <_free_r+0x42>
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	1821      	adds	r1, r4, r0
 8006b30:	428b      	cmp	r3, r1
 8006b32:	bf01      	itttt	eq
 8006b34:	6819      	ldreq	r1, [r3, #0]
 8006b36:	685b      	ldreq	r3, [r3, #4]
 8006b38:	1809      	addeq	r1, r1, r0
 8006b3a:	6021      	streq	r1, [r4, #0]
 8006b3c:	e7ed      	b.n	8006b1a <_free_r+0x1e>
 8006b3e:	461a      	mov	r2, r3
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	b10b      	cbz	r3, 8006b48 <_free_r+0x4c>
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d9fa      	bls.n	8006b3e <_free_r+0x42>
 8006b48:	6811      	ldr	r1, [r2, #0]
 8006b4a:	1850      	adds	r0, r2, r1
 8006b4c:	42a0      	cmp	r0, r4
 8006b4e:	d10b      	bne.n	8006b68 <_free_r+0x6c>
 8006b50:	6820      	ldr	r0, [r4, #0]
 8006b52:	4401      	add	r1, r0
 8006b54:	1850      	adds	r0, r2, r1
 8006b56:	4283      	cmp	r3, r0
 8006b58:	6011      	str	r1, [r2, #0]
 8006b5a:	d1e0      	bne.n	8006b1e <_free_r+0x22>
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	6053      	str	r3, [r2, #4]
 8006b62:	4408      	add	r0, r1
 8006b64:	6010      	str	r0, [r2, #0]
 8006b66:	e7da      	b.n	8006b1e <_free_r+0x22>
 8006b68:	d902      	bls.n	8006b70 <_free_r+0x74>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	e7d6      	b.n	8006b1e <_free_r+0x22>
 8006b70:	6820      	ldr	r0, [r4, #0]
 8006b72:	1821      	adds	r1, r4, r0
 8006b74:	428b      	cmp	r3, r1
 8006b76:	bf04      	itt	eq
 8006b78:	6819      	ldreq	r1, [r3, #0]
 8006b7a:	685b      	ldreq	r3, [r3, #4]
 8006b7c:	6063      	str	r3, [r4, #4]
 8006b7e:	bf04      	itt	eq
 8006b80:	1809      	addeq	r1, r1, r0
 8006b82:	6021      	streq	r1, [r4, #0]
 8006b84:	6054      	str	r4, [r2, #4]
 8006b86:	e7ca      	b.n	8006b1e <_free_r+0x22>
 8006b88:	bd38      	pop	{r3, r4, r5, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000b58 	.word	0x20000b58

08006b90 <__sfputc_r>:
 8006b90:	6893      	ldr	r3, [r2, #8]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	b410      	push	{r4}
 8006b98:	6093      	str	r3, [r2, #8]
 8006b9a:	da08      	bge.n	8006bae <__sfputc_r+0x1e>
 8006b9c:	6994      	ldr	r4, [r2, #24]
 8006b9e:	42a3      	cmp	r3, r4
 8006ba0:	db01      	blt.n	8006ba6 <__sfputc_r+0x16>
 8006ba2:	290a      	cmp	r1, #10
 8006ba4:	d103      	bne.n	8006bae <__sfputc_r+0x1e>
 8006ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006baa:	f000 bb6d 	b.w	8007288 <__swbuf_r>
 8006bae:	6813      	ldr	r3, [r2, #0]
 8006bb0:	1c58      	adds	r0, r3, #1
 8006bb2:	6010      	str	r0, [r2, #0]
 8006bb4:	7019      	strb	r1, [r3, #0]
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <__sfputs_r>:
 8006bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	460f      	mov	r7, r1
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	18d5      	adds	r5, r2, r3
 8006bc8:	42ac      	cmp	r4, r5
 8006bca:	d101      	bne.n	8006bd0 <__sfputs_r+0x12>
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e007      	b.n	8006be0 <__sfputs_r+0x22>
 8006bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd4:	463a      	mov	r2, r7
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f7ff ffda 	bl	8006b90 <__sfputc_r>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d1f3      	bne.n	8006bc8 <__sfputs_r+0xa>
 8006be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006be4 <_vfiprintf_r>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	460d      	mov	r5, r1
 8006bea:	b09d      	sub	sp, #116	@ 0x74
 8006bec:	4614      	mov	r4, r2
 8006bee:	4698      	mov	r8, r3
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	b118      	cbz	r0, 8006bfc <_vfiprintf_r+0x18>
 8006bf4:	6a03      	ldr	r3, [r0, #32]
 8006bf6:	b90b      	cbnz	r3, 8006bfc <_vfiprintf_r+0x18>
 8006bf8:	f7ff fe54 	bl	80068a4 <__sinit>
 8006bfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bfe:	07d9      	lsls	r1, r3, #31
 8006c00:	d405      	bmi.n	8006c0e <_vfiprintf_r+0x2a>
 8006c02:	89ab      	ldrh	r3, [r5, #12]
 8006c04:	059a      	lsls	r2, r3, #22
 8006c06:	d402      	bmi.n	8006c0e <_vfiprintf_r+0x2a>
 8006c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c0a:	f7ff ff60 	bl	8006ace <__retarget_lock_acquire_recursive>
 8006c0e:	89ab      	ldrh	r3, [r5, #12]
 8006c10:	071b      	lsls	r3, r3, #28
 8006c12:	d501      	bpl.n	8006c18 <_vfiprintf_r+0x34>
 8006c14:	692b      	ldr	r3, [r5, #16]
 8006c16:	b99b      	cbnz	r3, 8006c40 <_vfiprintf_r+0x5c>
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f000 fb72 	bl	8007304 <__swsetup_r>
 8006c20:	b170      	cbz	r0, 8006c40 <_vfiprintf_r+0x5c>
 8006c22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c24:	07dc      	lsls	r4, r3, #31
 8006c26:	d504      	bpl.n	8006c32 <_vfiprintf_r+0x4e>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	b01d      	add	sp, #116	@ 0x74
 8006c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c32:	89ab      	ldrh	r3, [r5, #12]
 8006c34:	0598      	lsls	r0, r3, #22
 8006c36:	d4f7      	bmi.n	8006c28 <_vfiprintf_r+0x44>
 8006c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c3a:	f7ff ff49 	bl	8006ad0 <__retarget_lock_release_recursive>
 8006c3e:	e7f3      	b.n	8006c28 <_vfiprintf_r+0x44>
 8006c40:	2300      	movs	r3, #0
 8006c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c44:	2320      	movs	r3, #32
 8006c46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c4e:	2330      	movs	r3, #48	@ 0x30
 8006c50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e00 <_vfiprintf_r+0x21c>
 8006c54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c58:	f04f 0901 	mov.w	r9, #1
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	469a      	mov	sl, r3
 8006c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c64:	b10a      	cbz	r2, 8006c6a <_vfiprintf_r+0x86>
 8006c66:	2a25      	cmp	r2, #37	@ 0x25
 8006c68:	d1f9      	bne.n	8006c5e <_vfiprintf_r+0x7a>
 8006c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006c6e:	d00b      	beq.n	8006c88 <_vfiprintf_r+0xa4>
 8006c70:	465b      	mov	r3, fp
 8006c72:	4622      	mov	r2, r4
 8006c74:	4629      	mov	r1, r5
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ffa1 	bl	8006bbe <__sfputs_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f000 80a7 	beq.w	8006dd0 <_vfiprintf_r+0x1ec>
 8006c82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c84:	445a      	add	r2, fp
 8006c86:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c88:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 809f 	beq.w	8006dd0 <_vfiprintf_r+0x1ec>
 8006c92:	2300      	movs	r3, #0
 8006c94:	f04f 32ff 	mov.w	r2, #4294967295
 8006c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9c:	f10a 0a01 	add.w	sl, sl, #1
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	9307      	str	r3, [sp, #28]
 8006ca4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ca8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006caa:	4654      	mov	r4, sl
 8006cac:	2205      	movs	r2, #5
 8006cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb2:	4853      	ldr	r0, [pc, #332]	@ (8006e00 <_vfiprintf_r+0x21c>)
 8006cb4:	f7f9 fab4 	bl	8000220 <memchr>
 8006cb8:	9a04      	ldr	r2, [sp, #16]
 8006cba:	b9d8      	cbnz	r0, 8006cf4 <_vfiprintf_r+0x110>
 8006cbc:	06d1      	lsls	r1, r2, #27
 8006cbe:	bf44      	itt	mi
 8006cc0:	2320      	movmi	r3, #32
 8006cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cc6:	0713      	lsls	r3, r2, #28
 8006cc8:	bf44      	itt	mi
 8006cca:	232b      	movmi	r3, #43	@ 0x2b
 8006ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd6:	d015      	beq.n	8006d04 <_vfiprintf_r+0x120>
 8006cd8:	9a07      	ldr	r2, [sp, #28]
 8006cda:	4654      	mov	r4, sl
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f04f 0c0a 	mov.w	ip, #10
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ce8:	3b30      	subs	r3, #48	@ 0x30
 8006cea:	2b09      	cmp	r3, #9
 8006cec:	d94b      	bls.n	8006d86 <_vfiprintf_r+0x1a2>
 8006cee:	b1b0      	cbz	r0, 8006d1e <_vfiprintf_r+0x13a>
 8006cf0:	9207      	str	r2, [sp, #28]
 8006cf2:	e014      	b.n	8006d1e <_vfiprintf_r+0x13a>
 8006cf4:	eba0 0308 	sub.w	r3, r0, r8
 8006cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	9304      	str	r3, [sp, #16]
 8006d00:	46a2      	mov	sl, r4
 8006d02:	e7d2      	b.n	8006caa <_vfiprintf_r+0xc6>
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	1d19      	adds	r1, r3, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	9103      	str	r1, [sp, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bfbb      	ittet	lt
 8006d10:	425b      	neglt	r3, r3
 8006d12:	f042 0202 	orrlt.w	r2, r2, #2
 8006d16:	9307      	strge	r3, [sp, #28]
 8006d18:	9307      	strlt	r3, [sp, #28]
 8006d1a:	bfb8      	it	lt
 8006d1c:	9204      	strlt	r2, [sp, #16]
 8006d1e:	7823      	ldrb	r3, [r4, #0]
 8006d20:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d22:	d10a      	bne.n	8006d3a <_vfiprintf_r+0x156>
 8006d24:	7863      	ldrb	r3, [r4, #1]
 8006d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d28:	d132      	bne.n	8006d90 <_vfiprintf_r+0x1ac>
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	1d1a      	adds	r2, r3, #4
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	9203      	str	r2, [sp, #12]
 8006d32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d36:	3402      	adds	r4, #2
 8006d38:	9305      	str	r3, [sp, #20]
 8006d3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e10 <_vfiprintf_r+0x22c>
 8006d3e:	7821      	ldrb	r1, [r4, #0]
 8006d40:	2203      	movs	r2, #3
 8006d42:	4650      	mov	r0, sl
 8006d44:	f7f9 fa6c 	bl	8000220 <memchr>
 8006d48:	b138      	cbz	r0, 8006d5a <_vfiprintf_r+0x176>
 8006d4a:	9b04      	ldr	r3, [sp, #16]
 8006d4c:	eba0 000a 	sub.w	r0, r0, sl
 8006d50:	2240      	movs	r2, #64	@ 0x40
 8006d52:	4082      	lsls	r2, r0
 8006d54:	4313      	orrs	r3, r2
 8006d56:	3401      	adds	r4, #1
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d5e:	4829      	ldr	r0, [pc, #164]	@ (8006e04 <_vfiprintf_r+0x220>)
 8006d60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d64:	2206      	movs	r2, #6
 8006d66:	f7f9 fa5b 	bl	8000220 <memchr>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d03f      	beq.n	8006dee <_vfiprintf_r+0x20a>
 8006d6e:	4b26      	ldr	r3, [pc, #152]	@ (8006e08 <_vfiprintf_r+0x224>)
 8006d70:	bb1b      	cbnz	r3, 8006dba <_vfiprintf_r+0x1d6>
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	3307      	adds	r3, #7
 8006d76:	f023 0307 	bic.w	r3, r3, #7
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	9303      	str	r3, [sp, #12]
 8006d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d80:	443b      	add	r3, r7
 8006d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d84:	e76a      	b.n	8006c5c <_vfiprintf_r+0x78>
 8006d86:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	e7a8      	b.n	8006ce2 <_vfiprintf_r+0xfe>
 8006d90:	2300      	movs	r3, #0
 8006d92:	3401      	adds	r4, #1
 8006d94:	9305      	str	r3, [sp, #20]
 8006d96:	4619      	mov	r1, r3
 8006d98:	f04f 0c0a 	mov.w	ip, #10
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da2:	3a30      	subs	r2, #48	@ 0x30
 8006da4:	2a09      	cmp	r2, #9
 8006da6:	d903      	bls.n	8006db0 <_vfiprintf_r+0x1cc>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0c6      	beq.n	8006d3a <_vfiprintf_r+0x156>
 8006dac:	9105      	str	r1, [sp, #20]
 8006dae:	e7c4      	b.n	8006d3a <_vfiprintf_r+0x156>
 8006db0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006db4:	4604      	mov	r4, r0
 8006db6:	2301      	movs	r3, #1
 8006db8:	e7f0      	b.n	8006d9c <_vfiprintf_r+0x1b8>
 8006dba:	ab03      	add	r3, sp, #12
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	462a      	mov	r2, r5
 8006dc0:	4b12      	ldr	r3, [pc, #72]	@ (8006e0c <_vfiprintf_r+0x228>)
 8006dc2:	a904      	add	r1, sp, #16
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f3af 8000 	nop.w
 8006dca:	4607      	mov	r7, r0
 8006dcc:	1c78      	adds	r0, r7, #1
 8006dce:	d1d6      	bne.n	8006d7e <_vfiprintf_r+0x19a>
 8006dd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dd2:	07d9      	lsls	r1, r3, #31
 8006dd4:	d405      	bmi.n	8006de2 <_vfiprintf_r+0x1fe>
 8006dd6:	89ab      	ldrh	r3, [r5, #12]
 8006dd8:	059a      	lsls	r2, r3, #22
 8006dda:	d402      	bmi.n	8006de2 <_vfiprintf_r+0x1fe>
 8006ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dde:	f7ff fe77 	bl	8006ad0 <__retarget_lock_release_recursive>
 8006de2:	89ab      	ldrh	r3, [r5, #12]
 8006de4:	065b      	lsls	r3, r3, #25
 8006de6:	f53f af1f 	bmi.w	8006c28 <_vfiprintf_r+0x44>
 8006dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dec:	e71e      	b.n	8006c2c <_vfiprintf_r+0x48>
 8006dee:	ab03      	add	r3, sp, #12
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	462a      	mov	r2, r5
 8006df4:	4b05      	ldr	r3, [pc, #20]	@ (8006e0c <_vfiprintf_r+0x228>)
 8006df6:	a904      	add	r1, sp, #16
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f000 f879 	bl	8006ef0 <_printf_i>
 8006dfe:	e7e4      	b.n	8006dca <_vfiprintf_r+0x1e6>
 8006e00:	0800bd30 	.word	0x0800bd30
 8006e04:	0800bd3a 	.word	0x0800bd3a
 8006e08:	00000000 	.word	0x00000000
 8006e0c:	08006bbf 	.word	0x08006bbf
 8006e10:	0800bd36 	.word	0x0800bd36

08006e14 <_printf_common>:
 8006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	4616      	mov	r6, r2
 8006e1a:	4698      	mov	r8, r3
 8006e1c:	688a      	ldr	r2, [r1, #8]
 8006e1e:	690b      	ldr	r3, [r1, #16]
 8006e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	bfb8      	it	lt
 8006e28:	4613      	movlt	r3, r2
 8006e2a:	6033      	str	r3, [r6, #0]
 8006e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e30:	4607      	mov	r7, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	b10a      	cbz	r2, 8006e3a <_printf_common+0x26>
 8006e36:	3301      	adds	r3, #1
 8006e38:	6033      	str	r3, [r6, #0]
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	0699      	lsls	r1, r3, #26
 8006e3e:	bf42      	ittt	mi
 8006e40:	6833      	ldrmi	r3, [r6, #0]
 8006e42:	3302      	addmi	r3, #2
 8006e44:	6033      	strmi	r3, [r6, #0]
 8006e46:	6825      	ldr	r5, [r4, #0]
 8006e48:	f015 0506 	ands.w	r5, r5, #6
 8006e4c:	d106      	bne.n	8006e5c <_printf_common+0x48>
 8006e4e:	f104 0a19 	add.w	sl, r4, #25
 8006e52:	68e3      	ldr	r3, [r4, #12]
 8006e54:	6832      	ldr	r2, [r6, #0]
 8006e56:	1a9b      	subs	r3, r3, r2
 8006e58:	42ab      	cmp	r3, r5
 8006e5a:	dc26      	bgt.n	8006eaa <_printf_common+0x96>
 8006e5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e60:	6822      	ldr	r2, [r4, #0]
 8006e62:	3b00      	subs	r3, #0
 8006e64:	bf18      	it	ne
 8006e66:	2301      	movne	r3, #1
 8006e68:	0692      	lsls	r2, r2, #26
 8006e6a:	d42b      	bmi.n	8006ec4 <_printf_common+0xb0>
 8006e6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e70:	4641      	mov	r1, r8
 8006e72:	4638      	mov	r0, r7
 8006e74:	47c8      	blx	r9
 8006e76:	3001      	adds	r0, #1
 8006e78:	d01e      	beq.n	8006eb8 <_printf_common+0xa4>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	6922      	ldr	r2, [r4, #16]
 8006e7e:	f003 0306 	and.w	r3, r3, #6
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	bf02      	ittt	eq
 8006e86:	68e5      	ldreq	r5, [r4, #12]
 8006e88:	6833      	ldreq	r3, [r6, #0]
 8006e8a:	1aed      	subeq	r5, r5, r3
 8006e8c:	68a3      	ldr	r3, [r4, #8]
 8006e8e:	bf0c      	ite	eq
 8006e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e94:	2500      	movne	r5, #0
 8006e96:	4293      	cmp	r3, r2
 8006e98:	bfc4      	itt	gt
 8006e9a:	1a9b      	subgt	r3, r3, r2
 8006e9c:	18ed      	addgt	r5, r5, r3
 8006e9e:	2600      	movs	r6, #0
 8006ea0:	341a      	adds	r4, #26
 8006ea2:	42b5      	cmp	r5, r6
 8006ea4:	d11a      	bne.n	8006edc <_printf_common+0xc8>
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	e008      	b.n	8006ebc <_printf_common+0xa8>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	4652      	mov	r2, sl
 8006eae:	4641      	mov	r1, r8
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	47c8      	blx	r9
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d103      	bne.n	8006ec0 <_printf_common+0xac>
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	e7c6      	b.n	8006e52 <_printf_common+0x3e>
 8006ec4:	18e1      	adds	r1, r4, r3
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	2030      	movs	r0, #48	@ 0x30
 8006eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ece:	4422      	add	r2, r4
 8006ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ed8:	3302      	adds	r3, #2
 8006eda:	e7c7      	b.n	8006e6c <_printf_common+0x58>
 8006edc:	2301      	movs	r3, #1
 8006ede:	4622      	mov	r2, r4
 8006ee0:	4641      	mov	r1, r8
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	47c8      	blx	r9
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d0e6      	beq.n	8006eb8 <_printf_common+0xa4>
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7d9      	b.n	8006ea2 <_printf_common+0x8e>
	...

08006ef0 <_printf_i>:
 8006ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	7e0f      	ldrb	r7, [r1, #24]
 8006ef6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ef8:	2f78      	cmp	r7, #120	@ 0x78
 8006efa:	4691      	mov	r9, r2
 8006efc:	4680      	mov	r8, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	469a      	mov	sl, r3
 8006f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f06:	d807      	bhi.n	8006f18 <_printf_i+0x28>
 8006f08:	2f62      	cmp	r7, #98	@ 0x62
 8006f0a:	d80a      	bhi.n	8006f22 <_printf_i+0x32>
 8006f0c:	2f00      	cmp	r7, #0
 8006f0e:	f000 80d2 	beq.w	80070b6 <_printf_i+0x1c6>
 8006f12:	2f58      	cmp	r7, #88	@ 0x58
 8006f14:	f000 80b9 	beq.w	800708a <_printf_i+0x19a>
 8006f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f20:	e03a      	b.n	8006f98 <_printf_i+0xa8>
 8006f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f26:	2b15      	cmp	r3, #21
 8006f28:	d8f6      	bhi.n	8006f18 <_printf_i+0x28>
 8006f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f30 <_printf_i+0x40>)
 8006f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f30:	08006f89 	.word	0x08006f89
 8006f34:	08006f9d 	.word	0x08006f9d
 8006f38:	08006f19 	.word	0x08006f19
 8006f3c:	08006f19 	.word	0x08006f19
 8006f40:	08006f19 	.word	0x08006f19
 8006f44:	08006f19 	.word	0x08006f19
 8006f48:	08006f9d 	.word	0x08006f9d
 8006f4c:	08006f19 	.word	0x08006f19
 8006f50:	08006f19 	.word	0x08006f19
 8006f54:	08006f19 	.word	0x08006f19
 8006f58:	08006f19 	.word	0x08006f19
 8006f5c:	0800709d 	.word	0x0800709d
 8006f60:	08006fc7 	.word	0x08006fc7
 8006f64:	08007057 	.word	0x08007057
 8006f68:	08006f19 	.word	0x08006f19
 8006f6c:	08006f19 	.word	0x08006f19
 8006f70:	080070bf 	.word	0x080070bf
 8006f74:	08006f19 	.word	0x08006f19
 8006f78:	08006fc7 	.word	0x08006fc7
 8006f7c:	08006f19 	.word	0x08006f19
 8006f80:	08006f19 	.word	0x08006f19
 8006f84:	0800705f 	.word	0x0800705f
 8006f88:	6833      	ldr	r3, [r6, #0]
 8006f8a:	1d1a      	adds	r2, r3, #4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6032      	str	r2, [r6, #0]
 8006f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e09d      	b.n	80070d8 <_printf_i+0x1e8>
 8006f9c:	6833      	ldr	r3, [r6, #0]
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	1d19      	adds	r1, r3, #4
 8006fa2:	6031      	str	r1, [r6, #0]
 8006fa4:	0606      	lsls	r6, r0, #24
 8006fa6:	d501      	bpl.n	8006fac <_printf_i+0xbc>
 8006fa8:	681d      	ldr	r5, [r3, #0]
 8006faa:	e003      	b.n	8006fb4 <_printf_i+0xc4>
 8006fac:	0645      	lsls	r5, r0, #25
 8006fae:	d5fb      	bpl.n	8006fa8 <_printf_i+0xb8>
 8006fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fb4:	2d00      	cmp	r5, #0
 8006fb6:	da03      	bge.n	8006fc0 <_printf_i+0xd0>
 8006fb8:	232d      	movs	r3, #45	@ 0x2d
 8006fba:	426d      	negs	r5, r5
 8006fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fc0:	4859      	ldr	r0, [pc, #356]	@ (8007128 <_printf_i+0x238>)
 8006fc2:	230a      	movs	r3, #10
 8006fc4:	e011      	b.n	8006fea <_printf_i+0xfa>
 8006fc6:	6821      	ldr	r1, [r4, #0]
 8006fc8:	6833      	ldr	r3, [r6, #0]
 8006fca:	0608      	lsls	r0, r1, #24
 8006fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fd0:	d402      	bmi.n	8006fd8 <_printf_i+0xe8>
 8006fd2:	0649      	lsls	r1, r1, #25
 8006fd4:	bf48      	it	mi
 8006fd6:	b2ad      	uxthmi	r5, r5
 8006fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fda:	4853      	ldr	r0, [pc, #332]	@ (8007128 <_printf_i+0x238>)
 8006fdc:	6033      	str	r3, [r6, #0]
 8006fde:	bf14      	ite	ne
 8006fe0:	230a      	movne	r3, #10
 8006fe2:	2308      	moveq	r3, #8
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fea:	6866      	ldr	r6, [r4, #4]
 8006fec:	60a6      	str	r6, [r4, #8]
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	bfa2      	ittt	ge
 8006ff2:	6821      	ldrge	r1, [r4, #0]
 8006ff4:	f021 0104 	bicge.w	r1, r1, #4
 8006ff8:	6021      	strge	r1, [r4, #0]
 8006ffa:	b90d      	cbnz	r5, 8007000 <_printf_i+0x110>
 8006ffc:	2e00      	cmp	r6, #0
 8006ffe:	d04b      	beq.n	8007098 <_printf_i+0x1a8>
 8007000:	4616      	mov	r6, r2
 8007002:	fbb5 f1f3 	udiv	r1, r5, r3
 8007006:	fb03 5711 	mls	r7, r3, r1, r5
 800700a:	5dc7      	ldrb	r7, [r0, r7]
 800700c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007010:	462f      	mov	r7, r5
 8007012:	42bb      	cmp	r3, r7
 8007014:	460d      	mov	r5, r1
 8007016:	d9f4      	bls.n	8007002 <_printf_i+0x112>
 8007018:	2b08      	cmp	r3, #8
 800701a:	d10b      	bne.n	8007034 <_printf_i+0x144>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	07df      	lsls	r7, r3, #31
 8007020:	d508      	bpl.n	8007034 <_printf_i+0x144>
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	6861      	ldr	r1, [r4, #4]
 8007026:	4299      	cmp	r1, r3
 8007028:	bfde      	ittt	le
 800702a:	2330      	movle	r3, #48	@ 0x30
 800702c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007030:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007034:	1b92      	subs	r2, r2, r6
 8007036:	6122      	str	r2, [r4, #16]
 8007038:	f8cd a000 	str.w	sl, [sp]
 800703c:	464b      	mov	r3, r9
 800703e:	aa03      	add	r2, sp, #12
 8007040:	4621      	mov	r1, r4
 8007042:	4640      	mov	r0, r8
 8007044:	f7ff fee6 	bl	8006e14 <_printf_common>
 8007048:	3001      	adds	r0, #1
 800704a:	d14a      	bne.n	80070e2 <_printf_i+0x1f2>
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	b004      	add	sp, #16
 8007052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f043 0320 	orr.w	r3, r3, #32
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	4833      	ldr	r0, [pc, #204]	@ (800712c <_printf_i+0x23c>)
 8007060:	2778      	movs	r7, #120	@ 0x78
 8007062:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	6831      	ldr	r1, [r6, #0]
 800706a:	061f      	lsls	r7, r3, #24
 800706c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007070:	d402      	bmi.n	8007078 <_printf_i+0x188>
 8007072:	065f      	lsls	r7, r3, #25
 8007074:	bf48      	it	mi
 8007076:	b2ad      	uxthmi	r5, r5
 8007078:	6031      	str	r1, [r6, #0]
 800707a:	07d9      	lsls	r1, r3, #31
 800707c:	bf44      	itt	mi
 800707e:	f043 0320 	orrmi.w	r3, r3, #32
 8007082:	6023      	strmi	r3, [r4, #0]
 8007084:	b11d      	cbz	r5, 800708e <_printf_i+0x19e>
 8007086:	2310      	movs	r3, #16
 8007088:	e7ac      	b.n	8006fe4 <_printf_i+0xf4>
 800708a:	4827      	ldr	r0, [pc, #156]	@ (8007128 <_printf_i+0x238>)
 800708c:	e7e9      	b.n	8007062 <_printf_i+0x172>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	f023 0320 	bic.w	r3, r3, #32
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	e7f6      	b.n	8007086 <_printf_i+0x196>
 8007098:	4616      	mov	r6, r2
 800709a:	e7bd      	b.n	8007018 <_printf_i+0x128>
 800709c:	6833      	ldr	r3, [r6, #0]
 800709e:	6825      	ldr	r5, [r4, #0]
 80070a0:	6961      	ldr	r1, [r4, #20]
 80070a2:	1d18      	adds	r0, r3, #4
 80070a4:	6030      	str	r0, [r6, #0]
 80070a6:	062e      	lsls	r6, r5, #24
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	d501      	bpl.n	80070b0 <_printf_i+0x1c0>
 80070ac:	6019      	str	r1, [r3, #0]
 80070ae:	e002      	b.n	80070b6 <_printf_i+0x1c6>
 80070b0:	0668      	lsls	r0, r5, #25
 80070b2:	d5fb      	bpl.n	80070ac <_printf_i+0x1bc>
 80070b4:	8019      	strh	r1, [r3, #0]
 80070b6:	2300      	movs	r3, #0
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	4616      	mov	r6, r2
 80070bc:	e7bc      	b.n	8007038 <_printf_i+0x148>
 80070be:	6833      	ldr	r3, [r6, #0]
 80070c0:	1d1a      	adds	r2, r3, #4
 80070c2:	6032      	str	r2, [r6, #0]
 80070c4:	681e      	ldr	r6, [r3, #0]
 80070c6:	6862      	ldr	r2, [r4, #4]
 80070c8:	2100      	movs	r1, #0
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7f9 f8a8 	bl	8000220 <memchr>
 80070d0:	b108      	cbz	r0, 80070d6 <_printf_i+0x1e6>
 80070d2:	1b80      	subs	r0, r0, r6
 80070d4:	6060      	str	r0, [r4, #4]
 80070d6:	6863      	ldr	r3, [r4, #4]
 80070d8:	6123      	str	r3, [r4, #16]
 80070da:	2300      	movs	r3, #0
 80070dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070e0:	e7aa      	b.n	8007038 <_printf_i+0x148>
 80070e2:	6923      	ldr	r3, [r4, #16]
 80070e4:	4632      	mov	r2, r6
 80070e6:	4649      	mov	r1, r9
 80070e8:	4640      	mov	r0, r8
 80070ea:	47d0      	blx	sl
 80070ec:	3001      	adds	r0, #1
 80070ee:	d0ad      	beq.n	800704c <_printf_i+0x15c>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	079b      	lsls	r3, r3, #30
 80070f4:	d413      	bmi.n	800711e <_printf_i+0x22e>
 80070f6:	68e0      	ldr	r0, [r4, #12]
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	4298      	cmp	r0, r3
 80070fc:	bfb8      	it	lt
 80070fe:	4618      	movlt	r0, r3
 8007100:	e7a6      	b.n	8007050 <_printf_i+0x160>
 8007102:	2301      	movs	r3, #1
 8007104:	4632      	mov	r2, r6
 8007106:	4649      	mov	r1, r9
 8007108:	4640      	mov	r0, r8
 800710a:	47d0      	blx	sl
 800710c:	3001      	adds	r0, #1
 800710e:	d09d      	beq.n	800704c <_printf_i+0x15c>
 8007110:	3501      	adds	r5, #1
 8007112:	68e3      	ldr	r3, [r4, #12]
 8007114:	9903      	ldr	r1, [sp, #12]
 8007116:	1a5b      	subs	r3, r3, r1
 8007118:	42ab      	cmp	r3, r5
 800711a:	dcf2      	bgt.n	8007102 <_printf_i+0x212>
 800711c:	e7eb      	b.n	80070f6 <_printf_i+0x206>
 800711e:	2500      	movs	r5, #0
 8007120:	f104 0619 	add.w	r6, r4, #25
 8007124:	e7f5      	b.n	8007112 <_printf_i+0x222>
 8007126:	bf00      	nop
 8007128:	0800bd41 	.word	0x0800bd41
 800712c:	0800bd52 	.word	0x0800bd52

08007130 <__sflush_r>:
 8007130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007138:	0716      	lsls	r6, r2, #28
 800713a:	4605      	mov	r5, r0
 800713c:	460c      	mov	r4, r1
 800713e:	d454      	bmi.n	80071ea <__sflush_r+0xba>
 8007140:	684b      	ldr	r3, [r1, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	dc02      	bgt.n	800714c <__sflush_r+0x1c>
 8007146:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	dd48      	ble.n	80071de <__sflush_r+0xae>
 800714c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800714e:	2e00      	cmp	r6, #0
 8007150:	d045      	beq.n	80071de <__sflush_r+0xae>
 8007152:	2300      	movs	r3, #0
 8007154:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007158:	682f      	ldr	r7, [r5, #0]
 800715a:	6a21      	ldr	r1, [r4, #32]
 800715c:	602b      	str	r3, [r5, #0]
 800715e:	d030      	beq.n	80071c2 <__sflush_r+0x92>
 8007160:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	0759      	lsls	r1, r3, #29
 8007166:	d505      	bpl.n	8007174 <__sflush_r+0x44>
 8007168:	6863      	ldr	r3, [r4, #4]
 800716a:	1ad2      	subs	r2, r2, r3
 800716c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800716e:	b10b      	cbz	r3, 8007174 <__sflush_r+0x44>
 8007170:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	2300      	movs	r3, #0
 8007176:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007178:	6a21      	ldr	r1, [r4, #32]
 800717a:	4628      	mov	r0, r5
 800717c:	47b0      	blx	r6
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	d106      	bne.n	8007192 <__sflush_r+0x62>
 8007184:	6829      	ldr	r1, [r5, #0]
 8007186:	291d      	cmp	r1, #29
 8007188:	d82b      	bhi.n	80071e2 <__sflush_r+0xb2>
 800718a:	4a2a      	ldr	r2, [pc, #168]	@ (8007234 <__sflush_r+0x104>)
 800718c:	410a      	asrs	r2, r1
 800718e:	07d6      	lsls	r6, r2, #31
 8007190:	d427      	bmi.n	80071e2 <__sflush_r+0xb2>
 8007192:	2200      	movs	r2, #0
 8007194:	6062      	str	r2, [r4, #4]
 8007196:	04d9      	lsls	r1, r3, #19
 8007198:	6922      	ldr	r2, [r4, #16]
 800719a:	6022      	str	r2, [r4, #0]
 800719c:	d504      	bpl.n	80071a8 <__sflush_r+0x78>
 800719e:	1c42      	adds	r2, r0, #1
 80071a0:	d101      	bne.n	80071a6 <__sflush_r+0x76>
 80071a2:	682b      	ldr	r3, [r5, #0]
 80071a4:	b903      	cbnz	r3, 80071a8 <__sflush_r+0x78>
 80071a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80071a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071aa:	602f      	str	r7, [r5, #0]
 80071ac:	b1b9      	cbz	r1, 80071de <__sflush_r+0xae>
 80071ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071b2:	4299      	cmp	r1, r3
 80071b4:	d002      	beq.n	80071bc <__sflush_r+0x8c>
 80071b6:	4628      	mov	r0, r5
 80071b8:	f7ff fca0 	bl	8006afc <_free_r>
 80071bc:	2300      	movs	r3, #0
 80071be:	6363      	str	r3, [r4, #52]	@ 0x34
 80071c0:	e00d      	b.n	80071de <__sflush_r+0xae>
 80071c2:	2301      	movs	r3, #1
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b0      	blx	r6
 80071c8:	4602      	mov	r2, r0
 80071ca:	1c50      	adds	r0, r2, #1
 80071cc:	d1c9      	bne.n	8007162 <__sflush_r+0x32>
 80071ce:	682b      	ldr	r3, [r5, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0c6      	beq.n	8007162 <__sflush_r+0x32>
 80071d4:	2b1d      	cmp	r3, #29
 80071d6:	d001      	beq.n	80071dc <__sflush_r+0xac>
 80071d8:	2b16      	cmp	r3, #22
 80071da:	d11e      	bne.n	800721a <__sflush_r+0xea>
 80071dc:	602f      	str	r7, [r5, #0]
 80071de:	2000      	movs	r0, #0
 80071e0:	e022      	b.n	8007228 <__sflush_r+0xf8>
 80071e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071e6:	b21b      	sxth	r3, r3
 80071e8:	e01b      	b.n	8007222 <__sflush_r+0xf2>
 80071ea:	690f      	ldr	r7, [r1, #16]
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	d0f6      	beq.n	80071de <__sflush_r+0xae>
 80071f0:	0793      	lsls	r3, r2, #30
 80071f2:	680e      	ldr	r6, [r1, #0]
 80071f4:	bf08      	it	eq
 80071f6:	694b      	ldreq	r3, [r1, #20]
 80071f8:	600f      	str	r7, [r1, #0]
 80071fa:	bf18      	it	ne
 80071fc:	2300      	movne	r3, #0
 80071fe:	eba6 0807 	sub.w	r8, r6, r7
 8007202:	608b      	str	r3, [r1, #8]
 8007204:	f1b8 0f00 	cmp.w	r8, #0
 8007208:	dde9      	ble.n	80071de <__sflush_r+0xae>
 800720a:	6a21      	ldr	r1, [r4, #32]
 800720c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800720e:	4643      	mov	r3, r8
 8007210:	463a      	mov	r2, r7
 8007212:	4628      	mov	r0, r5
 8007214:	47b0      	blx	r6
 8007216:	2800      	cmp	r0, #0
 8007218:	dc08      	bgt.n	800722c <__sflush_r+0xfc>
 800721a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800722c:	4407      	add	r7, r0
 800722e:	eba8 0800 	sub.w	r8, r8, r0
 8007232:	e7e7      	b.n	8007204 <__sflush_r+0xd4>
 8007234:	dfbffffe 	.word	0xdfbffffe

08007238 <_fflush_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	4605      	mov	r5, r0
 800723e:	460c      	mov	r4, r1
 8007240:	b913      	cbnz	r3, 8007248 <_fflush_r+0x10>
 8007242:	2500      	movs	r5, #0
 8007244:	4628      	mov	r0, r5
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	b118      	cbz	r0, 8007252 <_fflush_r+0x1a>
 800724a:	6a03      	ldr	r3, [r0, #32]
 800724c:	b90b      	cbnz	r3, 8007252 <_fflush_r+0x1a>
 800724e:	f7ff fb29 	bl	80068a4 <__sinit>
 8007252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0f3      	beq.n	8007242 <_fflush_r+0xa>
 800725a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800725c:	07d0      	lsls	r0, r2, #31
 800725e:	d404      	bmi.n	800726a <_fflush_r+0x32>
 8007260:	0599      	lsls	r1, r3, #22
 8007262:	d402      	bmi.n	800726a <_fflush_r+0x32>
 8007264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007266:	f7ff fc32 	bl	8006ace <__retarget_lock_acquire_recursive>
 800726a:	4628      	mov	r0, r5
 800726c:	4621      	mov	r1, r4
 800726e:	f7ff ff5f 	bl	8007130 <__sflush_r>
 8007272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007274:	07da      	lsls	r2, r3, #31
 8007276:	4605      	mov	r5, r0
 8007278:	d4e4      	bmi.n	8007244 <_fflush_r+0xc>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	059b      	lsls	r3, r3, #22
 800727e:	d4e1      	bmi.n	8007244 <_fflush_r+0xc>
 8007280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007282:	f7ff fc25 	bl	8006ad0 <__retarget_lock_release_recursive>
 8007286:	e7dd      	b.n	8007244 <_fflush_r+0xc>

08007288 <__swbuf_r>:
 8007288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728a:	460e      	mov	r6, r1
 800728c:	4614      	mov	r4, r2
 800728e:	4605      	mov	r5, r0
 8007290:	b118      	cbz	r0, 800729a <__swbuf_r+0x12>
 8007292:	6a03      	ldr	r3, [r0, #32]
 8007294:	b90b      	cbnz	r3, 800729a <__swbuf_r+0x12>
 8007296:	f7ff fb05 	bl	80068a4 <__sinit>
 800729a:	69a3      	ldr	r3, [r4, #24]
 800729c:	60a3      	str	r3, [r4, #8]
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	071a      	lsls	r2, r3, #28
 80072a2:	d501      	bpl.n	80072a8 <__swbuf_r+0x20>
 80072a4:	6923      	ldr	r3, [r4, #16]
 80072a6:	b943      	cbnz	r3, 80072ba <__swbuf_r+0x32>
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 f82a 	bl	8007304 <__swsetup_r>
 80072b0:	b118      	cbz	r0, 80072ba <__swbuf_r+0x32>
 80072b2:	f04f 37ff 	mov.w	r7, #4294967295
 80072b6:	4638      	mov	r0, r7
 80072b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	6922      	ldr	r2, [r4, #16]
 80072be:	1a98      	subs	r0, r3, r2
 80072c0:	6963      	ldr	r3, [r4, #20]
 80072c2:	b2f6      	uxtb	r6, r6
 80072c4:	4283      	cmp	r3, r0
 80072c6:	4637      	mov	r7, r6
 80072c8:	dc05      	bgt.n	80072d6 <__swbuf_r+0x4e>
 80072ca:	4621      	mov	r1, r4
 80072cc:	4628      	mov	r0, r5
 80072ce:	f7ff ffb3 	bl	8007238 <_fflush_r>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d1ed      	bne.n	80072b2 <__swbuf_r+0x2a>
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	3b01      	subs	r3, #1
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	701e      	strb	r6, [r3, #0]
 80072e4:	6962      	ldr	r2, [r4, #20]
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d004      	beq.n	80072f6 <__swbuf_r+0x6e>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	07db      	lsls	r3, r3, #31
 80072f0:	d5e1      	bpl.n	80072b6 <__swbuf_r+0x2e>
 80072f2:	2e0a      	cmp	r6, #10
 80072f4:	d1df      	bne.n	80072b6 <__swbuf_r+0x2e>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f7ff ff9d 	bl	8007238 <_fflush_r>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d0d9      	beq.n	80072b6 <__swbuf_r+0x2e>
 8007302:	e7d6      	b.n	80072b2 <__swbuf_r+0x2a>

08007304 <__swsetup_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4b29      	ldr	r3, [pc, #164]	@ (80073ac <__swsetup_r+0xa8>)
 8007308:	4605      	mov	r5, r0
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	460c      	mov	r4, r1
 800730e:	b118      	cbz	r0, 8007318 <__swsetup_r+0x14>
 8007310:	6a03      	ldr	r3, [r0, #32]
 8007312:	b90b      	cbnz	r3, 8007318 <__swsetup_r+0x14>
 8007314:	f7ff fac6 	bl	80068a4 <__sinit>
 8007318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800731c:	0719      	lsls	r1, r3, #28
 800731e:	d422      	bmi.n	8007366 <__swsetup_r+0x62>
 8007320:	06da      	lsls	r2, r3, #27
 8007322:	d407      	bmi.n	8007334 <__swsetup_r+0x30>
 8007324:	2209      	movs	r2, #9
 8007326:	602a      	str	r2, [r5, #0]
 8007328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800732c:	81a3      	strh	r3, [r4, #12]
 800732e:	f04f 30ff 	mov.w	r0, #4294967295
 8007332:	e033      	b.n	800739c <__swsetup_r+0x98>
 8007334:	0758      	lsls	r0, r3, #29
 8007336:	d512      	bpl.n	800735e <__swsetup_r+0x5a>
 8007338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800733a:	b141      	cbz	r1, 800734e <__swsetup_r+0x4a>
 800733c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007340:	4299      	cmp	r1, r3
 8007342:	d002      	beq.n	800734a <__swsetup_r+0x46>
 8007344:	4628      	mov	r0, r5
 8007346:	f7ff fbd9 	bl	8006afc <_free_r>
 800734a:	2300      	movs	r3, #0
 800734c:	6363      	str	r3, [r4, #52]	@ 0x34
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	2300      	movs	r3, #0
 8007358:	6063      	str	r3, [r4, #4]
 800735a:	6923      	ldr	r3, [r4, #16]
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	f043 0308 	orr.w	r3, r3, #8
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	b94b      	cbnz	r3, 800737e <__swsetup_r+0x7a>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007374:	d003      	beq.n	800737e <__swsetup_r+0x7a>
 8007376:	4621      	mov	r1, r4
 8007378:	4628      	mov	r0, r5
 800737a:	f000 f883 	bl	8007484 <__smakebuf_r>
 800737e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007382:	f013 0201 	ands.w	r2, r3, #1
 8007386:	d00a      	beq.n	800739e <__swsetup_r+0x9a>
 8007388:	2200      	movs	r2, #0
 800738a:	60a2      	str	r2, [r4, #8]
 800738c:	6962      	ldr	r2, [r4, #20]
 800738e:	4252      	negs	r2, r2
 8007390:	61a2      	str	r2, [r4, #24]
 8007392:	6922      	ldr	r2, [r4, #16]
 8007394:	b942      	cbnz	r2, 80073a8 <__swsetup_r+0xa4>
 8007396:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800739a:	d1c5      	bne.n	8007328 <__swsetup_r+0x24>
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	0799      	lsls	r1, r3, #30
 80073a0:	bf58      	it	pl
 80073a2:	6962      	ldrpl	r2, [r4, #20]
 80073a4:	60a2      	str	r2, [r4, #8]
 80073a6:	e7f4      	b.n	8007392 <__swsetup_r+0x8e>
 80073a8:	2000      	movs	r0, #0
 80073aa:	e7f7      	b.n	800739c <__swsetup_r+0x98>
 80073ac:	20000018 	.word	0x20000018

080073b0 <_raise_r>:
 80073b0:	291f      	cmp	r1, #31
 80073b2:	b538      	push	{r3, r4, r5, lr}
 80073b4:	4605      	mov	r5, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	d904      	bls.n	80073c4 <_raise_r+0x14>
 80073ba:	2316      	movs	r3, #22
 80073bc:	6003      	str	r3, [r0, #0]
 80073be:	f04f 30ff 	mov.w	r0, #4294967295
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80073c6:	b112      	cbz	r2, 80073ce <_raise_r+0x1e>
 80073c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073cc:	b94b      	cbnz	r3, 80073e2 <_raise_r+0x32>
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 f830 	bl	8007434 <_getpid_r>
 80073d4:	4622      	mov	r2, r4
 80073d6:	4601      	mov	r1, r0
 80073d8:	4628      	mov	r0, r5
 80073da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073de:	f000 b817 	b.w	8007410 <_kill_r>
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d00a      	beq.n	80073fc <_raise_r+0x4c>
 80073e6:	1c59      	adds	r1, r3, #1
 80073e8:	d103      	bne.n	80073f2 <_raise_r+0x42>
 80073ea:	2316      	movs	r3, #22
 80073ec:	6003      	str	r3, [r0, #0]
 80073ee:	2001      	movs	r0, #1
 80073f0:	e7e7      	b.n	80073c2 <_raise_r+0x12>
 80073f2:	2100      	movs	r1, #0
 80073f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80073f8:	4620      	mov	r0, r4
 80073fa:	4798      	blx	r3
 80073fc:	2000      	movs	r0, #0
 80073fe:	e7e0      	b.n	80073c2 <_raise_r+0x12>

08007400 <raise>:
 8007400:	4b02      	ldr	r3, [pc, #8]	@ (800740c <raise+0xc>)
 8007402:	4601      	mov	r1, r0
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	f7ff bfd3 	b.w	80073b0 <_raise_r>
 800740a:	bf00      	nop
 800740c:	20000018 	.word	0x20000018

08007410 <_kill_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d07      	ldr	r5, [pc, #28]	@ (8007430 <_kill_r+0x20>)
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	4611      	mov	r1, r2
 800741c:	602b      	str	r3, [r5, #0]
 800741e:	f7fa f9aa 	bl	8001776 <_kill>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d102      	bne.n	800742c <_kill_r+0x1c>
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	b103      	cbz	r3, 800742c <_kill_r+0x1c>
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	bd38      	pop	{r3, r4, r5, pc}
 800742e:	bf00      	nop
 8007430:	20000c98 	.word	0x20000c98

08007434 <_getpid_r>:
 8007434:	f7fa b997 	b.w	8001766 <_getpid>

08007438 <__swhatbuf_r>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	460c      	mov	r4, r1
 800743c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007440:	2900      	cmp	r1, #0
 8007442:	b096      	sub	sp, #88	@ 0x58
 8007444:	4615      	mov	r5, r2
 8007446:	461e      	mov	r6, r3
 8007448:	da0d      	bge.n	8007466 <__swhatbuf_r+0x2e>
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007450:	f04f 0100 	mov.w	r1, #0
 8007454:	bf14      	ite	ne
 8007456:	2340      	movne	r3, #64	@ 0x40
 8007458:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800745c:	2000      	movs	r0, #0
 800745e:	6031      	str	r1, [r6, #0]
 8007460:	602b      	str	r3, [r5, #0]
 8007462:	b016      	add	sp, #88	@ 0x58
 8007464:	bd70      	pop	{r4, r5, r6, pc}
 8007466:	466a      	mov	r2, sp
 8007468:	f000 f848 	bl	80074fc <_fstat_r>
 800746c:	2800      	cmp	r0, #0
 800746e:	dbec      	blt.n	800744a <__swhatbuf_r+0x12>
 8007470:	9901      	ldr	r1, [sp, #4]
 8007472:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007476:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800747a:	4259      	negs	r1, r3
 800747c:	4159      	adcs	r1, r3
 800747e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007482:	e7eb      	b.n	800745c <__swhatbuf_r+0x24>

08007484 <__smakebuf_r>:
 8007484:	898b      	ldrh	r3, [r1, #12]
 8007486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007488:	079d      	lsls	r5, r3, #30
 800748a:	4606      	mov	r6, r0
 800748c:	460c      	mov	r4, r1
 800748e:	d507      	bpl.n	80074a0 <__smakebuf_r+0x1c>
 8007490:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	6123      	str	r3, [r4, #16]
 8007498:	2301      	movs	r3, #1
 800749a:	6163      	str	r3, [r4, #20]
 800749c:	b003      	add	sp, #12
 800749e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074a0:	ab01      	add	r3, sp, #4
 80074a2:	466a      	mov	r2, sp
 80074a4:	f7ff ffc8 	bl	8007438 <__swhatbuf_r>
 80074a8:	9f00      	ldr	r7, [sp, #0]
 80074aa:	4605      	mov	r5, r0
 80074ac:	4639      	mov	r1, r7
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff f8e0 	bl	8006674 <_malloc_r>
 80074b4:	b948      	cbnz	r0, 80074ca <__smakebuf_r+0x46>
 80074b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ba:	059a      	lsls	r2, r3, #22
 80074bc:	d4ee      	bmi.n	800749c <__smakebuf_r+0x18>
 80074be:	f023 0303 	bic.w	r3, r3, #3
 80074c2:	f043 0302 	orr.w	r3, r3, #2
 80074c6:	81a3      	strh	r3, [r4, #12]
 80074c8:	e7e2      	b.n	8007490 <__smakebuf_r+0xc>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	6020      	str	r0, [r4, #0]
 80074ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	9b01      	ldr	r3, [sp, #4]
 80074d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074da:	b15b      	cbz	r3, 80074f4 <__smakebuf_r+0x70>
 80074dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e0:	4630      	mov	r0, r6
 80074e2:	f000 f81d 	bl	8007520 <_isatty_r>
 80074e6:	b128      	cbz	r0, 80074f4 <__smakebuf_r+0x70>
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	f023 0303 	bic.w	r3, r3, #3
 80074ee:	f043 0301 	orr.w	r3, r3, #1
 80074f2:	81a3      	strh	r3, [r4, #12]
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	431d      	orrs	r5, r3
 80074f8:	81a5      	strh	r5, [r4, #12]
 80074fa:	e7cf      	b.n	800749c <__smakebuf_r+0x18>

080074fc <_fstat_r>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	4d07      	ldr	r5, [pc, #28]	@ (800751c <_fstat_r+0x20>)
 8007500:	2300      	movs	r3, #0
 8007502:	4604      	mov	r4, r0
 8007504:	4608      	mov	r0, r1
 8007506:	4611      	mov	r1, r2
 8007508:	602b      	str	r3, [r5, #0]
 800750a:	f7fa f994 	bl	8001836 <_fstat>
 800750e:	1c43      	adds	r3, r0, #1
 8007510:	d102      	bne.n	8007518 <_fstat_r+0x1c>
 8007512:	682b      	ldr	r3, [r5, #0]
 8007514:	b103      	cbz	r3, 8007518 <_fstat_r+0x1c>
 8007516:	6023      	str	r3, [r4, #0]
 8007518:	bd38      	pop	{r3, r4, r5, pc}
 800751a:	bf00      	nop
 800751c:	20000c98 	.word	0x20000c98

08007520 <_isatty_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4d06      	ldr	r5, [pc, #24]	@ (800753c <_isatty_r+0x1c>)
 8007524:	2300      	movs	r3, #0
 8007526:	4604      	mov	r4, r0
 8007528:	4608      	mov	r0, r1
 800752a:	602b      	str	r3, [r5, #0]
 800752c:	f7fa f993 	bl	8001856 <_isatty>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d102      	bne.n	800753a <_isatty_r+0x1a>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	b103      	cbz	r3, 800753a <_isatty_r+0x1a>
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	20000c98 	.word	0x20000c98

08007540 <_init>:
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007542:	bf00      	nop
 8007544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007546:	bc08      	pop	{r3}
 8007548:	469e      	mov	lr, r3
 800754a:	4770      	bx	lr

0800754c <_fini>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	bf00      	nop
 8007550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007552:	bc08      	pop	{r3}
 8007554:	469e      	mov	lr, r3
 8007556:	4770      	bx	lr
