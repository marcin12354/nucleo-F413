
LCD_test_F413.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002734  080082a4  080082a4  000092a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d8  0800a9d8  0000c068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d8  0800a9d8  0000b9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e0  0800a9e0  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e0  0800a9e0  0000b9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9e4  0800a9e4  0000b9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800a9e8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c60  20000068  0800aa50  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc8  0800aa50  0000ccc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fc99  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c49  00000000  00000000  0004bd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c28  00000000  00000000  00050980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000210b  00000000  00000000  000535a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252c9  00000000  00000000  000556b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000209b7  00000000  00000000  0007a97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de82c  00000000  00000000  0009b333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179b5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c6dc  00000000  00000000  00179ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00186280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800828c 	.word	0x0800828c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800828c 	.word	0x0800828c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <kbd_timer>:
//******************************************
// Timer for keyboard function
//******************************************
#define KBD_TIMER_TIME 50

void kbd_timer (void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	uint8_t static timer = 0;
	 timer++;
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <kbd_timer+0x28>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <kbd_timer+0x28>)
 80005be:	701a      	strb	r2, [r3, #0]
	 if (timer == KBD_TIMER_TIME){
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <kbd_timer+0x28>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b32      	cmp	r3, #50	@ 0x32
 80005c6:	d105      	bne.n	80005d4 <kbd_timer+0x24>
		 timer = 0;
 80005c8:	4b03      	ldr	r3, [pc, #12]	@ (80005d8 <kbd_timer+0x28>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
		 kbd_proc(&kbd);
 80005ce:	4803      	ldr	r0, [pc, #12]	@ (80005dc <kbd_timer+0x2c>)
 80005d0:	f001 f864 	bl	800169c <kbd_proc>
	 }
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200001b9 	.word	0x200001b9
 80005dc:	20000084 	.word	0x20000084

080005e0 <app_is_display_timeout>:
#define APP_DISPLAY_TIMER_TIME 20

uint16_t volatile app_display_timer = 0;
uint16_t volatile app_display_timer_flag = 0;

uint8_t app_is_display_timeout(void) {
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	if (app_display_timer_flag == 1) {
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <app_is_display_timeout+0x24>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d104      	bne.n	80005f8 <app_is_display_timeout+0x18>
		app_display_timer_flag = 0;
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <app_is_display_timeout+0x24>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	801a      	strh	r2, [r3, #0]
		return 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	e000      	b.n	80005fa <app_is_display_timeout+0x1a>
	}
	return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	20000166 	.word	0x20000166

08000608 <app_display_timer_proc>:

void app_display_timer_proc(void){
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	app_display_timer++;
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <app_display_timer_proc+0x34>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	b29b      	uxth	r3, r3
 8000612:	3301      	adds	r3, #1
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <app_display_timer_proc+0x34>)
 8000618:	801a      	strh	r2, [r3, #0]
	if (app_display_timer == APP_DISPLAY_TIMER_TIME){
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <app_display_timer_proc+0x34>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	b29b      	uxth	r3, r3
 8000620:	2b14      	cmp	r3, #20
 8000622:	d105      	bne.n	8000630 <app_display_timer_proc+0x28>
		app_display_timer = 0;
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <app_display_timer_proc+0x34>)
 8000626:	2200      	movs	r2, #0
 8000628:	801a      	strh	r2, [r3, #0]
		app_display_timer_flag = 1;
 800062a:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <app_display_timer_proc+0x38>)
 800062c:	2201      	movs	r2, #1
 800062e:	801a      	strh	r2, [r3, #0]
	}


}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000164 	.word	0x20000164
 8000640:	20000166 	.word	0x20000166

08000644 <app_tick_init>:
	uint8_t index;
}app_tick_calback_s;

app_tick_calback_s publisher;

void app_tick_init(void){	//find better name for this
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	publisher.index = 0;
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <app_tick_init+0x18>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000168 	.word	0x20000168

08000660 <app_register_tick_callback>:

uint8_t app_register_tick_callback(app_tick_callback callback) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	if (publisher.index < APP_TICK_CALLBACK_TABLE_SIZE) {
 8000668:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <app_register_tick_callback+0x44>)
 800066a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800066e:	2b09      	cmp	r3, #9
 8000670:	d811      	bhi.n	8000696 <app_register_tick_callback+0x36>
		publisher.table[publisher.index] = callback;
 8000672:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <app_register_tick_callback+0x44>)
 8000674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000678:	4619      	mov	r1, r3
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <app_register_tick_callback+0x44>)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		publisher.index++;
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <app_register_tick_callback+0x44>)
 8000684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000688:	3301      	adds	r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <app_register_tick_callback+0x44>)
 800068e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		return 1;
 8000692:	2301      	movs	r3, #1
 8000694:	e000      	b.n	8000698 <app_register_tick_callback+0x38>
	} else {
		return 0; //ERROR
 8000696:	2300      	movs	r3, #0
	}
}
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000168 	.word	0x20000168

080006a8 <app_ticks>:

void app_ticks (void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	if (publisher.index != 0) {
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <app_ticks+0x48>)
 80006b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d016      	beq.n	80006e6 <app_ticks+0x3e>
		for (uint8_t i = 0; i <= publisher.index; i++) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	e00d      	b.n	80006da <app_ticks+0x32>
			if (publisher.table[i] != 0) {
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4a0b      	ldr	r2, [pc, #44]	@ (80006f0 <app_ticks+0x48>)
 80006c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d004      	beq.n	80006d4 <app_ticks+0x2c>
				publisher.table[i]();
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <app_ticks+0x48>)
 80006ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d2:	4798      	blx	r3
		for (uint8_t i = 0; i <= publisher.index; i++) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	3301      	adds	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <app_ticks+0x48>)
 80006dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d9eb      	bls.n	80006be <app_ticks+0x16>
			}
		}
	}
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000168 	.word	0x20000168

080006f4 <kbd_return_key_char>:

#define MESAGE_ENC_BUFFOR_SIZE 5

// Returns ASCII code for pressed key

char kbd_return_key_char(kbd_msg_t key){
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
	char out;
	switch (key) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b0a      	cmp	r3, #10
 8000702:	d83a      	bhi.n	800077a <kbd_return_key_char+0x86>
 8000704:	a201      	add	r2, pc, #4	@ (adr r2, 800070c <kbd_return_key_char+0x18>)
 8000706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070a:	bf00      	nop
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073f 	.word	0x0800073f
 8000714:	08000745 	.word	0x08000745
 8000718:	0800074b 	.word	0x0800074b
 800071c:	08000751 	.word	0x08000751
 8000720:	08000757 	.word	0x08000757
 8000724:	0800075d 	.word	0x0800075d
 8000728:	08000763 	.word	0x08000763
 800072c:	08000769 	.word	0x08000769
 8000730:	0800076f 	.word	0x0800076f
 8000734:	08000775 	.word	0x08000775
	case KBD_MSG_SW_0:	out = '0'; break;
 8000738:	2330      	movs	r3, #48	@ 0x30
 800073a:	73fb      	strb	r3, [r7, #15]
 800073c:	e020      	b.n	8000780 <kbd_return_key_char+0x8c>
	case KBD_MSG_SW_1:	out = '1'; break;
 800073e:	2331      	movs	r3, #49	@ 0x31
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	e01d      	b.n	8000780 <kbd_return_key_char+0x8c>
	case KBD_MSG_SW_2:	out = '2'; break;
 8000744:	2332      	movs	r3, #50	@ 0x32
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	e01a      	b.n	8000780 <kbd_return_key_char+0x8c>
	case KBD_MSG_SW_3:	out = '3'; break;
 800074a:	2333      	movs	r3, #51	@ 0x33
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e017      	b.n	8000780 <kbd_return_key_char+0x8c>
	case KBD_MSG_SW_4:	out = '4'; break;
 8000750:	2334      	movs	r3, #52	@ 0x34
 8000752:	73fb      	strb	r3, [r7, #15]
 8000754:	e014      	b.n	8000780 <kbd_return_key_char+0x8c>
	case KBD_MSG_SW_5:	out = '5'; break;
 8000756:	2335      	movs	r3, #53	@ 0x35
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e011      	b.n	8000780 <kbd_return_key_char+0x8c>
	case KBD_MSG_SW_6:	out = '6'; break;
 800075c:	2336      	movs	r3, #54	@ 0x36
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e00e      	b.n	8000780 <kbd_return_key_char+0x8c>
	case KBD_MSG_SW_7:	out = '7'; break;
 8000762:	2337      	movs	r3, #55	@ 0x37
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e00b      	b.n	8000780 <kbd_return_key_char+0x8c>
	case KBD_MSG_SW_8:	out = '8'; break;
 8000768:	2338      	movs	r3, #56	@ 0x38
 800076a:	73fb      	strb	r3, [r7, #15]
 800076c:	e008      	b.n	8000780 <kbd_return_key_char+0x8c>
	case KBD_MSG_SW_9:	out = '9'; break;
 800076e:	2339      	movs	r3, #57	@ 0x39
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	e005      	b.n	8000780 <kbd_return_key_char+0x8c>
	case KBD_MSG_DOT:	out = '.'; break;
 8000774:	232e      	movs	r3, #46	@ 0x2e
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e002      	b.n	8000780 <kbd_return_key_char+0x8c>
	default:   			out = 0; break;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	bf00      	nop
	}
	return out;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <state_machine>:

void state_machine_init(){
	state.psu_mode = DISP_PSU_NORMAL;
}

void state_machine(void){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

	kbd_msg_t msg = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]
	if (circular_buf_empty(kbd_enc_queue)) {
 800079a:	4b5e      	ldr	r3, [pc, #376]	@ (8000914 <state_machine+0x184>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fbec 	bl	8000f7c <circular_buf_empty>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f040 80a9 	bne.w	80008fe <state_machine+0x16e>
		return;
	}
	circular_buf_get(kbd_enc_queue,(uint8_t*)&msg);
 80007ac:	4b59      	ldr	r3, [pc, #356]	@ (8000914 <state_machine+0x184>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1dfa      	adds	r2, r7, #7
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fb9d 	bl	8000ef4 <circular_buf_get>
		// changing window enable disable output

	}


	switch (state.psu_mode) {
 80007ba:	4b57      	ldr	r3, [pc, #348]	@ (8000918 <state_machine+0x188>)
 80007bc:	785b      	ldrb	r3, [r3, #1]
 80007be:	2b03      	cmp	r3, #3
 80007c0:	f200 809f 	bhi.w	8000902 <state_machine+0x172>
 80007c4:	a201      	add	r2, pc, #4	@ (adr r2, 80007cc <state_machine+0x3c>)
 80007c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ca:	bf00      	nop
 80007cc:	080007dd 	.word	0x080007dd
 80007d0:	0800080d 	.word	0x0800080d
 80007d4:	080008c9 	.word	0x080008c9
 80007d8:	08000903 	.word	0x08000903
	case DISP_PSU_NORMAL:
		if (msg == KBD_MSG_SW_SET_VOLTAGE) {
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b0d      	cmp	r3, #13
 80007e0:	d107      	bne.n	80007f2 <state_machine+0x62>
			state.psu_mode = DISP_PSU_SET_V;
 80007e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000918 <state_machine+0x188>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	705a      	strb	r2, [r3, #1]
			gui_textbox_setFrameType(&gui_TB_voltage, ROUNDED_FILLED_RECT, 2);
 80007e8:	2202      	movs	r2, #2
 80007ea:	2104      	movs	r1, #4
 80007ec:	484b      	ldr	r0, [pc, #300]	@ (800091c <state_machine+0x18c>)
 80007ee:	f000 fd21 	bl	8001234 <gui_textbox_setFrameType>
			// changing window
		}
		if (msg == KBD_MSG_SW_SET_CURRENT_LIMIT) {
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b0e      	cmp	r3, #14
 80007f6:	f040 8086 	bne.w	8000906 <state_machine+0x176>
			state.psu_mode = DISP_PSU_SET_I;
 80007fa:	4b47      	ldr	r3, [pc, #284]	@ (8000918 <state_machine+0x188>)
 80007fc:	2203      	movs	r2, #3
 80007fe:	705a      	strb	r2, [r3, #1]
			gui_textbox_setFrameType(&gui_TB_current_limit, ROUNDED_FILLED_RECT, 2);
 8000800:	2202      	movs	r2, #2
 8000802:	2104      	movs	r1, #4
 8000804:	4846      	ldr	r0, [pc, #280]	@ (8000920 <state_machine+0x190>)
 8000806:	f000 fd15 	bl	8001234 <gui_textbox_setFrameType>
			// changing window
		}
		break;
 800080a:	e07c      	b.n	8000906 <state_machine+0x176>
			// Decrees output voltage
		}
		if (msg == ENCODER_SW) {
			// Toggle fine coarse adjustments
		}
		if(msg == KBD_MSG_SW_ESC){
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b0c      	cmp	r3, #12
 8000810:	d107      	bne.n	8000822 <state_machine+0x92>
			state.psu_mode = DISP_PSU_NORMAL;
 8000812:	4b41      	ldr	r3, [pc, #260]	@ (8000918 <state_machine+0x188>)
 8000814:	2200      	movs	r2, #0
 8000816:	705a      	strb	r2, [r3, #1]
			gui_textbox_setFrameType(&gui_TB_current_limit, ROUNDED_RECT, 2);
 8000818:	2202      	movs	r2, #2
 800081a:	2103      	movs	r1, #3
 800081c:	4840      	ldr	r0, [pc, #256]	@ (8000920 <state_machine+0x190>)
 800081e:	f000 fd09 	bl	8001234 <gui_textbox_setFrameType>
		}
		if (msg == KBD_MSG_SW_ENTER) {
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b0b      	cmp	r3, #11
 8000826:	d107      	bne.n	8000838 <state_machine+0xa8>
			state.psu_mode = DISP_PSU_NORMAL;
 8000828:	4b3b      	ldr	r3, [pc, #236]	@ (8000918 <state_machine+0x188>)
 800082a:	2200      	movs	r2, #0
 800082c:	705a      	strb	r2, [r3, #1]
			gui_textbox_setFrameType(&gui_TB_current_limit, ROUNDED_RECT, 2);
 800082e:	2202      	movs	r2, #2
 8000830:	2103      	movs	r1, #3
 8000832:	483b      	ldr	r0, [pc, #236]	@ (8000920 <state_machine+0x190>)
 8000834:	f000 fcfe 	bl	8001234 <gui_textbox_setFrameType>
		}
		if (kbd_return_key_char(msg)){
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff5a 	bl	80006f4 <kbd_return_key_char>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d061      	beq.n	800090a <state_machine+0x17a>

			memset(state.backup_buffor,0,10);
 8000846:	220a      	movs	r2, #10
 8000848:	2100      	movs	r1, #0
 800084a:	4836      	ldr	r0, [pc, #216]	@ (8000924 <state_machine+0x194>)
 800084c:	f006 ff49 	bl	80076e2 <memset>
			strncpy(state.backup_buffor,gui_TB_voltage.str,10);
 8000850:	4b32      	ldr	r3, [pc, #200]	@ (800091c <state_machine+0x18c>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	220a      	movs	r2, #10
 8000856:	4619      	mov	r1, r3
 8000858:	4832      	ldr	r0, [pc, #200]	@ (8000924 <state_machine+0x194>)
 800085a:	f006 ff4a 	bl	80076f2 <strncpy>


			gui_textbox_deleteText(&gui_TB_voltage);
 800085e:	482f      	ldr	r0, [pc, #188]	@ (800091c <state_machine+0x18c>)
 8000860:	f000 fc6a 	bl	8001138 <gui_textbox_deleteText>
			if (kbd_return_key_char(msg) == '.'){
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff44 	bl	80006f4 <kbd_return_key_char>
 800086c:	4603      	mov	r3, r0
 800086e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000870:	d103      	bne.n	800087a <state_machine+0xea>
				gui_textbox_addChar(&gui_TB_voltage, '0');
 8000872:	2130      	movs	r1, #48	@ 0x30
 8000874:	4829      	ldr	r0, [pc, #164]	@ (800091c <state_machine+0x18c>)
 8000876:	f000 fc35 	bl	80010e4 <gui_textbox_addChar>
			}
			gui_textbox_addChar(&gui_TB_voltage, kbd_return_key_char(msg));
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff39 	bl	80006f4 <kbd_return_key_char>
 8000882:	4603      	mov	r3, r0
 8000884:	4619      	mov	r1, r3
 8000886:	4825      	ldr	r0, [pc, #148]	@ (800091c <state_machine+0x18c>)
 8000888:	f000 fc2c 	bl	80010e4 <gui_textbox_addChar>
			gui_textbox_addChar(&gui_TB_voltage, ' ');
 800088c:	2120      	movs	r1, #32
 800088e:	4823      	ldr	r0, [pc, #140]	@ (800091c <state_machine+0x18c>)
 8000890:	f000 fc28 	bl	80010e4 <gui_textbox_addChar>
			gui_textbox_addChar(&gui_TB_voltage, 'V');
 8000894:	2156      	movs	r1, #86	@ 0x56
 8000896:	4821      	ldr	r0, [pc, #132]	@ (800091c <state_machine+0x18c>)
 8000898:	f000 fc24 	bl	80010e4 <gui_textbox_addChar>
			gui_textbox_setCursorPos(&gui_TB_voltage, CURSOR_POSSITION, kbd_return_key_char(msg)=='.'? 2 : 1);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff28 	bl	80006f4 <kbd_return_key_char>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80008a8:	d101      	bne.n	80008ae <state_machine+0x11e>
 80008aa:	2302      	movs	r3, #2
 80008ac:	e000      	b.n	80008b0 <state_machine+0x120>
 80008ae:	2301      	movs	r3, #1
 80008b0:	461a      	mov	r2, r3
 80008b2:	2102      	movs	r1, #2
 80008b4:	4819      	ldr	r0, [pc, #100]	@ (800091c <state_machine+0x18c>)
 80008b6:	f000 fc72 	bl	800119e <gui_textbox_setCursorPos>
			gui_TB_voltage.cursor_blink_mode = BLINK_BAR; // a function needed
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <state_machine+0x18c>)
 80008bc:	2220      	movs	r2, #32
 80008be:	731a      	strb	r2, [r3, #12]
			//gui_textbox_
			state.psu_mode = DISP_PSU_SET_V_KBD;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <state_machine+0x188>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	705a      	strb	r2, [r3, #1]
		}
		break;
 80008c6:	e020      	b.n	800090a <state_machine+0x17a>
			// Decrees output voltage
		}
		if (msg == ENCODER_SW) {
			// Toggle fine coarse adjustments
		}
		if (msg == KBD_MSG_SW_ESC) {
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b0c      	cmp	r3, #12
 80008cc:	d107      	bne.n	80008de <state_machine+0x14e>
			state.psu_mode = DISP_PSU_NORMAL;
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <state_machine+0x188>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	705a      	strb	r2, [r3, #1]
			gui_textbox_setFrameType(&gui_TB_current_limit, ROUNDED_RECT, 2);
 80008d4:	2202      	movs	r2, #2
 80008d6:	2103      	movs	r1, #3
 80008d8:	4811      	ldr	r0, [pc, #68]	@ (8000920 <state_machine+0x190>)
 80008da:	f000 fcab 	bl	8001234 <gui_textbox_setFrameType>
		}
		if (msg == KBD_MSG_SW_ENTER) {
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b0b      	cmp	r3, #11
 80008e2:	d107      	bne.n	80008f4 <state_machine+0x164>
			state.psu_mode = DISP_PSU_NORMAL;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <state_machine+0x188>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	705a      	strb	r2, [r3, #1]
			gui_textbox_setFrameType(&gui_TB_current_limit, ROUNDED_RECT, 2);
 80008ea:	2202      	movs	r2, #2
 80008ec:	2103      	movs	r1, #3
 80008ee:	480c      	ldr	r0, [pc, #48]	@ (8000920 <state_machine+0x190>)
 80008f0:	f000 fca0 	bl	8001234 <gui_textbox_setFrameType>
		}
		if (kbd_return_key_char(msg)){
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fefc 	bl	80006f4 <kbd_return_key_char>

		}
		break;
 80008fc:	e006      	b.n	800090c <state_machine+0x17c>
		return;
 80008fe:	bf00      	nop
 8000900:	e004      	b.n	800090c <state_machine+0x17c>
	case DISP_PSU_SET_I:
		break;
	default:
		break;
 8000902:	bf00      	nop
 8000904:	e002      	b.n	800090c <state_machine+0x17c>
		break;
 8000906:	bf00      	nop
 8000908:	e000      	b.n	800090c <state_machine+0x17c>
		break;
 800090a:	bf00      	nop
	}
}
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200001b0 	.word	0x200001b0
 8000918:	20000194 	.word	0x20000194
 800091c:	2000008c 	.word	0x2000008c
 8000920:	200000ac 	.word	0x200000ac
 8000924:	20000196 	.word	0x20000196

08000928 <display_proc>:

extern u8g2_t u8g2;



void display_proc(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af02      	add	r7, sp, #8

	switch (state.window) {
 800092e:	4b27      	ldr	r3, [pc, #156]	@ (80009cc <display_proc+0xa4>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d846      	bhi.n	80009c4 <display_proc+0x9c>
 8000936:	a201      	add	r2, pc, #4	@ (adr r2, 800093c <display_proc+0x14>)
 8000938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093c:	0800094d 	.word	0x0800094d
 8000940:	0800098d 	.word	0x0800098d
 8000944:	080009c5 	.word	0x080009c5
 8000948:	080009c5 	.word	0x080009c5
	case DISPLAY_WINDOW_WELCOME:
		//display_current_limit(mode,1000);

		u8g2_ClearBuffer(&u8g2);
 800094c:	4820      	ldr	r0, [pc, #128]	@ (80009d0 <display_proc+0xa8>)
 800094e:	f004 f9d7 	bl	8004d00 <u8g2_ClearBuffer>
		u8g2_DrawFrame(&u8g2, 0, 0, 128, 64);
 8000952:	2340      	movs	r3, #64	@ 0x40
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2380      	movs	r3, #128	@ 0x80
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	481c      	ldr	r0, [pc, #112]	@ (80009d0 <display_proc+0xa8>)
 800095e:	f004 f816 	bl	800498e <u8g2_DrawFrame>
		u8g2_SetFont(&u8g2, u8g2_font_inr16_mr);
 8000962:	491c      	ldr	r1, [pc, #112]	@ (80009d4 <display_proc+0xac>)
 8000964:	481a      	ldr	r0, [pc, #104]	@ (80009d0 <display_proc+0xa8>)
 8000966:	f005 fa8d 	bl	8005e84 <u8g2_SetFont>
		u8g2_DrawUTF8(&u8g2, 15, 40, "WELCOME");
 800096a:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <display_proc+0xb0>)
 800096c:	2228      	movs	r2, #40	@ 0x28
 800096e:	210f      	movs	r1, #15
 8000970:	4817      	ldr	r0, [pc, #92]	@ (80009d0 <display_proc+0xa8>)
 8000972:	f005 f9c7 	bl	8005d04 <u8g2_DrawUTF8>
		u8g2_SendBuffer(&u8g2);
 8000976:	4816      	ldr	r0, [pc, #88]	@ (80009d0 <display_proc+0xa8>)
 8000978:	f004 fa35 	bl	8004de6 <u8g2_SendBuffer>

		HAL_Delay(1000);
 800097c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000980:	f001 fd16 	bl	80023b0 <HAL_Delay>

		state.window = DISPLAY_WINDOW_MENU;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <display_proc+0xa4>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]

		break;
 800098a:	e01c      	b.n	80009c6 <display_proc+0x9e>
	case DISPLAY_WINDOW_MENU:

		u8g2_ClearBuffer(&u8g2);
 800098c:	4810      	ldr	r0, [pc, #64]	@ (80009d0 <display_proc+0xa8>)
 800098e:	f004 f9b7 	bl	8004d00 <u8g2_ClearBuffer>
		gui_textbox_display(&gui_TB_voltage);
 8000992:	4812      	ldr	r0, [pc, #72]	@ (80009dc <display_proc+0xb4>)
 8000994:	f000 fc8e 	bl	80012b4 <gui_textbox_display>
		gui_textbox_display(&gui_TB_current_limit);
 8000998:	4811      	ldr	r0, [pc, #68]	@ (80009e0 <display_proc+0xb8>)
 800099a:	f000 fc8b 	bl	80012b4 <gui_textbox_display>
		gui_textbox_display(&gui_TB_current_measured);
 800099e:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <display_proc+0xbc>)
 80009a0:	f000 fc88 	bl	80012b4 <gui_textbox_display>
		gui_textbox_display(&gui_TB_voltage_measured);
 80009a4:	4810      	ldr	r0, [pc, #64]	@ (80009e8 <display_proc+0xc0>)
 80009a6:	f000 fc85 	bl	80012b4 <gui_textbox_display>
		gui_textbox_display(&gui_TB_CC);
 80009aa:	4810      	ldr	r0, [pc, #64]	@ (80009ec <display_proc+0xc4>)
 80009ac:	f000 fc82 	bl	80012b4 <gui_textbox_display>
		u8g2_SendBuffer(&u8g2);
 80009b0:	4807      	ldr	r0, [pc, #28]	@ (80009d0 <display_proc+0xa8>)
 80009b2:	f004 fa18 	bl	8004de6 <u8g2_SendBuffer>

		debug("Are we here?");
 80009b6:	f240 126b 	movw	r2, #363	@ 0x16b
 80009ba:	490d      	ldr	r1, [pc, #52]	@ (80009f0 <display_proc+0xc8>)
 80009bc:	480d      	ldr	r0, [pc, #52]	@ (80009f4 <display_proc+0xcc>)
 80009be:	f006 fe3b 	bl	8007638 <iprintf>

		break;
 80009c2:	e000      	b.n	80009c6 <display_proc+0x9e>
	case DISPLAY_WINDOW_CHARGER:

		break;
	default:

		break;
 80009c4:	bf00      	nop
	}

}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000194 	.word	0x20000194
 80009d0:	200006e8 	.word	0x200006e8
 80009d4:	08009f54 	.word	0x08009f54
 80009d8:	080082a4 	.word	0x080082a4
 80009dc:	2000008c 	.word	0x2000008c
 80009e0:	200000ac 	.word	0x200000ac
 80009e4:	200000cc 	.word	0x200000cc
 80009e8:	200000ec 	.word	0x200000ec
 80009ec:	2000010c 	.word	0x2000010c
 80009f0:	080082ac 	.word	0x080082ac
 80009f4:	080082c8 	.word	0x080082c8

080009f8 <app_run>:

void app_run(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af04      	add	r7, sp, #16

	gui_textbox_init(&gui_TB_voltage, gui_TB_voltage_array,
 80009fe:	2310      	movs	r3, #16
 8000a00:	9302      	str	r3, [sp, #8]
 8000a02:	231e      	movs	r3, #30
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	2300      	movs	r3, #0
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	220a      	movs	r2, #10
 8000a0e:	495f      	ldr	r1, [pc, #380]	@ (8000b8c <app_run+0x194>)
 8000a10:	485f      	ldr	r0, [pc, #380]	@ (8000b90 <app_run+0x198>)
 8000a12:	f000 faf9 	bl	8001008 <gui_textbox_init>
			sizeof(gui_TB_voltage_array), 0, 0, 30, 16);
	gui_textbox_setFrameType(&gui_TB_voltage, ROUNDED_RECT, 2);
 8000a16:	2202      	movs	r2, #2
 8000a18:	2103      	movs	r1, #3
 8000a1a:	485d      	ldr	r0, [pc, #372]	@ (8000b90 <app_run+0x198>)
 8000a1c:	f000 fc0a 	bl	8001234 <gui_textbox_setFrameType>
	gui_textbox_addText(&gui_TB_voltage, "SET\0");
 8000a20:	495c      	ldr	r1, [pc, #368]	@ (8000b94 <app_run+0x19c>)
 8000a22:	485b      	ldr	r0, [pc, #364]	@ (8000b90 <app_run+0x198>)
 8000a24:	f000 fb9c 	bl	8001160 <gui_textbox_addText>
	gui_textbox_setAllignHV(&gui_TB_voltage, H_ALIGN_CENTER, V_ALIGN_CENTER);
 8000a28:	2220      	movs	r2, #32
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4858      	ldr	r0, [pc, #352]	@ (8000b90 <app_run+0x198>)
 8000a2e:	f000 fc23 	bl	8001278 <gui_textbox_setAllignHV>
	gui_textbox_setFont(&gui_TB_voltage, (uint8_t*)u8g2_font_6x12_mf);
 8000a32:	4959      	ldr	r1, [pc, #356]	@ (8000b98 <app_run+0x1a0>)
 8000a34:	4856      	ldr	r0, [pc, #344]	@ (8000b90 <app_run+0x198>)
 8000a36:	f000 fb47 	bl	80010c8 <gui_textbox_setFont>
	gui_textbox_setCursorPos(&gui_TB_voltage, CURSOR_POSSITION, 4);
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	4854      	ldr	r0, [pc, #336]	@ (8000b90 <app_run+0x198>)
 8000a40:	f000 fbad 	bl	800119e <gui_textbox_setCursorPos>
	gui_TB_voltage.cursor_blink_mode = BLINK_NO;
 8000a44:	4b52      	ldr	r3, [pc, #328]	@ (8000b90 <app_run+0x198>)
 8000a46:	2210      	movs	r2, #16
 8000a48:	731a      	strb	r2, [r3, #12]

	gui_textbox_init(&gui_TB_current_limit, gui_TB_current_limit_array,
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	2361      	movs	r3, #97	@ 0x61
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	2300      	movs	r3, #0
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	231f      	movs	r3, #31
 8000a58:	220f      	movs	r2, #15
 8000a5a:	4950      	ldr	r1, [pc, #320]	@ (8000b9c <app_run+0x1a4>)
 8000a5c:	4850      	ldr	r0, [pc, #320]	@ (8000ba0 <app_run+0x1a8>)
 8000a5e:	f000 fad3 	bl	8001008 <gui_textbox_init>
			sizeof(gui_TB_current_limit_array), 31, 0, 97, 16);
	gui_textbox_setFrameType(&gui_TB_current_limit, ROUNDED_RECT, 2);
 8000a62:	2202      	movs	r2, #2
 8000a64:	2103      	movs	r1, #3
 8000a66:	484e      	ldr	r0, [pc, #312]	@ (8000ba0 <app_run+0x1a8>)
 8000a68:	f000 fbe4 	bl	8001234 <gui_textbox_setFrameType>
	gui_textbox_addText(&gui_TB_current_limit, "12.4V 1.00A\0");
 8000a6c:	494d      	ldr	r1, [pc, #308]	@ (8000ba4 <app_run+0x1ac>)
 8000a6e:	484c      	ldr	r0, [pc, #304]	@ (8000ba0 <app_run+0x1a8>)
 8000a70:	f000 fb76 	bl	8001160 <gui_textbox_addText>
	gui_textbox_setAllignHV(&gui_TB_current_limit, H_ALIGN_CENTER,
 8000a74:	2220      	movs	r2, #32
 8000a76:	2101      	movs	r1, #1
 8000a78:	4849      	ldr	r0, [pc, #292]	@ (8000ba0 <app_run+0x1a8>)
 8000a7a:	f000 fbfd 	bl	8001278 <gui_textbox_setAllignHV>
			V_ALIGN_CENTER);
	gui_textbox_setFont(&gui_TB_current_limit, (uint8_t*)u8g2_font_6x12_mf);
 8000a7e:	4946      	ldr	r1, [pc, #280]	@ (8000b98 <app_run+0x1a0>)
 8000a80:	4847      	ldr	r0, [pc, #284]	@ (8000ba0 <app_run+0x1a8>)
 8000a82:	f000 fb21 	bl	80010c8 <gui_textbox_setFont>
	gui_TB_current_limit.cursor_blink_mode = BLINK_NO;
 8000a86:	4b46      	ldr	r3, [pc, #280]	@ (8000ba0 <app_run+0x1a8>)
 8000a88:	2210      	movs	r2, #16
 8000a8a:	731a      	strb	r2, [r3, #12]

	gui_textbox_init(&gui_TB_current_measured, gui_TB_current_measured_array,
 8000a8c:	2316      	movs	r3, #22
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	2350      	movs	r3, #80	@ 0x50
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	2311      	movs	r3, #17
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2330      	movs	r3, #48	@ 0x30
 8000a9a:	220a      	movs	r2, #10
 8000a9c:	4942      	ldr	r1, [pc, #264]	@ (8000ba8 <app_run+0x1b0>)
 8000a9e:	4843      	ldr	r0, [pc, #268]	@ (8000bac <app_run+0x1b4>)
 8000aa0:	f000 fab2 	bl	8001008 <gui_textbox_init>
			sizeof(gui_TB_current_measured_array), 48, 17, 80, 22);
	gui_textbox_setFrameType(&gui_TB_current_measured, ROUNDED_RECT, 2);
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	4840      	ldr	r0, [pc, #256]	@ (8000bac <app_run+0x1b4>)
 8000aaa:	f000 fbc3 	bl	8001234 <gui_textbox_setFrameType>
	gui_textbox_addText(&gui_TB_current_measured, "1.001A\0");
 8000aae:	4940      	ldr	r1, [pc, #256]	@ (8000bb0 <app_run+0x1b8>)
 8000ab0:	483e      	ldr	r0, [pc, #248]	@ (8000bac <app_run+0x1b4>)
 8000ab2:	f000 fb55 	bl	8001160 <gui_textbox_addText>
	gui_textbox_setAllignHV(&gui_TB_current_measured, H_ALIGN_CENTER,
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	2101      	movs	r1, #1
 8000aba:	483c      	ldr	r0, [pc, #240]	@ (8000bac <app_run+0x1b4>)
 8000abc:	f000 fbdc 	bl	8001278 <gui_textbox_setAllignHV>
			V_ALIGN_CENTER);
	gui_textbox_setFont(&gui_TB_current_measured, (uint8_t*)u8g2_font_10x20_mf);
 8000ac0:	493c      	ldr	r1, [pc, #240]	@ (8000bb4 <app_run+0x1bc>)
 8000ac2:	483a      	ldr	r0, [pc, #232]	@ (8000bac <app_run+0x1b4>)
 8000ac4:	f000 fb00 	bl	80010c8 <gui_textbox_setFont>

	gui_textbox_init(&gui_TB_voltage_measured, gui_TB_voltage_measured_array,
 8000ac8:	2316      	movs	r3, #22
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	2350      	movs	r3, #80	@ 0x50
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	2329      	movs	r3, #41	@ 0x29
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2330      	movs	r3, #48	@ 0x30
 8000ad6:	220a      	movs	r2, #10
 8000ad8:	4937      	ldr	r1, [pc, #220]	@ (8000bb8 <app_run+0x1c0>)
 8000ada:	4838      	ldr	r0, [pc, #224]	@ (8000bbc <app_run+0x1c4>)
 8000adc:	f000 fa94 	bl	8001008 <gui_textbox_init>
			sizeof(gui_TB_voltage_measured_array), 48, 41, 80, 22);
	gui_textbox_setFrameType(&gui_TB_voltage_measured, ROUNDED_RECT, 2);
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	4835      	ldr	r0, [pc, #212]	@ (8000bbc <app_run+0x1c4>)
 8000ae6:	f000 fba5 	bl	8001234 <gui_textbox_setFrameType>
	gui_textbox_addText(&gui_TB_voltage_measured, "12.6V\0");
 8000aea:	4935      	ldr	r1, [pc, #212]	@ (8000bc0 <app_run+0x1c8>)
 8000aec:	4833      	ldr	r0, [pc, #204]	@ (8000bbc <app_run+0x1c4>)
 8000aee:	f000 fb37 	bl	8001160 <gui_textbox_addText>
	gui_textbox_setAllignHV(&gui_TB_voltage_measured, H_ALIGN_CENTER,
 8000af2:	2220      	movs	r2, #32
 8000af4:	2101      	movs	r1, #1
 8000af6:	4831      	ldr	r0, [pc, #196]	@ (8000bbc <app_run+0x1c4>)
 8000af8:	f000 fbbe 	bl	8001278 <gui_textbox_setAllignHV>
			V_ALIGN_CENTER);
	gui_textbox_setFont(&gui_TB_voltage_measured, (uint8_t*)u8g2_font_10x20_mf);
 8000afc:	492d      	ldr	r1, [pc, #180]	@ (8000bb4 <app_run+0x1bc>)
 8000afe:	482f      	ldr	r0, [pc, #188]	@ (8000bbc <app_run+0x1c4>)
 8000b00:	f000 fae2 	bl	80010c8 <gui_textbox_setFont>

	gui_textbox_init(&gui_TB_CC, gui_TB_CC_array, sizeof(gui_TB_CC_array), 0,
 8000b04:	2328      	movs	r3, #40	@ 0x28
 8000b06:	9302      	str	r3, [sp, #8]
 8000b08:	232e      	movs	r3, #46	@ 0x2e
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2314      	movs	r3, #20
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2203      	movs	r2, #3
 8000b14:	492b      	ldr	r1, [pc, #172]	@ (8000bc4 <app_run+0x1cc>)
 8000b16:	482c      	ldr	r0, [pc, #176]	@ (8000bc8 <app_run+0x1d0>)
 8000b18:	f000 fa76 	bl	8001008 <gui_textbox_init>
			20, 46, 40);
	gui_textbox_setFrameType(&gui_TB_CC, ROUNDED_FILLED_RECT, 5);
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	2104      	movs	r1, #4
 8000b20:	4829      	ldr	r0, [pc, #164]	@ (8000bc8 <app_run+0x1d0>)
 8000b22:	f000 fb87 	bl	8001234 <gui_textbox_setFrameType>
	gui_textbox_addText(&gui_TB_CC, "CC\0");
 8000b26:	4929      	ldr	r1, [pc, #164]	@ (8000bcc <app_run+0x1d4>)
 8000b28:	4827      	ldr	r0, [pc, #156]	@ (8000bc8 <app_run+0x1d0>)
 8000b2a:	f000 fb19 	bl	8001160 <gui_textbox_addText>
	gui_textbox_setAllignHV(&gui_TB_CC, H_ALIGN_CENTER, V_ALIGN_CENTER);
 8000b2e:	2220      	movs	r2, #32
 8000b30:	2101      	movs	r1, #1
 8000b32:	4825      	ldr	r0, [pc, #148]	@ (8000bc8 <app_run+0x1d0>)
 8000b34:	f000 fba0 	bl	8001278 <gui_textbox_setAllignHV>
	gui_textbox_setFont(&gui_TB_CC, (uint8_t*)u8g2_font_10x20_mf);
 8000b38:	491e      	ldr	r1, [pc, #120]	@ (8000bb4 <app_run+0x1bc>)
 8000b3a:	4823      	ldr	r0, [pc, #140]	@ (8000bc8 <app_run+0x1d0>)
 8000b3c:	f000 fac4 	bl	80010c8 <gui_textbox_setFont>


	app_tick_init();
 8000b40:	f7ff fd80 	bl	8000644 <app_tick_init>
	app_register_tick_callback(app_display_timer_proc);
 8000b44:	4822      	ldr	r0, [pc, #136]	@ (8000bd0 <app_run+0x1d8>)
 8000b46:	f7ff fd8b 	bl	8000660 <app_register_tick_callback>
	app_register_tick_callback(kbd_timer);
 8000b4a:	4822      	ldr	r0, [pc, #136]	@ (8000bd4 <app_run+0x1dc>)
 8000b4c:	f7ff fd88 	bl	8000660 <app_register_tick_callback>

	psu_init(&psu);
 8000b50:	4821      	ldr	r0, [pc, #132]	@ (8000bd8 <app_run+0x1e0>)
 8000b52:	f001 f969 	bl	8001e28 <psu_init>

	kbd_enc_queue = circular_buf_init(kbd_enc_queue_buffor,MESAGE_ENC_BUFFOR_SIZE);
 8000b56:	2105      	movs	r1, #5
 8000b58:	4820      	ldr	r0, [pc, #128]	@ (8000bdc <app_run+0x1e4>)
 8000b5a:	f000 f93f 	bl	8000ddc <circular_buf_init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a1f      	ldr	r2, [pc, #124]	@ (8000be0 <app_run+0x1e8>)
 8000b62:	6013      	str	r3, [r2, #0]

	kbd_init(&kbd,kbd_enc_queue);
 8000b64:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <app_run+0x1e8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481e      	ldr	r0, [pc, #120]	@ (8000be4 <app_run+0x1ec>)
 8000b6c:	f000 fd62 	bl	8001634 <kbd_init>

	state.window = DISPLAY_WINDOW_WELCOME;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <app_run+0x1f0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]

	while (1) {
		//circular_buf_put(queue,current_limit.x);

		state_machine();
 8000b76:	f7ff fe0b 	bl	8000790 <state_machine>

		if (app_is_display_timeout()) {
 8000b7a:	f7ff fd31 	bl	80005e0 <app_is_display_timeout>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0f8      	beq.n	8000b76 <app_run+0x17e>
			display_proc();
 8000b84:	f7ff fed0 	bl	8000928 <display_proc>
		state_machine();
 8000b88:	e7f5      	b.n	8000b76 <app_run+0x17e>
 8000b8a:	bf00      	nop
 8000b8c:	2000012c 	.word	0x2000012c
 8000b90:	2000008c 	.word	0x2000008c
 8000b94:	080082e4 	.word	0x080082e4
 8000b98:	08008514 	.word	0x08008514
 8000b9c:	20000138 	.word	0x20000138
 8000ba0:	200000ac 	.word	0x200000ac
 8000ba4:	080082ec 	.word	0x080082ec
 8000ba8:	20000148 	.word	0x20000148
 8000bac:	200000cc 	.word	0x200000cc
 8000bb0:	080082fc 	.word	0x080082fc
 8000bb4:	08008ee4 	.word	0x08008ee4
 8000bb8:	20000154 	.word	0x20000154
 8000bbc:	200000ec 	.word	0x200000ec
 8000bc0:	08008304 	.word	0x08008304
 8000bc4:	20000160 	.word	0x20000160
 8000bc8:	2000010c 	.word	0x2000010c
 8000bcc:	0800830c 	.word	0x0800830c
 8000bd0:	08000609 	.word	0x08000609
 8000bd4:	080005b1 	.word	0x080005b1
 8000bd8:	200001a4 	.word	0x200001a4
 8000bdc:	200001b4 	.word	0x200001b4
 8000be0:	200001b0 	.word	0x200001b0
 8000be4:	20000084 	.word	0x20000084
 8000be8:	20000194 	.word	0x20000194

08000bec <__io_putchar>:
}

extern UART_HandleTypeDef huart3;

PUTCHAR_PROTOTYPE
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000bf4:	1d39      	adds	r1, r7, #4
 8000bf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4803      	ldr	r0, [pc, #12]	@ (8000c0c <__io_putchar+0x20>)
 8000bfe:	f002 ffcb 	bl	8003b98 <HAL_UART_Transmit>

  return ch;
 8000c02:	687b      	ldr	r3, [r7, #4]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200001bc 	.word	0x200001bc

08000c10 <get_bit_value>:
 */

#include "bsp.h"
#include "stm32f4xx_hal.h"

uint8_t get_bit_value(uint8_t data,uint8_t bit){
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	460a      	mov	r2, r1
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	71bb      	strb	r3, [r7, #6]
	uint8_t bit_state;

	if (data & (1 << bit) ) {
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	fa42 f303 	asr.w	r3, r2, r3
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <get_bit_value+0x26>
		bit_state = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e001      	b.n	8000c3a <get_bit_value+0x2a>
	} else {
		bit_state = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]
	}
	return bit_state;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <bsp_kbd_set_row>:

void bsp_kbd_set_row (uint8_t data){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(KBD_R1_PORT, KBD_R1_PIN, get_bit_value(data,0));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ffda 	bl	8000c10 <get_bit_value>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	2108      	movs	r1, #8
 8000c62:	4814      	ldr	r0, [pc, #80]	@ (8000cb4 <bsp_kbd_set_row+0x6c>)
 8000c64:	f001 fe86 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KBD_R2_PORT, KBD_R2_PIN, get_bit_value(data,1));
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ffcf 	bl	8000c10 <get_bit_value>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	2140      	movs	r1, #64	@ 0x40
 8000c78:	480e      	ldr	r0, [pc, #56]	@ (8000cb4 <bsp_kbd_set_row+0x6c>)
 8000c7a:	f001 fe7b 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KBD_R3_PORT, KBD_R3_PIN, get_bit_value(data,2));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2102      	movs	r1, #2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ffc4 	bl	8000c10 <get_bit_value>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <bsp_kbd_set_row+0x6c>)
 8000c90:	f001 fe70 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KBD_R4_PORT, KBD_R4_PIN, get_bit_value(data,3));
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2103      	movs	r1, #3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ffb9 	bl	8000c10 <get_bit_value>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <bsp_kbd_set_row+0x6c>)
 8000ca6:	f001 fe65 	bl	8002974 <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <bsp_kbd_get_col>:

uint8_t bsp_kbd_get_col(void){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
	uint8_t value;

	value = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	value |= HAL_GPIO_ReadPin(KBD_C1_PORT, KBD_C1_PIN) << 0;
 8000cc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc6:	481a      	ldr	r0, [pc, #104]	@ (8000d30 <bsp_kbd_get_col+0x78>)
 8000cc8:	f001 fe3c 	bl	8002944 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b25a      	sxtb	r2, r3
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	71fb      	strb	r3, [r7, #7]
	value |= HAL_GPIO_ReadPin(KBD_C2_PORT, KBD_C2_PIN) << 1;
 8000cda:	2180      	movs	r1, #128	@ 0x80
 8000cdc:	4814      	ldr	r0, [pc, #80]	@ (8000d30 <bsp_kbd_get_col+0x78>)
 8000cde:	f001 fe31 	bl	8002944 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	b25a      	sxtb	r2, r3
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	71fb      	strb	r3, [r7, #7]
	value |= HAL_GPIO_ReadPin(KBD_C3_PORT, KBD_C3_PIN) << 2;
 8000cf2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cf6:	480e      	ldr	r0, [pc, #56]	@ (8000d30 <bsp_kbd_get_col+0x78>)
 8000cf8:	f001 fe24 	bl	8002944 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	b25a      	sxtb	r2, r3
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	71fb      	strb	r3, [r7, #7]
	value |= HAL_GPIO_ReadPin(KBD_C4_PORT, KBD_C4_PIN) << 3;
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <bsp_kbd_get_col+0x7c>)
 8000d10:	f001 fe18 	bl	8002944 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b25b      	sxtb	r3, r3
 8000d22:	71fb      	strb	r3, [r7, #7]

	return value;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021400 	.word	0x40021400
 8000d34:	40021800 	.word	0x40021800

08000d38 <advance_headtail_value>:
};

#pragma mark - Private Functions -

static inline size_t advance_headtail_value(size_t value, size_t max)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	return (value + 1) % max;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d4c:	6839      	ldr	r1, [r7, #0]
 8000d4e:	fb01 f202 	mul.w	r2, r1, r2
 8000d52:	1a9b      	subs	r3, r3, r2
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <advance_head_pointer>:

static void advance_head_pointer(cbuf_handle_t me)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	assert(me);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d105      	bne.n	8000d7a <advance_head_pointer+0x1a>
 8000d6e:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <advance_head_pointer+0x70>)
 8000d70:	4a18      	ldr	r2, [pc, #96]	@ (8000dd4 <advance_head_pointer+0x74>)
 8000d72:	211b      	movs	r1, #27
 8000d74:	4818      	ldr	r0, [pc, #96]	@ (8000dd8 <advance_head_pointer+0x78>)
 8000d76:	f006 fab7 	bl	80072e8 <__assert_func>

	if(circular_buf_full(me))
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 f92a 	bl	8000fd4 <circular_buf_full>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00a      	beq.n	8000d9c <advance_head_pointer+0x3c>
	{
		me->tail = advance_headtail_value(me->tail, me->max);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4610      	mov	r0, r2
 8000d92:	f7ff ffd1 	bl	8000d38 <advance_headtail_value>
 8000d96:	4602      	mov	r2, r0
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
	}

	me->head = advance_headtail_value(me->head, me->max);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	4619      	mov	r1, r3
 8000da6:	4610      	mov	r0, r2
 8000da8:	f7ff ffc6 	bl	8000d38 <advance_headtail_value>
 8000dac:	4602      	mov	r2, r0
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	605a      	str	r2, [r3, #4]
	me->full = (me->head == me->tail);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	bf0c      	ite	eq
 8000dbe:	2301      	moveq	r3, #1
 8000dc0:	2300      	movne	r3, #0
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	741a      	strb	r2, [r3, #16]
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	08008310 	.word	0x08008310
 8000dd4:	08008404 	.word	0x08008404
 8000dd8:	08008314 	.word	0x08008314

08000ddc <circular_buf_init>:

#pragma mark - APIs -

cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	assert(buffer && size);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <circular_buf_init+0x16>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <circular_buf_init+0x22>
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <circular_buf_init+0x74>)
 8000df4:	4a17      	ldr	r2, [pc, #92]	@ (8000e54 <circular_buf_init+0x78>)
 8000df6:	212a      	movs	r1, #42	@ 0x2a
 8000df8:	4817      	ldr	r0, [pc, #92]	@ (8000e58 <circular_buf_init+0x7c>)
 8000dfa:	f006 fa75 	bl	80072e8 <__assert_func>

	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
 8000dfe:	2014      	movs	r0, #20
 8000e00:	f006 fa90 	bl	8007324 <malloc>
 8000e04:	4603      	mov	r3, r0
 8000e06:	60fb      	str	r3, [r7, #12]
	assert(cbuf);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d105      	bne.n	8000e1a <circular_buf_init+0x3e>
 8000e0e:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <circular_buf_init+0x80>)
 8000e10:	4a10      	ldr	r2, [pc, #64]	@ (8000e54 <circular_buf_init+0x78>)
 8000e12:	212d      	movs	r1, #45	@ 0x2d
 8000e14:	4810      	ldr	r0, [pc, #64]	@ (8000e58 <circular_buf_init+0x7c>)
 8000e16:	f006 fa67 	bl	80072e8 <__assert_func>

	cbuf->buffer = buffer;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	601a      	str	r2, [r3, #0]
	cbuf->max = size;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	60da      	str	r2, [r3, #12]
	circular_buf_reset(cbuf);
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f000 f81c 	bl	8000e64 <circular_buf_reset>

	assert(circular_buf_empty(cbuf));
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f000 f8a5 	bl	8000f7c <circular_buf_empty>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d105      	bne.n	8000e44 <circular_buf_init+0x68>
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <circular_buf_init+0x84>)
 8000e3a:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <circular_buf_init+0x78>)
 8000e3c:	2133      	movs	r1, #51	@ 0x33
 8000e3e:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <circular_buf_init+0x7c>)
 8000e40:	f006 fa52 	bl	80072e8 <__assert_func>

	return cbuf;
 8000e44:	68fb      	ldr	r3, [r7, #12]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08008334 	.word	0x08008334
 8000e54:	0800841c 	.word	0x0800841c
 8000e58:	08008314 	.word	0x08008314
 8000e5c:	08008344 	.word	0x08008344
 8000e60:	0800834c 	.word	0x0800834c

08000e64 <circular_buf_reset>:
	assert(me);
	free(me);
}

void circular_buf_reset(cbuf_handle_t me)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	assert(me);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d105      	bne.n	8000e7e <circular_buf_reset+0x1a>
 8000e72:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <circular_buf_reset+0x34>)
 8000e74:	4a09      	ldr	r2, [pc, #36]	@ (8000e9c <circular_buf_reset+0x38>)
 8000e76:	214e      	movs	r1, #78	@ 0x4e
 8000e78:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <circular_buf_reset+0x3c>)
 8000e7a:	f006 fa35 	bl	80072e8 <__assert_func>

	me->head = 0;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
	me->tail = 0;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
	me->full = false;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	741a      	strb	r2, [r3, #16]
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	08008310 	.word	0x08008310
 8000e9c:	08008430 	.word	0x08008430
 8000ea0:	08008314 	.word	0x08008314

08000ea4 <circular_buf_put>:

	return me->max;
}

void circular_buf_put(cbuf_handle_t me, uint8_t data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
	assert(me && me->buffer);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <circular_buf_put+0x1a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <circular_buf_put+0x26>
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <circular_buf_put+0x44>)
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <circular_buf_put+0x48>)
 8000ec2:	2173      	movs	r1, #115	@ 0x73
 8000ec4:	480a      	ldr	r0, [pc, #40]	@ (8000ef0 <circular_buf_put+0x4c>)
 8000ec6:	f006 fa0f 	bl	80072e8 <__assert_func>

	me->buffer[me->head] = data;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	78fa      	ldrb	r2, [r7, #3]
 8000ed6:	701a      	strb	r2, [r3, #0]

	advance_head_pointer(me);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff41 	bl	8000d60 <advance_head_pointer>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	08008398 	.word	0x08008398
 8000eec:	08008444 	.word	0x08008444
 8000ef0:	08008314 	.word	0x08008314

08000ef4 <circular_buf_get>:

	return r;
}

int circular_buf_get(cbuf_handle_t me, uint8_t* data)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	assert(me && data && me->buffer);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d006      	beq.n	8000f12 <circular_buf_get+0x1e>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <circular_buf_get+0x1e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d105      	bne.n	8000f1e <circular_buf_get+0x2a>
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <circular_buf_get+0x7c>)
 8000f14:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <circular_buf_get+0x80>)
 8000f16:	218c      	movs	r1, #140	@ 0x8c
 8000f18:	4817      	ldr	r0, [pc, #92]	@ (8000f78 <circular_buf_get+0x84>)
 8000f1a:	f006 f9e5 	bl	80072e8 <__assert_func>

	int r = -1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	60fb      	str	r3, [r7, #12]

	if(!circular_buf_empty(me))
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f829 	bl	8000f7c <circular_buf_empty>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f083 0301 	eor.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d017      	beq.n	8000f66 <circular_buf_get+0x72>
	{
		*data = me->buffer[me->tail];
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	701a      	strb	r2, [r3, #0]
		me->tail = advance_headtail_value(me->tail, me->max);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4610      	mov	r0, r2
 8000f52:	f7ff fef1 	bl	8000d38 <advance_headtail_value>
 8000f56:	4602      	mov	r2, r0
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
		me->full = false;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	741a      	strb	r2, [r3, #16]
		r = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
	}

	return r;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	080083ac 	.word	0x080083ac
 8000f74:	08008458 	.word	0x08008458
 8000f78:	08008314 	.word	0x08008314

08000f7c <circular_buf_empty>:

bool circular_buf_empty(cbuf_handle_t me)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	assert(me);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d105      	bne.n	8000f96 <circular_buf_empty+0x1a>
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <circular_buf_empty+0x4c>)
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fcc <circular_buf_empty+0x50>)
 8000f8e:	219d      	movs	r1, #157	@ 0x9d
 8000f90:	480f      	ldr	r0, [pc, #60]	@ (8000fd0 <circular_buf_empty+0x54>)
 8000f92:	f006 f9a9 	bl	80072e8 <__assert_func>

	return (!circular_buf_full(me) && (me->head == me->tail));
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f81c 	bl	8000fd4 <circular_buf_full>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f083 0301 	eor.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d007      	beq.n	8000fb8 <circular_buf_empty+0x3c>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d101      	bne.n	8000fb8 <circular_buf_empty+0x3c>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <circular_buf_empty+0x3e>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08008310 	.word	0x08008310
 8000fcc:	0800846c 	.word	0x0800846c
 8000fd0:	08008314 	.word	0x08008314

08000fd4 <circular_buf_full>:

bool circular_buf_full(cbuf_handle_t me)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	assert(me);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d105      	bne.n	8000fee <circular_buf_full+0x1a>
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <circular_buf_full+0x28>)
 8000fe4:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <circular_buf_full+0x2c>)
 8000fe6:	21a4      	movs	r1, #164	@ 0xa4
 8000fe8:	4806      	ldr	r0, [pc, #24]	@ (8001004 <circular_buf_full+0x30>)
 8000fea:	f006 f97d 	bl	80072e8 <__assert_func>

	return me->full;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7c1b      	ldrb	r3, [r3, #16]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	08008310 	.word	0x08008310
 8001000:	08008480 	.word	0x08008480
 8001004:	08008314 	.word	0x08008314

08001008 <gui_textbox_init>:


extern u8g2_t u8g2;

void gui_textbox_init(	gui_textbox_t *self,char *str, uint8_t n,
						int8_t pos_x, int8_t pos_y,uint8_t size_x,uint8_t size_y ){
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	4611      	mov	r1, r2
 8001014:	461a      	mov	r2, r3
 8001016:	460b      	mov	r3, r1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	4613      	mov	r3, r2
 800101c:	71bb      	strb	r3, [r7, #6]
	assert(self);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <gui_textbox_init+0x28>
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <gui_textbox_init+0xa8>)
 8001026:	4a23      	ldr	r2, [pc, #140]	@ (80010b4 <gui_textbox_init+0xac>)
 8001028:	2118      	movs	r1, #24
 800102a:	4823      	ldr	r0, [pc, #140]	@ (80010b8 <gui_textbox_init+0xb0>)
 800102c:	f006 f95c 	bl	80072e8 <__assert_func>
	assert(n);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d105      	bne.n	8001042 <gui_textbox_init+0x3a>
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <gui_textbox_init+0xb4>)
 8001038:	4a1e      	ldr	r2, [pc, #120]	@ (80010b4 <gui_textbox_init+0xac>)
 800103a:	2119      	movs	r1, #25
 800103c:	481e      	ldr	r0, [pc, #120]	@ (80010b8 <gui_textbox_init+0xb0>)
 800103e:	f006 f953 	bl	80072e8 <__assert_func>
	assert(size_x);
 8001042:	7f3b      	ldrb	r3, [r7, #28]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <gui_textbox_init+0x4c>
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <gui_textbox_init+0xb8>)
 800104a:	4a1a      	ldr	r2, [pc, #104]	@ (80010b4 <gui_textbox_init+0xac>)
 800104c:	211a      	movs	r1, #26
 800104e:	481a      	ldr	r0, [pc, #104]	@ (80010b8 <gui_textbox_init+0xb0>)
 8001050:	f006 f94a 	bl	80072e8 <__assert_func>
	assert(size_y);
 8001054:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d105      	bne.n	8001068 <gui_textbox_init+0x60>
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <gui_textbox_init+0xbc>)
 800105e:	4a15      	ldr	r2, [pc, #84]	@ (80010b4 <gui_textbox_init+0xac>)
 8001060:	211b      	movs	r1, #27
 8001062:	4815      	ldr	r0, [pc, #84]	@ (80010b8 <gui_textbox_init+0xb0>)
 8001064:	f006 f940 	bl	80072e8 <__assert_func>

	self->str = str;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	605a      	str	r2, [r3, #4]
	self->cursor = str;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	609a      	str	r2, [r3, #8]
	self->str_size = n;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	79fa      	ldrb	r2, [r7, #7]
 8001078:	735a      	strb	r2, [r3, #13]
	self->pos_x = pos_x;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	79ba      	ldrb	r2, [r7, #6]
 800107e:	701a      	strb	r2, [r3, #0]
	self->pos_y = pos_y;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	7e3a      	ldrb	r2, [r7, #24]
 8001084:	705a      	strb	r2, [r3, #1]
	self->size_x = size_x;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	7f3a      	ldrb	r2, [r7, #28]
 800108a:	709a      	strb	r2, [r3, #2]
	self->size_y = size_y;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001092:	70da      	strb	r2, [r3, #3]
	self->radius = 0;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	739a      	strb	r2, [r3, #14]
	self->align_mode = 0;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	73da      	strb	r2, [r3, #15]
	self->frame_type = 0;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	741a      	strb	r2, [r3, #16]

}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	080083c8 	.word	0x080083c8
 80010b4:	08008494 	.word	0x08008494
 80010b8:	080083d0 	.word	0x080083d0
 80010bc:	080083ec 	.word	0x080083ec
 80010c0:	080083f0 	.word	0x080083f0
 80010c4:	080083f8 	.word	0x080083f8

080010c8 <gui_textbox_setFont>:

void inline gui_textbox_setFont(gui_textbox_t *self, uint8_t *font){
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
	self->font = font;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	615a      	str	r2, [r3, #20]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <gui_textbox_addChar>:

void gui_textbox_deleteChar(gui_textbox_t *self){

}

void gui_textbox_addChar(gui_textbox_t *self,char c){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
	assert(c);
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d105      	bne.n	8001102 <gui_textbox_addChar+0x1e>
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <gui_textbox_addChar+0x48>)
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <gui_textbox_addChar+0x4c>)
 80010fa:	2133      	movs	r1, #51	@ 0x33
 80010fc:	480d      	ldr	r0, [pc, #52]	@ (8001134 <gui_textbox_addChar+0x50>)
 80010fe:	f006 f8f3 	bl	80072e8 <__assert_func>
	if(self->cursor > self->str - 1){
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	429a      	cmp	r2, r3
 800110e:	d908      	bls.n	8001122 <gui_textbox_addChar+0x3e>
		*self->cursor = c;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	78fa      	ldrb	r2, [r7, #3]
 8001116:	701a      	strb	r2, [r3, #0]
		self->cursor++;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]
	}
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	08008400 	.word	0x08008400
 8001130:	080084a8 	.word	0x080084a8
 8001134:	080083d0 	.word	0x080083d0

08001138 <gui_textbox_deleteText>:

void gui_textbox_deleteText(gui_textbox_t *self){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	memset(self->str,0,self->str_size);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6858      	ldr	r0, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7b5b      	ldrb	r3, [r3, #13]
 8001148:	461a      	mov	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	f006 fac9 	bl	80076e2 <memset>
	self->cursor = self->str;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	609a      	str	r2, [r3, #8]
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <gui_textbox_addText>:

void gui_textbox_addText(gui_textbox_t *self,const char * str){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	uint32_t size = self->str + self->str_size - self->cursor;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	7b52      	ldrb	r2, [r2, #13]
 8001172:	441a      	add	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	60fb      	str	r3, [r7, #12]
	memcpy(self->cursor,str,size);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	6839      	ldr	r1, [r7, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f006 fb4a 	bl	800781e <memcpy>
	self->cursor += size;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	441a      	add	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	609a      	str	r2, [r3, #8]
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <gui_textbox_setCursorPos>:

void gui_textbox_setCursorPos(gui_textbox_t *self,gui_textbox_cursor_pos_t mode ,uint8_t pos){
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	70fb      	strb	r3, [r7, #3]
 80011aa:	4613      	mov	r3, r2
 80011ac:	70bb      	strb	r3, [r7, #2]
	if ((mode & 0x0F) == CURSOR_BEGIN){
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <gui_textbox_setCursorPos+0x22>
		self->cursor = self->str;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
	}
	if ((mode & 0x0F) == CURSOR_END){
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d11d      	bne.n	8001206 <gui_textbox_setCursorPos+0x68>
			self->cursor = self->str + self->str_size - 1;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7b5b      	ldrb	r3, [r3, #13]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	441a      	add	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	609a      	str	r2, [r3, #8]
			for(uint8_t a = 0; a < self->str_size; a++){
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e00b      	b.n	80011f8 <gui_textbox_setCursorPos+0x5a>
				if (self->cursor != 0){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10d      	bne.n	8001204 <gui_textbox_setCursorPos+0x66>
					break;
				}else{
					self->cursor --;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	1e5a      	subs	r2, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	609a      	str	r2, [r3, #8]
			for(uint8_t a = 0; a < self->str_size; a++){
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	3301      	adds	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7b5b      	ldrb	r3, [r3, #13]
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d3ee      	bcc.n	80011e0 <gui_textbox_setCursorPos+0x42>
 8001202:	e000      	b.n	8001206 <gui_textbox_setCursorPos+0x68>
					break;
 8001204:	bf00      	nop
				}
			}

		}
	if ((mode & 0x0F) == CURSOR_POSSITION){
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	2b02      	cmp	r3, #2
 800120e:	d10b      	bne.n	8001228 <gui_textbox_setCursorPos+0x8a>
		if (pos < self->str_size - 1){
 8001210:	78ba      	ldrb	r2, [r7, #2]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7b5b      	ldrb	r3, [r3, #13]
 8001216:	3b01      	subs	r3, #1
 8001218:	429a      	cmp	r2, r3
 800121a:	da05      	bge.n	8001228 <gui_textbox_setCursorPos+0x8a>
			self->cursor = self->str + pos;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	78bb      	ldrb	r3, [r7, #2]
 8001222:	441a      	add	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
		}
	}
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <gui_textbox_setFrameType>:

void gui_textbox_setFrameType(gui_textbox_t *self,gui_textbox_frame_type_t ftype,uint8_t r)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
 8001240:	4613      	mov	r3, r2
 8001242:	70bb      	strb	r3, [r7, #2]
	assert(self);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <gui_textbox_setFrameType+0x22>
 800124a:	4b08      	ldr	r3, [pc, #32]	@ (800126c <gui_textbox_setFrameType+0x38>)
 800124c:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <gui_textbox_setFrameType+0x3c>)
 800124e:	215d      	movs	r1, #93	@ 0x5d
 8001250:	4808      	ldr	r0, [pc, #32]	@ (8001274 <gui_textbox_setFrameType+0x40>)
 8001252:	f006 f849 	bl	80072e8 <__assert_func>
	self->frame_type = ftype;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	78fa      	ldrb	r2, [r7, #3]
 800125a:	741a      	strb	r2, [r3, #16]
	self->radius = r;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	78ba      	ldrb	r2, [r7, #2]
 8001260:	739a      	strb	r2, [r3, #14]
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	080083c8 	.word	0x080083c8
 8001270:	080084bc 	.word	0x080084bc
 8001274:	080083d0 	.word	0x080083d0

08001278 <gui_textbox_setAllignHV>:

void inline gui_textbox_setAllignHV(gui_textbox_t *self, gui_textbox_Halign_t H, gui_textbox_Valign_t V){
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
 8001284:	4613      	mov	r3, r2
 8001286:	70bb      	strb	r3, [r7, #2]
	self->align_mode = (V & 0xF0) | (H & 0x0F);
 8001288:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800128c:	f023 030f 	bic.w	r3, r3, #15
 8001290:	b25a      	sxtb	r2, r3
 8001292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	b25b      	sxtb	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	73da      	strb	r2, [r3, #15]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <gui_textbox_display>:

void gui_textbox_display(gui_textbox_t *self){
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	6078      	str	r0, [r7, #4]
	assert(self);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <gui_textbox_display+0x1a>
 80012c2:	4b99      	ldr	r3, [pc, #612]	@ (8001528 <gui_textbox_display+0x274>)
 80012c4:	4a99      	ldr	r2, [pc, #612]	@ (800152c <gui_textbox_display+0x278>)
 80012c6:	2167      	movs	r1, #103	@ 0x67
 80012c8:	4899      	ldr	r0, [pc, #612]	@ (8001530 <gui_textbox_display+0x27c>)
 80012ca:	f006 f80d 	bl	80072e8 <__assert_func>

	uint8_t x,y;
	u8g2_SetFont(&u8g2, self->font);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4897      	ldr	r0, [pc, #604]	@ (8001534 <gui_textbox_display+0x280>)
 80012d6:	f004 fdd5 	bl	8005e84 <u8g2_SetFont>
	uint8_t str_lenght = u8g2_GetStrWidth(&u8g2,self->str);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4619      	mov	r1, r3
 80012e0:	4894      	ldr	r0, [pc, #592]	@ (8001534 <gui_textbox_display+0x280>)
 80012e2:	f004 fe39 	bl	8005f58 <u8g2_GetStrWidth>
 80012e6:	4603      	mov	r3, r0
 80012e8:	737b      	strb	r3, [r7, #13]

	u8g2_SetFontPosBaseline(&u8g2);
 80012ea:	4892      	ldr	r0, [pc, #584]	@ (8001534 <gui_textbox_display+0x280>)
 80012ec:	f004 fd9c 	bl	8005e28 <u8g2_SetFontPosBaseline>
	u8g2_SetDrawColor(&u8g2, 1);
 80012f0:	2101      	movs	r1, #1
 80012f2:	4890      	ldr	r0, [pc, #576]	@ (8001534 <gui_textbox_display+0x280>)
 80012f4:	f004 ff9b 	bl	800622e <u8g2_SetDrawColor>
	//u8g2_DrawUTF8(&u8g2, type.x + (type.box_x - width) / 2 , type.y + type.box_y - (type.box_y - height)/2 - 1, buffer);

	u8g2_SetClipWindow(&u8g2,self->pos_x,self->pos_y,self->pos_x + self->size_x,self->pos_y + self->size_y);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f993 3000 	ldrsb.w	r3, [r3]
 80012fe:	b2d9      	uxtb	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001306:	b2d8      	uxtb	r0, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f993 3000 	ldrsb.w	r3, [r3]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	4413      	add	r3, r2
 8001316:	b2dc      	uxtb	r4, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	78db      	ldrb	r3, [r3, #3]
 8001324:	4413      	add	r3, r2
 8001326:	b2db      	uxtb	r3, r3
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4623      	mov	r3, r4
 800132c:	4602      	mov	r2, r0
 800132e:	4881      	ldr	r0, [pc, #516]	@ (8001534 <gui_textbox_display+0x280>)
 8001330:	f005 f8b0 	bl	8006494 <u8g2_SetClipWindow>

	switch (self->frame_type) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7c1b      	ldrb	r3, [r3, #16]
 8001338:	2b04      	cmp	r3, #4
 800133a:	d86d      	bhi.n	8001418 <gui_textbox_display+0x164>
 800133c:	a201      	add	r2, pc, #4	@ (adr r2, 8001344 <gui_textbox_display+0x90>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001419 	.word	0x08001419
 8001348:	08001359 	.word	0x08001359
 800134c:	08001385 	.word	0x08001385
 8001350:	080013b1 	.word	0x080013b1
 8001354:	080013e5 	.word	0x080013e5
	case NO_FRAME:

		break;
	case RECT:
		u8g2_DrawFrame(&u8g2, self->pos_x, self->pos_y, self->size_x,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f993 3000 	ldrsb.w	r3, [r3]
 800135e:	b2d9      	uxtb	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7898      	ldrb	r0, [r3, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	78db      	ldrb	r3, [r3, #3]
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4603      	mov	r3, r0
 8001374:	486f      	ldr	r0, [pc, #444]	@ (8001534 <gui_textbox_display+0x280>)
 8001376:	f003 fb0a 	bl	800498e <u8g2_DrawFrame>
				self->size_y);
		u8g2_SetDrawColor(&u8g2,1);
 800137a:	2101      	movs	r1, #1
 800137c:	486d      	ldr	r0, [pc, #436]	@ (8001534 <gui_textbox_display+0x280>)
 800137e:	f004 ff56 	bl	800622e <u8g2_SetDrawColor>
		break;
 8001382:	e04a      	b.n	800141a <gui_textbox_display+0x166>
	case FILLED_RECT:
		u8g2_DrawBox(&u8g2, self->pos_x, self->pos_y, self->size_x,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f993 3000 	ldrsb.w	r3, [r3]
 800138a:	b2d9      	uxtb	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7898      	ldrb	r0, [r3, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	78db      	ldrb	r3, [r3, #3]
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4603      	mov	r3, r0
 80013a0:	4864      	ldr	r0, [pc, #400]	@ (8001534 <gui_textbox_display+0x280>)
 80013a2:	f003 fabe 	bl	8004922 <u8g2_DrawBox>
				self->size_y);
		u8g2_SetDrawColor(&u8g2,0);
 80013a6:	2100      	movs	r1, #0
 80013a8:	4862      	ldr	r0, [pc, #392]	@ (8001534 <gui_textbox_display+0x280>)
 80013aa:	f004 ff40 	bl	800622e <u8g2_SetDrawColor>
		break;
 80013ae:	e034      	b.n	800141a <gui_textbox_display+0x166>
	case ROUNDED_RECT:
		u8g2_DrawRFrame(&u8g2, self->pos_x, self->pos_y, self->size_x,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f993 3000 	ldrsb.w	r3, [r3]
 80013b6:	b2d9      	uxtb	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013be:	b2d8      	uxtb	r0, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	789c      	ldrb	r4, [r3, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	78db      	ldrb	r3, [r3, #3]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	7b92      	ldrb	r2, [r2, #14]
 80013cc:	9201      	str	r2, [sp, #4]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4623      	mov	r3, r4
 80013d2:	4602      	mov	r2, r0
 80013d4:	4857      	ldr	r0, [pc, #348]	@ (8001534 <gui_textbox_display+0x280>)
 80013d6:	f003 fbde 	bl	8004b96 <u8g2_DrawRFrame>
				self->size_y, self->radius);
		u8g2_SetDrawColor(&u8g2,1);
 80013da:	2101      	movs	r1, #1
 80013dc:	4855      	ldr	r0, [pc, #340]	@ (8001534 <gui_textbox_display+0x280>)
 80013de:	f004 ff26 	bl	800622e <u8g2_SetDrawColor>
		break;
 80013e2:	e01a      	b.n	800141a <gui_textbox_display+0x166>
	case ROUNDED_FILLED_RECT:
		u8g2_DrawRBox(&u8g2, self->pos_x, self->pos_y, self->size_x,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ea:	b2d9      	uxtb	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013f2:	b2d8      	uxtb	r0, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	789c      	ldrb	r4, [r3, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	78db      	ldrb	r3, [r3, #3]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	7b92      	ldrb	r2, [r2, #14]
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	4623      	mov	r3, r4
 8001406:	4602      	mov	r2, r0
 8001408:	484a      	ldr	r0, [pc, #296]	@ (8001534 <gui_textbox_display+0x280>)
 800140a:	f003 fb14 	bl	8004a36 <u8g2_DrawRBox>
				self->size_y, self->radius);
		u8g2_SetDrawColor(&u8g2,0);
 800140e:	2100      	movs	r1, #0
 8001410:	4848      	ldr	r0, [pc, #288]	@ (8001534 <gui_textbox_display+0x280>)
 8001412:	f004 ff0c 	bl	800622e <u8g2_SetDrawColor>
		break;
 8001416:	e000      	b.n	800141a <gui_textbox_display+0x166>
	default:
		break;
 8001418:	bf00      	nop
	}
	// Consider if all calculation should be done on uin16_t to prevent over
	switch (self->align_mode & 0x0F) {
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7bdb      	ldrb	r3, [r3, #15]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	2b02      	cmp	r3, #2
 8001424:	d01d      	beq.n	8001462 <gui_textbox_display+0x1ae>
 8001426:	2b02      	cmp	r3, #2
 8001428:	dc29      	bgt.n	800147e <gui_textbox_display+0x1ca>
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <gui_textbox_display+0x180>
 800142e:	2b01      	cmp	r3, #1
 8001430:	d007      	beq.n	8001442 <gui_textbox_display+0x18e>
		break;
	case H_ALIGN_RIGHT:
		x = self->pos_x + self->size_x - str_lenght - 1;
		break;
	default:
		break;
 8001432:	e024      	b.n	800147e <gui_textbox_display+0x1ca>
		x = self->pos_x + 1;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f993 3000 	ldrsb.w	r3, [r3]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3301      	adds	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
		break;
 8001440:	e01e      	b.n	8001480 <gui_textbox_display+0x1cc>
		x = self->pos_x + (self->size_x - str_lenght) / 2;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f993 3000 	ldrsb.w	r3, [r3]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	789b      	ldrb	r3, [r3, #2]
 800144e:	4619      	mov	r1, r3
 8001450:	7b7b      	ldrb	r3, [r7, #13]
 8001452:	1acb      	subs	r3, r1, r3
 8001454:	0fd9      	lsrs	r1, r3, #31
 8001456:	440b      	add	r3, r1
 8001458:	105b      	asrs	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4413      	add	r3, r2
 800145e:	73fb      	strb	r3, [r7, #15]
		break;
 8001460:	e00e      	b.n	8001480 <gui_textbox_display+0x1cc>
		x = self->pos_x + self->size_x - str_lenght - 1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f993 3000 	ldrsb.w	r3, [r3]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	789b      	ldrb	r3, [r3, #2]
 800146e:	4413      	add	r3, r2
 8001470:	b2da      	uxtb	r2, r3
 8001472:	7b7b      	ldrb	r3, [r7, #13]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	3b01      	subs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
		break;
 800147c:	e000      	b.n	8001480 <gui_textbox_display+0x1cc>
		break;
 800147e:	bf00      	nop
	}

	y = self->pos_y + self->size_y;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	78db      	ldrb	r3, [r3, #3]
 800148c:	4413      	add	r3, r2
 800148e:	73bb      	strb	r3, [r7, #14]

	switch (self->align_mode & 0xF0) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7bdb      	ldrb	r3, [r3, #15]
 8001494:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001498:	2b50      	cmp	r3, #80	@ 0x50
 800149a:	d06b      	beq.n	8001574 <gui_textbox_display+0x2c0>
 800149c:	2b50      	cmp	r3, #80	@ 0x50
 800149e:	dc77      	bgt.n	8001590 <gui_textbox_display+0x2dc>
 80014a0:	2b40      	cmp	r3, #64	@ 0x40
 80014a2:	d049      	beq.n	8001538 <gui_textbox_display+0x284>
 80014a4:	2b40      	cmp	r3, #64	@ 0x40
 80014a6:	dc73      	bgt.n	8001590 <gui_textbox_display+0x2dc>
 80014a8:	2b30      	cmp	r3, #48	@ 0x30
 80014aa:	d02e      	beq.n	800150a <gui_textbox_display+0x256>
 80014ac:	2b30      	cmp	r3, #48	@ 0x30
 80014ae:	dc6f      	bgt.n	8001590 <gui_textbox_display+0x2dc>
 80014b0:	2b10      	cmp	r3, #16
 80014b2:	d002      	beq.n	80014ba <gui_textbox_display+0x206>
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d010      	beq.n	80014da <gui_textbox_display+0x226>
	case V_ALIGN_DOWN_BASELINE:
		u8g2_SetFontPosBottom(&u8g2);
		y = self->pos_y + self->size_y - 1;
		break;
	default:
		break;
 80014b8:	e06a      	b.n	8001590 <gui_textbox_display+0x2dc>
		u8g2_SetFontPosBaseline(&u8g2);
 80014ba:	481e      	ldr	r0, [pc, #120]	@ (8001534 <gui_textbox_display+0x280>)
 80014bc:	f004 fcb4 	bl	8005e28 <u8g2_SetFontPosBaseline>
		y = self->pos_y + u8g2_GetAscent(&u8g2) + 1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <gui_textbox_display+0x280>)
 80014ca:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	3301      	adds	r3, #1
 80014d6:	73bb      	strb	r3, [r7, #14]
		break;
 80014d8:	e05b      	b.n	8001592 <gui_textbox_display+0x2de>
		u8g2_SetFontPosBaseline(&u8g2);
 80014da:	4816      	ldr	r0, [pc, #88]	@ (8001534 <gui_textbox_display+0x280>)
 80014dc:	f004 fca4 	bl	8005e28 <u8g2_SetFontPosBaseline>
		y = self->pos_y + (self->size_y / 2) + u8g2_GetAscent(&u8g2) / 2;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	78db      	ldrb	r3, [r3, #3]
 80014ec:	085b      	lsrs	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <gui_textbox_display+0x280>)
 80014f6:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 80014fa:	0fd9      	lsrs	r1, r3, #31
 80014fc:	440b      	add	r3, r1
 80014fe:	105b      	asrs	r3, r3, #1
 8001500:	b25b      	sxtb	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	73bb      	strb	r3, [r7, #14]
		break;
 8001508:	e043      	b.n	8001592 <gui_textbox_display+0x2de>
		u8g2_SetFontPosBaseline(&u8g2);
 800150a:	480a      	ldr	r0, [pc, #40]	@ (8001534 <gui_textbox_display+0x280>)
 800150c:	f004 fc8c 	bl	8005e28 <u8g2_SetFontPosBaseline>
		y = self->pos_y + self->size_y - 1;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	78db      	ldrb	r3, [r3, #3]
 800151c:	4413      	add	r3, r2
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	73bb      	strb	r3, [r7, #14]
		break;
 8001524:	e035      	b.n	8001592 <gui_textbox_display+0x2de>
 8001526:	bf00      	nop
 8001528:	080083c8 	.word	0x080083c8
 800152c:	080084d8 	.word	0x080084d8
 8001530:	080083d0 	.word	0x080083d0
 8001534:	200006e8 	.word	0x200006e8
		u8g2_SetFontPosBottom(&u8g2);
 8001538:	483d      	ldr	r0, [pc, #244]	@ (8001630 <gui_textbox_display+0x37c>)
 800153a:	f004 fc93 	bl	8005e64 <u8g2_SetFontPosBottom>
		y = self->pos_y + (self->size_y / 2) + u8g2_GetAscent(&u8g2) - u8g2_GetDescent(&u8g2) / 2;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	78db      	ldrb	r3, [r3, #3]
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <gui_textbox_display+0x37c>)
 8001554:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4413      	add	r3, r2
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b34      	ldr	r3, [pc, #208]	@ (8001630 <gui_textbox_display+0x37c>)
 8001560:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8001564:	0fd9      	lsrs	r1, r3, #31
 8001566:	440b      	add	r3, r1
 8001568:	105b      	asrs	r3, r3, #1
 800156a:	b25b      	sxtb	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	73bb      	strb	r3, [r7, #14]
		break;
 8001572:	e00e      	b.n	8001592 <gui_textbox_display+0x2de>
		u8g2_SetFontPosBottom(&u8g2);
 8001574:	482e      	ldr	r0, [pc, #184]	@ (8001630 <gui_textbox_display+0x37c>)
 8001576:	f004 fc75 	bl	8005e64 <u8g2_SetFontPosBottom>
		y = self->pos_y + self->size_y - 1;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	78db      	ldrb	r3, [r3, #3]
 8001586:	4413      	add	r3, r2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3b01      	subs	r3, #1
 800158c:	73bb      	strb	r3, [r7, #14]
		break;
 800158e:	e000      	b.n	8001592 <gui_textbox_display+0x2de>
		break;
 8001590:	bf00      	nop
	}

	u8g2_SetClipWindow(&u8g2,self->pos_x,self->pos_y,self->pos_x + self->size_x,self->pos_y + self->size_y - 1);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f993 3000 	ldrsb.w	r3, [r3]
 8001598:	b2d9      	uxtb	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80015a0:	b2d8      	uxtb	r0, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f993 3000 	ldrsb.w	r3, [r3]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	4413      	add	r3, r2
 80015b0:	b2dc      	uxtb	r4, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	78db      	ldrb	r3, [r3, #3]
 80015be:	4413      	add	r3, r2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4623      	mov	r3, r4
 80015ca:	4602      	mov	r2, r0
 80015cc:	4818      	ldr	r0, [pc, #96]	@ (8001630 <gui_textbox_display+0x37c>)
 80015ce:	f004 ff61 	bl	8006494 <u8g2_SetClipWindow>

	//static char cursor_temp_char;
	if (self->cursor_blink_mode == BLINK_BAR){
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7b1b      	ldrb	r3, [r3, #12]
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d11f      	bne.n	800161a <gui_textbox_display+0x366>
		//cursor_temp_char =


		switch (*self->cursor) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b5f      	cmp	r3, #95	@ 0x5f
 80015e2:	d010      	beq.n	8001606 <gui_textbox_display+0x352>
 80015e4:	2b5f      	cmp	r3, #95	@ 0x5f
 80015e6:	dc13      	bgt.n	8001610 <gui_textbox_display+0x35c>
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <gui_textbox_display+0x33e>
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	d005      	beq.n	80015fc <gui_textbox_display+0x348>
 80015f0:	e00e      	b.n	8001610 <gui_textbox_display+0x35c>
		case 0:
			*self->cursor = ' ';
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2220      	movs	r2, #32
 80015f8:	701a      	strb	r2, [r3, #0]
			break;
 80015fa:	e00e      	b.n	800161a <gui_textbox_display+0x366>
		case ' ':
			*self->cursor = '_';
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	225f      	movs	r2, #95	@ 0x5f
 8001602:	701a      	strb	r2, [r3, #0]
			break;
 8001604:	e009      	b.n	800161a <gui_textbox_display+0x366>

		case '_':
			*self->cursor = ' ';
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2220      	movs	r2, #32
 800160c:	701a      	strb	r2, [r3, #0]
			break;
 800160e:	e004      	b.n	800161a <gui_textbox_display+0x366>
		default:
			*self->cursor = '#';
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2223      	movs	r2, #35	@ 0x23
 8001616:	701a      	strb	r2, [r3, #0]
						break;
 8001618:	bf00      	nop
		}
	}

	u8g2_DrawUTF8(&u8g2,x,y,self->str);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	7bba      	ldrb	r2, [r7, #14]
 8001620:	7bf9      	ldrb	r1, [r7, #15]
 8001622:	4803      	ldr	r0, [pc, #12]	@ (8001630 <gui_textbox_display+0x37c>)
 8001624:	f004 fb6e 	bl	8005d04 <u8g2_DrawUTF8>

}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	200006e8 	.word	0x200006e8

08001634 <kbd_init>:
		{KBD_MSG_SW_4,KBD_MSG_SW_5,KBD_MSG_SW_6,KBD_MSG_SW_ENTER},
		{KBD_MSG_SW_7,KBD_MSG_SW_8,KBD_MSG_SW_9,KBD_MSG_SW_SET_VOLTAGE},
		{KBD_MSG_SW_0,KBD_MSG_DOT,KBD_MSG_SW_MENU,KBD_MSG_SW_SET_CURRENT_LIMIT}
};

void kbd_init(matrix_keyboard_t *self,cbuf_handle_t buffor){
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	for (uint8_t a = 0; a < KBD_ROWS; a++){
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e006      	b.n	8001652 <kbd_init+0x1e>
		self->previous[a]=0;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	2100      	movs	r1, #0
 800164a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t a = 0; a < KBD_ROWS; a++){
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	3301      	adds	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d9f5      	bls.n	8001644 <kbd_init+0x10>
	}
	self->buffor = buffor;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	605a      	str	r2, [r3, #4]
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <kbd_io_set_row>:

void kbd_io_set_row(matrix_keyboard_t *self, uint8_t data){
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	70fb      	strb	r3, [r7, #3]
	bsp_kbd_set_row(data);
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fae5 	bl	8000c48 <bsp_kbd_set_row>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <kbd_io_get_col>:

uint8_t kbd_io_get_col(matrix_keyboard_t *self){
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
return bsp_kbd_get_col();
 800168e:	f7ff fb13 	bl	8000cb8 <bsp_kbd_get_col>
 8001692:	4603      	mov	r3, r0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <kbd_proc>:

void kbd_proc (matrix_keyboard_t *self){
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	uint8_t col_data;
	uint8_t row_data;
	kbd_msg_t pressed_key;
	col_data = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	737b      	strb	r3, [r7, #13]

	//this->keyBuffer.clear();

	for (uint8_t a = 0; a < KBD_ROWS; a++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e050      	b.n	8001750 <kbd_proc+0xb4>
		row_data = ~(1 << a);
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2201      	movs	r2, #1
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	733b      	strb	r3, [r7, #12]
		kbd_io_set_row(self,row_data);
 80016bc:	7b3b      	ldrb	r3, [r7, #12]
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ffd2 	bl	800166a <kbd_io_set_row>
		//delay(2);
		col_data = kbd_io_get_col(self);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffdd 	bl	8001686 <kbd_io_get_col>
 80016cc:	4603      	mov	r3, r0
 80016ce:	737b      	strb	r3, [r7, #13]

		col_data = ~col_data;
 80016d0:	7b7b      	ldrb	r3, [r7, #13]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	737b      	strb	r3, [r7, #13]
		for (uint8_t b = 0; b < KBD_COLS; b++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	73bb      	strb	r3, [r7, #14]
 80016da:	e02f      	b.n	800173c <kbd_proc+0xa0>
			//if (bitRead(col_data, b) && bitRead(this->previous[a], b)) {
			if( ( col_data & 1<<b ) && (self->previous[a] & 1 << b ) ){
 80016dc:	7b7a      	ldrb	r2, [r7, #13]
 80016de:	7bbb      	ldrb	r3, [r7, #14]
 80016e0:	fa42 f303 	asr.w	r3, r2, r3
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d024      	beq.n	8001736 <kbd_proc+0x9a>
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	461a      	mov	r2, r3
 80016f4:	7bbb      	ldrb	r3, [r7, #14]
 80016f6:	fa42 f303 	asr.w	r3, r2, r3
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d019      	beq.n	8001736 <kbd_proc+0x9a>

				//bitClear(kbd::active[a],b);
				if (!circular_buf_full(self->buffor)) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fc64 	bl	8000fd4 <circular_buf_full>
 800170c:	4603      	mov	r3, r0
 800170e:	f083 0301 	eor.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00e      	beq.n	8001736 <kbd_proc+0x9a>
					pressed_key = key_table[a][b];
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	4910      	ldr	r1, [pc, #64]	@ (8001760 <kbd_proc+0xc4>)
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	440a      	add	r2, r1
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	72fb      	strb	r3, [r7, #11]
					circular_buf_put(self->buffor,pressed_key);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	7afa      	ldrb	r2, [r7, #11]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fbb7 	bl	8000ea4 <circular_buf_put>
		for (uint8_t b = 0; b < KBD_COLS; b++) {
 8001736:	7bbb      	ldrb	r3, [r7, #14]
 8001738:	3301      	adds	r3, #1
 800173a:	73bb      	strb	r3, [r7, #14]
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d9cc      	bls.n	80016dc <kbd_proc+0x40>

			//if (bitRead(col_data, b) && bitRead(this->previous[a], b)) {
				//bitClear(kbd::active[a],b);
			//}
		}
		self->previous[a] = col_data;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	7b79      	ldrb	r1, [r7, #13]
 8001748:	54d1      	strb	r1, [r2, r3]
	for (uint8_t a = 0; a < KBD_ROWS; a++) {
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	3301      	adds	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d9ab      	bls.n	80016ae <kbd_proc+0x12>
	}
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	080084ec 	.word	0x080084ec

08001764 <gpio_and_delay_cb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	72fb      	strb	r3, [r7, #11]
 8001772:	4613      	mov	r3, r2
 8001774:	72bb      	strb	r3, [r7, #10]
	switch(msg){
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	3b28      	subs	r3, #40	@ 0x28
 800177a:	2b25      	cmp	r3, #37	@ 0x25
 800177c:	f200 80db 	bhi.w	8001936 <gpio_and_delay_cb+0x1d2>
 8001780:	a201      	add	r2, pc, #4	@ (adr r2, 8001788 <gpio_and_delay_cb+0x24>)
 8001782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001786:	bf00      	nop
 8001788:	0800193b 	.word	0x0800193b
 800178c:	08001869 	.word	0x08001869
 8001790:	08001873 	.word	0x08001873
 8001794:	08001889 	.word	0x08001889
 8001798:	0800193b 	.word	0x0800193b
 800179c:	08001821 	.word	0x08001821
 80017a0:	08001937 	.word	0x08001937
 80017a4:	08001937 	.word	0x08001937
 80017a8:	08001937 	.word	0x08001937
 80017ac:	08001937 	.word	0x08001937
 80017b0:	08001937 	.word	0x08001937
 80017b4:	08001937 	.word	0x08001937
 80017b8:	08001937 	.word	0x08001937
 80017bc:	08001937 	.word	0x08001937
 80017c0:	08001937 	.word	0x08001937
 80017c4:	08001937 	.word	0x08001937
 80017c8:	08001937 	.word	0x08001937
 80017cc:	08001937 	.word	0x08001937
 80017d0:	08001937 	.word	0x08001937
 80017d4:	08001937 	.word	0x08001937
 80017d8:	08001937 	.word	0x08001937
 80017dc:	08001937 	.word	0x08001937
 80017e0:	08001937 	.word	0x08001937
 80017e4:	08001937 	.word	0x08001937
 80017e8:	0800188d 	.word	0x0800188d
 80017ec:	080018af 	.word	0x080018af
 80017f0:	08001937 	.word	0x08001937
 80017f4:	08001937 	.word	0x08001937
 80017f8:	08001937 	.word	0x08001937
 80017fc:	08001937 	.word	0x08001937
 8001800:	08001937 	.word	0x08001937
 8001804:	08001937 	.word	0x08001937
 8001808:	08001937 	.word	0x08001937
 800180c:	080018d1 	.word	0x080018d1
 8001810:	080018f3 	.word	0x080018f3
 8001814:	08001915 	.word	0x08001915
 8001818:	08001825 	.word	0x08001825
 800181c:	08001847 	.word	0x08001847

			case U8X8_MSG_DELAY_I2C:
				//for (uint16_t n = 0; n < 90; n++)
				//for (uint16_t n = 0; n < 2; n++)
				//{
					__NOP();
 8001820:	bf00      	nop
				//}

				break;
 8001822:	e08b      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			case U8X8_MSG_GPIO_I2C_CLOCK:
				if (arg_int) HAL_GPIO_WritePin(I2C_SCL_PORT, I2C_SCL_PIN, SET);
 8001824:	7abb      	ldrb	r3, [r7, #10]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <gpio_and_delay_cb+0xd4>
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001830:	4845      	ldr	r0, [pc, #276]	@ (8001948 <gpio_and_delay_cb+0x1e4>)
 8001832:	f001 f89f 	bl	8002974 <HAL_GPIO_WritePin>
					else HAL_GPIO_WritePin(I2C_SCL_PORT, I2C_SCL_PIN, RESET);
				break;
 8001836:	e081      	b.n	800193c <gpio_and_delay_cb+0x1d8>
					else HAL_GPIO_WritePin(I2C_SCL_PORT, I2C_SCL_PIN, RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800183e:	4842      	ldr	r0, [pc, #264]	@ (8001948 <gpio_and_delay_cb+0x1e4>)
 8001840:	f001 f898 	bl	8002974 <HAL_GPIO_WritePin>
				break;
 8001844:	e07a      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			case U8X8_MSG_GPIO_I2C_DATA:
				if (arg_int) HAL_GPIO_WritePin(I2C_SDA_PORT, I2C_SDA_PIN, SET);
 8001846:	7abb      	ldrb	r3, [r7, #10]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <gpio_and_delay_cb+0xf6>
 800184c:	2201      	movs	r2, #1
 800184e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001852:	483d      	ldr	r0, [pc, #244]	@ (8001948 <gpio_and_delay_cb+0x1e4>)
 8001854:	f001 f88e 	bl	8002974 <HAL_GPIO_WritePin>
					else HAL_GPIO_WritePin(I2C_SDA_PORT, I2C_SDA_PIN, RESET);
				break;
 8001858:	e070      	b.n	800193c <gpio_and_delay_cb+0x1d8>
					else HAL_GPIO_WritePin(I2C_SDA_PORT, I2C_SDA_PIN, RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001860:	4839      	ldr	r0, [pc, #228]	@ (8001948 <gpio_and_delay_cb+0x1e4>)
 8001862:	f001 f887 	bl	8002974 <HAL_GPIO_WritePin>
				break;
 8001866:	e069      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			//Function which implements a delay, arg_int contains the amount of ms
			case U8X8_MSG_DELAY_MILLI:
			HAL_Delay(arg_int);
 8001868:	7abb      	ldrb	r3, [r7, #10]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fda0 	bl	80023b0 <HAL_Delay>

			break;
 8001870:	e064      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			//Function which delays 10us
			case U8X8_MSG_DELAY_10MICRO:
			for (uint16_t n = 0; n < 90; n++)
 8001872:	2300      	movs	r3, #0
 8001874:	82fb      	strh	r3, [r7, #22]
 8001876:	e003      	b.n	8001880 <gpio_and_delay_cb+0x11c>
			{
				__NOP();
 8001878:	bf00      	nop
			for (uint16_t n = 0; n < 90; n++)
 800187a:	8afb      	ldrh	r3, [r7, #22]
 800187c:	3301      	adds	r3, #1
 800187e:	82fb      	strh	r3, [r7, #22]
 8001880:	8afb      	ldrh	r3, [r7, #22]
 8001882:	2b59      	cmp	r3, #89	@ 0x59
 8001884:	d9f8      	bls.n	8001878 <gpio_and_delay_cb+0x114>
			}
			break;
 8001886:	e059      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			case U8X8_MSG_DELAY_NANO:

			break;
			//Function which delays 100ns
			case U8X8_MSG_DELAY_100NANO:
			__NOP();
 8001888:	bf00      	nop

			break;
 800188a:	e057      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			//Function to define the logic level of the clockline
			case U8X8_MSG_GPIO_SPI_CLOCK:
				if (arg_int) HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, RESET);
 800188c:	7abb      	ldrb	r3, [r7, #10]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <gpio_and_delay_cb+0x13c>
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001898:	482c      	ldr	r0, [pc, #176]	@ (800194c <gpio_and_delay_cb+0x1e8>)
 800189a:	f001 f86b 	bl	8002974 <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, SET);

			break;
 800189e:	e04d      	b.n	800193c <gpio_and_delay_cb+0x1d8>
				else HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018a6:	4829      	ldr	r0, [pc, #164]	@ (800194c <gpio_and_delay_cb+0x1e8>)
 80018a8:	f001 f864 	bl	8002974 <HAL_GPIO_WritePin>
			break;
 80018ac:	e046      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			//Function to define the logic level of the data line to the display
			case U8X8_MSG_GPIO_SPI_DATA:
				if (arg_int) HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, SET);
 80018ae:	7abb      	ldrb	r3, [r7, #10]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <gpio_and_delay_cb+0x15e>
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018ba:	4824      	ldr	r0, [pc, #144]	@ (800194c <gpio_and_delay_cb+0x1e8>)
 80018bc:	f001 f85a 	bl	8002974 <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, RESET);

			break;
 80018c0:	e03c      	b.n	800193c <gpio_and_delay_cb+0x1d8>
				else HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018c8:	4820      	ldr	r0, [pc, #128]	@ (800194c <gpio_and_delay_cb+0x1e8>)
 80018ca:	f001 f853 	bl	8002974 <HAL_GPIO_WritePin>
			break;
 80018ce:	e035      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			// Function to define the logic level of the CS line
			case U8X8_MSG_GPIO_CS:
				if (arg_int) HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 80018d0:	7abb      	ldrb	r3, [r7, #10]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <gpio_and_delay_cb+0x180>
 80018d6:	2200      	movs	r2, #0
 80018d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018dc:	481c      	ldr	r0, [pc, #112]	@ (8001950 <gpio_and_delay_cb+0x1ec>)
 80018de:	f001 f849 	bl	8002974 <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);

			break;
 80018e2:	e02b      	b.n	800193c <gpio_and_delay_cb+0x1d8>
				else HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ea:	4819      	ldr	r0, [pc, #100]	@ (8001950 <gpio_and_delay_cb+0x1ec>)
 80018ec:	f001 f842 	bl	8002974 <HAL_GPIO_WritePin>
			break;
 80018f0:	e024      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			//Function to define the logic level of the Data/ Command line
			case U8X8_MSG_GPIO_DC:
				if (arg_int) HAL_GPIO_WritePin(CD_LCD_PORT, CD_LCD_PIN, SET);
 80018f2:	7abb      	ldrb	r3, [r7, #10]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <gpio_and_delay_cb+0x1a2>
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018fe:	4814      	ldr	r0, [pc, #80]	@ (8001950 <gpio_and_delay_cb+0x1ec>)
 8001900:	f001 f838 	bl	8002974 <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(CD_LCD_PORT, CD_LCD_PIN, RESET);

			break;
 8001904:	e01a      	b.n	800193c <gpio_and_delay_cb+0x1d8>
				else HAL_GPIO_WritePin(CD_LCD_PORT, CD_LCD_PIN, RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800190c:	4810      	ldr	r0, [pc, #64]	@ (8001950 <gpio_and_delay_cb+0x1ec>)
 800190e:	f001 f831 	bl	8002974 <HAL_GPIO_WritePin>
			break;
 8001912:	e013      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			//Function to define the logic level of the RESET line
			case U8X8_MSG_GPIO_RESET:
				if (arg_int) HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, SET);
 8001914:	7abb      	ldrb	r3, [r7, #10]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <gpio_and_delay_cb+0x1c4>
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001920:	480a      	ldr	r0, [pc, #40]	@ (800194c <gpio_and_delay_cb+0x1e8>)
 8001922:	f001 f827 	bl	8002974 <HAL_GPIO_WritePin>
				else HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);

			break;
 8001926:	e009      	b.n	800193c <gpio_and_delay_cb+0x1d8>
				else HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800192e:	4807      	ldr	r0, [pc, #28]	@ (800194c <gpio_and_delay_cb+0x1e8>)
 8001930:	f001 f820 	bl	8002974 <HAL_GPIO_WritePin>
			break;
 8001934:	e002      	b.n	800193c <gpio_and_delay_cb+0x1d8>
			default:
				return 0; //A message was received which is not implemented, return 0 to indicate an error
 8001936:	2300      	movs	r3, #0
 8001938:	e001      	b.n	800193e <gpio_and_delay_cb+0x1da>
			break;
 800193a:	bf00      	nop
		}

		return 1; // command processed successfully.
 800193c:	2301      	movs	r3, #1
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40020400 	.word	0x40020400
 800194c:	40021000 	.word	0x40021000
 8001950:	40021400 	.word	0x40021400

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001958:	f000 fcb8 	bl	80022cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195c:	f000 f84e 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001960:	f000 f912 	bl	8001b88 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001964:	f000 f8b6 	bl	8001ad4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001968:	f000 f8de 	bl	8001b28 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_sw_i2c, gpio_and_delay_cb);
 800196c:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <main+0x90>)
 800196e:	4a1e      	ldr	r2, [pc, #120]	@ (80019e8 <main+0x94>)
 8001970:	491e      	ldr	r1, [pc, #120]	@ (80019ec <main+0x98>)
 8001972:	481f      	ldr	r0, [pc, #124]	@ (80019f0 <main+0x9c>)
 8001974:	f003 fc96 	bl	80052a4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
  //u8g2_Setup_st7565_erc12864_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, &gpio_and_delay_cb);
  //u8g2_Setup_st7565_erc12864_alt_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, &gpio_and_delay_cb);
  //u8g2_Setup_st7565_nhd_c12864_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, &gpio_and_delay_cb);
  //u8g2_Setup_st7565_jlx12864_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, &gpio_and_delay_cb);

  u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 8001978:	481d      	ldr	r0, [pc, #116]	@ (80019f0 <main+0x9c>)
 800197a:	f005 fc13 	bl	80071a4 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
 800197e:	2100      	movs	r1, #0
 8001980:	481b      	ldr	r0, [pc, #108]	@ (80019f0 <main+0x9c>)
 8001982:	f005 fc1e 	bl	80071c2 <u8x8_SetPowerSave>

  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800198c:	4819      	ldr	r0, [pc, #100]	@ (80019f4 <main+0xa0>)
 800198e:	f000 fff1 	bl	8002974 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001992:	2064      	movs	r0, #100	@ 0x64
 8001994:	f000 fd0c 	bl	80023b0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800199e:	4815      	ldr	r0, [pc, #84]	@ (80019f4 <main+0xa0>)
 80019a0:	f000 ffe8 	bl	8002974 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80019a4:	20c8      	movs	r0, #200	@ 0xc8
 80019a6:	f000 fd03 	bl	80023b0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	2101      	movs	r1, #1
 80019ae:	4812      	ldr	r0, [pc, #72]	@ (80019f8 <main+0xa4>)
 80019b0:	f000 ffe0 	bl	8002974 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2101      	movs	r1, #1
 80019b8:	480f      	ldr	r0, [pc, #60]	@ (80019f8 <main+0xa4>)
 80019ba:	f000 ffdb 	bl	8002974 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <main+0xa4>)
 80019c4:	f000 ffd6 	bl	8002974 <HAL_GPIO_WritePin>

	  HAL_Delay(2000);
 80019c8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019cc:	f000 fcf0 	bl	80023b0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2180      	movs	r1, #128	@ 0x80
 80019d4:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <main+0xa4>)
 80019d6:	f000 ffcd 	bl	8002974 <HAL_GPIO_WritePin>


	  app_run();
 80019da:	f7ff f80d 	bl	80009f8 <app_run>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, SET);
 80019de:	bf00      	nop
 80019e0:	e7e3      	b.n	80019aa <main+0x56>
 80019e2:	bf00      	nop
 80019e4:	08001765 	.word	0x08001765
 80019e8:	08006ba5 	.word	0x08006ba5
 80019ec:	0800a8ec 	.word	0x0800a8ec
 80019f0:	200006e8 	.word	0x200006e8
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40020400 	.word	0x40020400

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b094      	sub	sp, #80	@ 0x50
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	2234      	movs	r2, #52	@ 0x34
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 fe69 	bl	80076e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <SystemClock_Config+0xd0>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	4a28      	ldr	r2, [pc, #160]	@ (8001acc <SystemClock_Config+0xd0>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a30:	4b26      	ldr	r3, [pc, #152]	@ (8001acc <SystemClock_Config+0xd0>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <SystemClock_Config+0xd4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a22      	ldr	r2, [pc, #136]	@ (8001ad0 <SystemClock_Config+0xd4>)
 8001a46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <SystemClock_Config+0xd4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a5c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001a60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a62:	2302      	movs	r3, #2
 8001a64:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001a70:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a76:	2304      	movs	r3, #4
 8001a78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 fdb2 	bl	80035f0 <HAL_RCC_OscConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a92:	f000 f9c3 	bl	8001e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a96:	230f      	movs	r3, #15
 8001a98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001aac:	f107 0308 	add.w	r3, r7, #8
 8001ab0:	2103      	movs	r1, #3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 f8f0 	bl	8002c98 <HAL_RCC_ClockConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001abe:	f000 f9ad 	bl	8001e1c <Error_Handler>
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3750      	adds	r7, #80	@ 0x50
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <MX_USART3_UART_Init+0x4c>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	@ (8001b24 <MX_USART3_UART_Init+0x50>)
 8001adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <MX_USART3_UART_Init+0x4c>)
 8001ae0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <MX_USART3_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <MX_USART3_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <MX_USART3_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MX_USART3_UART_Init+0x4c>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <MX_USART3_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <MX_USART3_UART_Init+0x4c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <MX_USART3_UART_Init+0x4c>)
 8001b0c:	f001 fff4 	bl	8003af8 <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b16:	f000 f981 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001bc 	.word	0x200001bc
 8001b24:	40004800 	.word	0x40004800

08001b28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b36:	2206      	movs	r2, #6
 8001b38:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b40:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	@ (8001b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b72:	f000 ff3c 	bl	80029ee <HAL_PCD_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001b7c:	f000 f94e 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000204 	.word	0x20000204

08001b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08e      	sub	sp, #56	@ 0x38
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	4b98      	ldr	r3, [pc, #608]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a97      	ldr	r2, [pc, #604]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001ba8:	f043 0310 	orr.w	r3, r3, #16
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b95      	ldr	r3, [pc, #596]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	4b91      	ldr	r3, [pc, #580]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a90      	ldr	r2, [pc, #576]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bca:	4b8e      	ldr	r3, [pc, #568]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	4b8a      	ldr	r3, [pc, #552]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a89      	ldr	r2, [pc, #548]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001be0:	f043 0320 	orr.w	r3, r3, #32
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b87      	ldr	r3, [pc, #540]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	4b83      	ldr	r3, [pc, #524]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a82      	ldr	r2, [pc, #520]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b80      	ldr	r3, [pc, #512]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b7c      	ldr	r3, [pc, #496]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a7b      	ldr	r2, [pc, #492]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b79      	ldr	r3, [pc, #484]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b75      	ldr	r3, [pc, #468]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a74      	ldr	r2, [pc, #464]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b72      	ldr	r3, [pc, #456]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b6e      	ldr	r3, [pc, #440]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a6d      	ldr	r2, [pc, #436]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b6b      	ldr	r3, [pc, #428]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	4b67      	ldr	r3, [pc, #412]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a66      	ldr	r2, [pc, #408]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b64      	ldr	r3, [pc, #400]	@ (8001e04 <MX_GPIO_Init+0x27c>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f24d 0178 	movw	r1, #53368	@ 0xd078
 8001c84:	4860      	ldr	r0, [pc, #384]	@ (8001e08 <MX_GPIO_Init+0x280>)
 8001c86:	f000 fe75 	bl	8002974 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f244 3181 	movw	r1, #17281	@ 0x4381
 8001c90:	485e      	ldr	r0, [pc, #376]	@ (8001e0c <MX_GPIO_Init+0x284>)
 8001c92:	f000 fe6f 	bl	8002974 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001c9c:	485c      	ldr	r0, [pc, #368]	@ (8001e10 <MX_GPIO_Init+0x288>)
 8001c9e:	f000 fe69 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2140      	movs	r1, #64	@ 0x40
 8001ca6:	485b      	ldr	r0, [pc, #364]	@ (8001e14 <MX_GPIO_Init+0x28c>)
 8001ca8:	f000 fe64 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE12 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001cac:	f24d 0378 	movw	r3, #53368	@ 0xd078
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4850      	ldr	r0, [pc, #320]	@ (8001e08 <MX_GPIO_Init+0x280>)
 8001cc6:	f000 fca9 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001cca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	484d      	ldr	r0, [pc, #308]	@ (8001e18 <MX_GPIO_Init+0x290>)
 8001ce2:	f000 fc9b 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001ce6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4845      	ldr	r0, [pc, #276]	@ (8001e10 <MX_GPIO_Init+0x288>)
 8001cfc:	f000 fc8e 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8001d00:	f244 3381 	movw	r3, #17281	@ 0x4381
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d16:	4619      	mov	r1, r3
 8001d18:	483c      	ldr	r0, [pc, #240]	@ (8001e0c <MX_GPIO_Init+0x284>)
 8001d1a:	f000 fc7f 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d1e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d34:	4619      	mov	r1, r3
 8001d36:	4836      	ldr	r0, [pc, #216]	@ (8001e10 <MX_GPIO_Init+0x288>)
 8001d38:	f000 fc70 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	482f      	ldr	r0, [pc, #188]	@ (8001e10 <MX_GPIO_Init+0x288>)
 8001d54:	f000 fc62 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	482a      	ldr	r0, [pc, #168]	@ (8001e14 <MX_GPIO_Init+0x28c>)
 8001d6c:	f000 fc56 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001d70:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d84:	4619      	mov	r1, r3
 8001d86:	4820      	ldr	r0, [pc, #128]	@ (8001e08 <MX_GPIO_Init+0x280>)
 8001d88:	f000 fc48 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4819      	ldr	r0, [pc, #100]	@ (8001e08 <MX_GPIO_Init+0x280>)
 8001da2:	f000 fc3b 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001da6:	2340      	movs	r3, #64	@ 0x40
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4815      	ldr	r0, [pc, #84]	@ (8001e14 <MX_GPIO_Init+0x28c>)
 8001dbe:	f000 fc2d 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001dc2:	2380      	movs	r3, #128	@ 0x80
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480f      	ldr	r0, [pc, #60]	@ (8001e14 <MX_GPIO_Init+0x28c>)
 8001dd6:	f000 fc21 	bl	800261c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2017      	movs	r0, #23
 8001de0:	f000 fbe5 	bl	80025ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001de4:	2017      	movs	r0, #23
 8001de6:	f000 fbfe 	bl	80025e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2028      	movs	r0, #40	@ 0x28
 8001df0:	f000 fbdd 	bl	80025ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001df4:	2028      	movs	r0, #40	@ 0x28
 8001df6:	f000 fbf6 	bl	80025e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3738      	adds	r7, #56	@ 0x38
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40021400 	.word	0x40021400
 8001e14:	40021800 	.word	0x40021800
 8001e18:	40020800 	.word	0x40020800

08001e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e20:	b672      	cpsid	i
}
 8001e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <Error_Handler+0x8>

08001e28 <psu_init>:

#include "psu.h"
#include "debug.h"
#include "stdio.h"

void psu_init(PSU_control_t *self){
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	self->current_limit_active_flag = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	721a      	strb	r2, [r3, #8]
	self->measured_current_mA = 0;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	80da      	strh	r2, [r3, #6]
	self->measured_voltage_mV = 0;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	809a      	strh	r2, [r3, #4]
	self->output_relay_flag = 0;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	725a      	strb	r2, [r3, #9]
	self->set_current_limit_mA = 0;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	805a      	strh	r2, [r3, #2]
	self->set_voltage_mV = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	801a      	strh	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <HAL_MspInit+0x58>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <HAL_MspInit+0x58>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <HAL_MspInit+0x58>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <HAL_MspInit+0x58>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <HAL_MspInit+0x58>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_MspInit+0x58>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f000 fb83 	bl	80025ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f000 fb9c 	bl	80025e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	@ 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a19      	ldr	r2, [pc, #100]	@ (8001f40 <HAL_UART_MspInit+0x84>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d12c      	bne.n	8001f38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <HAL_UART_MspInit+0x88>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	4a17      	ldr	r2, [pc, #92]	@ (8001f44 <HAL_UART_MspInit+0x88>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_UART_MspInit+0x88>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_UART_MspInit+0x88>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a10      	ldr	r2, [pc, #64]	@ (8001f44 <HAL_UART_MspInit+0x88>)
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_UART_MspInit+0x88>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f28:	2307      	movs	r3, #7
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <HAL_UART_MspInit+0x8c>)
 8001f34:	f000 fb72 	bl	800261c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	@ 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40004800 	.word	0x40004800
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020c00 	.word	0x40020c00

08001f4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0a0      	sub	sp, #128	@ 0x80
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	2258      	movs	r2, #88	@ 0x58
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f005 fbb8 	bl	80076e2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f7a:	d14d      	bne.n	8002018 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001f80:	2300      	movs	r3, #0
 8001f82:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 f8a5 	bl	80030d8 <HAL_RCCEx_PeriphCLKConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8001f94:	f7ff ff42 	bl	8001e1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	4b20      	ldr	r3, [pc, #128]	@ (8002020 <HAL_PCD_MspInit+0xd4>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8002020 <HAL_PCD_MspInit+0xd4>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <HAL_PCD_MspInit+0xd4>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fb4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001fb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4814      	ldr	r0, [pc, #80]	@ (8002024 <HAL_PCD_MspInit+0xd8>)
 8001fd2:	f000 fb23 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480e      	ldr	r0, [pc, #56]	@ (8002024 <HAL_PCD_MspInit+0xd8>)
 8001fec:	f000 fb16 	bl	800261c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_PCD_MspInit+0xd4>)
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <HAL_PCD_MspInit+0xd4>)
 8001ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ffa:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <HAL_PCD_MspInit+0xd4>)
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	4a06      	ldr	r2, [pc, #24]	@ (8002020 <HAL_PCD_MspInit+0xd4>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200a:	6453      	str	r3, [r2, #68]	@ 0x44
 800200c:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <HAL_PCD_MspInit+0xd4>)
 800200e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002018:	bf00      	nop
 800201a:	3780      	adds	r7, #128	@ 0x80
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <NMI_Handler+0x4>

08002030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <MemManage_Handler+0x4>

08002040 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <UsageFault_Handler+0x4>

08002050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207e:	f000 f977 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_ticks();
 8002082:	f7fe fb11 	bl	80006a8 <app_ticks>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}

0800208a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800208e:	f000 fde9 	bl	8002c64 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}

08002096 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800209a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800209e:	f000 fc83 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80020aa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80020ae:	f000 fc7b 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80020b2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020b6:	f000 fc77 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80020ba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80020be:	f000 fc73 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  return 1;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_kill>:

int _kill(int pid, int sig)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e0:	f005 fb70 	bl	80077c4 <__errno>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2216      	movs	r2, #22
 80020e8:	601a      	str	r2, [r3, #0]
  return -1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_exit>:

void _exit (int status)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffe7 	bl	80020d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <_exit+0x12>

0800210c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e00a      	b.n	8002134 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800211e:	f3af 8000 	nop.w
 8002122:	4601      	mov	r1, r0
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	b2ca      	uxtb	r2, r1
 800212c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	dbf0      	blt.n	800211e <_read+0x12>
  }

  return len;
 800213c:	687b      	ldr	r3, [r7, #4]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e009      	b.n	800216c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	60ba      	str	r2, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fd43 	bl	8000bec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf1      	blt.n	8002158 <_write+0x12>
  }
  return len;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_close>:

int _close(int file)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021a6:	605a      	str	r2, [r3, #4]
  return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_isatty>:

int _isatty(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f0:	4a14      	ldr	r2, [pc, #80]	@ (8002244 <_sbrk+0x5c>)
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <_sbrk+0x60>)
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021fc:	4b13      	ldr	r3, [pc, #76]	@ (800224c <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <_sbrk+0x64>)
 8002206:	4a12      	ldr	r2, [pc, #72]	@ (8002250 <_sbrk+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002218:	f005 fad4 	bl	80077c4 <__errno>
 800221c:	4603      	mov	r3, r0
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	e009      	b.n	800223c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222e:	4b07      	ldr	r3, [pc, #28]	@ (800224c <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <_sbrk+0x64>)
 8002238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20050000 	.word	0x20050000
 8002248:	00000400 	.word	0x00000400
 800224c:	20000770 	.word	0x20000770
 8002250:	20000cc8 	.word	0x20000cc8

08002254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800227c:	f7ff ffea 	bl	8002254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002280:	480c      	ldr	r0, [pc, #48]	@ (80022b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002282:	490d      	ldr	r1, [pc, #52]	@ (80022b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002284:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002288:	e002      	b.n	8002290 <LoopCopyDataInit>

0800228a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800228c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228e:	3304      	adds	r3, #4

08002290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002294:	d3f9      	bcc.n	800228a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002298:	4c0a      	ldr	r4, [pc, #40]	@ (80022c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800229c:	e001      	b.n	80022a2 <LoopFillZerobss>

0800229e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a0:	3204      	adds	r2, #4

080022a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a4:	d3fb      	bcc.n	800229e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f005 fa93 	bl	80077d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022aa:	f7ff fb53 	bl	8001954 <main>
  bx  lr    
 80022ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80022bc:	0800a9e8 	.word	0x0800a9e8
  ldr r2, =_sbss
 80022c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80022c4:	20000cc8 	.word	0x20000cc8

080022c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC_IRQHandler>
	...

080022cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d0:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <HAL_Init+0x40>)
 80022d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022dc:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <HAL_Init+0x40>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e8:	4b08      	ldr	r3, [pc, #32]	@ (800230c <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	@ (800230c <HAL_Init+0x40>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 f94f 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 f808 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002300:	f7ff fdae 	bl	8001e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f967 	bl	8002602 <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 f92f 	bl	80025ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	@ (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000000 	.word	0x20000000
 8002368:	20000008 	.word	0x20000008
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000008 	.word	0x20000008
 8002394:	20000774 	.word	0x20000774

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000774 	.word	0x20000774

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db0b      	blt.n	8002486 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4907      	ldr	r1, [pc, #28]	@ (8002494 <__NVIC_EnableIRQ+0x38>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2001      	movs	r0, #1
 800247e:	fa00 f202 	lsl.w	r2, r0, r2
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100

08002498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	db0a      	blt.n	80024c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	490c      	ldr	r1, [pc, #48]	@ (80024e4 <__NVIC_SetPriority+0x4c>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c0:	e00a      	b.n	80024d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4908      	ldr	r1, [pc, #32]	@ (80024e8 <__NVIC_SetPriority+0x50>)
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3b04      	subs	r3, #4
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	440b      	add	r3, r1
 80024d6:	761a      	strb	r2, [r3, #24]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1c3 0307 	rsb	r3, r3, #7
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf28      	it	cs
 800250a:	2304      	movcs	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3304      	adds	r3, #4
 8002512:	2b06      	cmp	r3, #6
 8002514:	d902      	bls.n	800251c <NVIC_EncodePriority+0x30>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3b03      	subs	r3, #3
 800251a:	e000      	b.n	800251e <NVIC_EncodePriority+0x32>
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 32ff 	mov.w	r2, #4294967295
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43d9      	mvns	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	4313      	orrs	r3, r2
         );
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	@ 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002564:	d301      	bcc.n	800256a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <SysTick_Config+0x40>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002572:	210f      	movs	r1, #15
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f7ff ff8e 	bl	8002498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <SysTick_Config+0x40>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <SysTick_Config+0x40>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff29 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c0:	f7ff ff3e 	bl	8002440 <__NVIC_GetPriorityGrouping>
 80025c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7ff ff8e 	bl	80024ec <NVIC_EncodePriority>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff5d 	bl	8002498 <__NVIC_SetPriority>
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff31 	bl	800245c <__NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffa2 	bl	8002554 <SysTick_Config>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e165      	b.n	8002904 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 8154 	bne.w	80028fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d005      	beq.n	800266e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266a:	2b02      	cmp	r3, #2
 800266c:	d130      	bne.n	80026d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 0201 	and.w	r2, r3, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d017      	beq.n	800270c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d123      	bne.n	8002760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0203 	and.w	r2, r3, #3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80ae 	beq.w	80028fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b5d      	ldr	r3, [pc, #372]	@ (800291c <HAL_GPIO_Init+0x300>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	4a5c      	ldr	r2, [pc, #368]	@ (800291c <HAL_GPIO_Init+0x300>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b2:	4b5a      	ldr	r3, [pc, #360]	@ (800291c <HAL_GPIO_Init+0x300>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027be:	4a58      	ldr	r2, [pc, #352]	@ (8002920 <HAL_GPIO_Init+0x304>)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	220f      	movs	r2, #15
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002924 <HAL_GPIO_Init+0x308>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d025      	beq.n	8002836 <HAL_GPIO_Init+0x21a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002928 <HAL_GPIO_Init+0x30c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01f      	beq.n	8002832 <HAL_GPIO_Init+0x216>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a4d      	ldr	r2, [pc, #308]	@ (800292c <HAL_GPIO_Init+0x310>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d019      	beq.n	800282e <HAL_GPIO_Init+0x212>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002930 <HAL_GPIO_Init+0x314>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <HAL_GPIO_Init+0x20e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4b      	ldr	r2, [pc, #300]	@ (8002934 <HAL_GPIO_Init+0x318>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00d      	beq.n	8002826 <HAL_GPIO_Init+0x20a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4a      	ldr	r2, [pc, #296]	@ (8002938 <HAL_GPIO_Init+0x31c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <HAL_GPIO_Init+0x206>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a49      	ldr	r2, [pc, #292]	@ (800293c <HAL_GPIO_Init+0x320>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_GPIO_Init+0x202>
 800281a:	2306      	movs	r3, #6
 800281c:	e00c      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 800281e:	2307      	movs	r3, #7
 8002820:	e00a      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002822:	2305      	movs	r3, #5
 8002824:	e008      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002826:	2304      	movs	r3, #4
 8002828:	e006      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 800282a:	2303      	movs	r3, #3
 800282c:	e004      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 800282e:	2302      	movs	r3, #2
 8002830:	e002      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002836:	2300      	movs	r3, #0
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f002 0203 	and.w	r2, r2, #3
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	4093      	lsls	r3, r2
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002848:	4935      	ldr	r1, [pc, #212]	@ (8002920 <HAL_GPIO_Init+0x304>)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	3302      	adds	r3, #2
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002856:	4b3a      	ldr	r3, [pc, #232]	@ (8002940 <HAL_GPIO_Init+0x324>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800287a:	4a31      	ldr	r2, [pc, #196]	@ (8002940 <HAL_GPIO_Init+0x324>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002880:	4b2f      	ldr	r3, [pc, #188]	@ (8002940 <HAL_GPIO_Init+0x324>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a4:	4a26      	ldr	r2, [pc, #152]	@ (8002940 <HAL_GPIO_Init+0x324>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028aa:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_GPIO_Init+0x324>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002940 <HAL_GPIO_Init+0x324>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <HAL_GPIO_Init+0x324>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f8:	4a11      	ldr	r2, [pc, #68]	@ (8002940 <HAL_GPIO_Init+0x324>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3301      	adds	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	f67f ae96 	bls.w	8002638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3724      	adds	r7, #36	@ 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40013800 	.word	0x40013800
 8002924:	40020000 	.word	0x40020000
 8002928:	40020400 	.word	0x40020400
 800292c:	40020800 	.word	0x40020800
 8002930:	40020c00 	.word	0x40020c00
 8002934:	40021000 	.word	0x40021000
 8002938:	40021400 	.word	0x40021400
 800293c:	40021800 	.word	0x40021800
 8002940:	40013c00 	.word	0x40013c00

08002944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e001      	b.n	8002966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
 8002980:	4613      	mov	r3, r2
 8002982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002984:	787b      	ldrb	r3, [r7, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002990:	e003      	b.n	800299a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	041a      	lsls	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	619a      	str	r2, [r3, #24]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029b2:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029be:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f806 	bl	80029d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40013c00 	.word	0x40013c00

080029d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af02      	add	r7, sp, #8
 80029f4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e108      	b.n	8002c12 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff fa96 	bl	8001f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2203      	movs	r2, #3
 8002a24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a2e:	d102      	bne.n	8002a36 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 fcdc 	bl	80043f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7c1a      	ldrb	r2, [r3, #16]
 8002a48:	f88d 2000 	strb.w	r2, [sp]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a50:	f001 fc6e 	bl	8004330 <USB_CoreInit>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0d5      	b.n	8002c12 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 fcd4 	bl	800441a <USB_SetCurrentMode>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0c6      	b.n	8002c12 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e04a      	b.n	8002b20 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3315      	adds	r3, #21
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3314      	adds	r3, #20
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	b298      	uxth	r0, r3
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	332e      	adds	r3, #46	@ 0x2e
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3318      	adds	r3, #24
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	331c      	adds	r3, #28
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	3320      	adds	r3, #32
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	3324      	adds	r3, #36	@ 0x24
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	791b      	ldrb	r3, [r3, #4]
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d3af      	bcc.n	8002a8a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
 8002b2e:	e044      	b.n	8002bba <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	791b      	ldrb	r3, [r3, #4]
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d3b5      	bcc.n	8002b30 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7c1a      	ldrb	r2, [r3, #16]
 8002bcc:	f88d 2000 	strb.w	r2, [sp]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd4:	f001 fc6e 	bl	80044b4 <USB_DevInit>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e013      	b.n	8002c12 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7b1b      	ldrb	r3, [r3, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d102      	bne.n	8002c06 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f80a 	bl	8002c1a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 fe29 	bl	8004862 <USB_DevDisconnect>

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	f043 0303 	orr.w	r3, r3, #3
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002c74:	f000 f808 	bl	8002c88 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002c78:	4b02      	ldr	r3, [pc, #8]	@ (8002c84 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002c7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c7e:	615a      	str	r2, [r3, #20]
  }
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40013c00 	.word	0x40013c00

08002c88 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0cc      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b68      	ldr	r3, [pc, #416]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d90c      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b65      	ldr	r3, [pc, #404]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b8      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cec:	4b59      	ldr	r3, [pc, #356]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d04:	4b53      	ldr	r3, [pc, #332]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a52      	ldr	r2, [pc, #328]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b50      	ldr	r3, [pc, #320]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	494d      	ldr	r1, [pc, #308]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d044      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b47      	ldr	r3, [pc, #284]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d119      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b3f      	ldr	r3, [pc, #252]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b3b      	ldr	r3, [pc, #236]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e067      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b37      	ldr	r3, [pc, #220]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4934      	ldr	r1, [pc, #208]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7ff fb06 	bl	8002398 <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7ff fb02 	bl	8002398 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e04f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b25      	ldr	r3, [pc, #148]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d20c      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e032      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dec:	4b19      	ldr	r3, [pc, #100]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4916      	ldr	r1, [pc, #88]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0a:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	490e      	ldr	r1, [pc, #56]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e1e:	f000 f821 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	490a      	ldr	r1, [pc, #40]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	5ccb      	ldrb	r3, [r1, r3]
 8002e32:	fa22 f303 	lsr.w	r3, r2, r3
 8002e36:	4a09      	ldr	r2, [pc, #36]	@ (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fa66 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023c00 	.word	0x40023c00
 8002e54:	40023800 	.word	0x40023800
 8002e58:	080084fc 	.word	0x080084fc
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e68:	b094      	sub	sp, #80	@ 0x50
 8002e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e70:	2300      	movs	r3, #0
 8002e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e74:	2300      	movs	r3, #0
 8002e76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7c:	4b79      	ldr	r3, [pc, #484]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d00d      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	f200 80e1 	bhi.w	8003050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x34>
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e96:	e0db      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b73      	ldr	r3, [pc, #460]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002e9c:	e0db      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e9e:	4b73      	ldr	r3, [pc, #460]	@ (800306c <HAL_RCC_GetSysClockFreq+0x208>)
 8002ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea2:	e0d8      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eae:	4b6d      	ldr	r3, [pc, #436]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d063      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	4b6a      	ldr	r3, [pc, #424]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ec4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ece:	2300      	movs	r3, #0
 8002ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	462b      	mov	r3, r5
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	0159      	lsls	r1, r3, #5
 8002ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee8:	0150      	lsls	r0, r2, #5
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4621      	mov	r1, r4
 8002ef0:	1a51      	subs	r1, r2, r1
 8002ef2:	6139      	str	r1, [r7, #16]
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f08:	4659      	mov	r1, fp
 8002f0a:	018b      	lsls	r3, r1, #6
 8002f0c:	4651      	mov	r1, sl
 8002f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f12:	4651      	mov	r1, sl
 8002f14:	018a      	lsls	r2, r1, #6
 8002f16:	4651      	mov	r1, sl
 8002f18:	ebb2 0801 	subs.w	r8, r2, r1
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f36:	4690      	mov	r8, r2
 8002f38:	4699      	mov	r9, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	eb18 0303 	adds.w	r3, r8, r3
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	462b      	mov	r3, r5
 8002f44:	eb49 0303 	adc.w	r3, r9, r3
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f56:	4629      	mov	r1, r5
 8002f58:	024b      	lsls	r3, r1, #9
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f60:	4621      	mov	r1, r4
 8002f62:	024a      	lsls	r2, r1, #9
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f74:	f7fd f9a4 	bl	80002c0 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f80:	e058      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f82:	4b38      	ldr	r3, [pc, #224]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	f04f 0000 	mov.w	r0, #0
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	0159      	lsls	r1, r3, #5
 8002faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fae:	0150      	lsls	r0, r2, #5
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fba:	4649      	mov	r1, r9
 8002fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	00eb      	lsls	r3, r5, #3
 8002fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fea:	00e2      	lsls	r2, r4, #3
 8002fec:	4614      	mov	r4, r2
 8002fee:	461d      	mov	r5, r3
 8002ff0:	4643      	mov	r3, r8
 8002ff2:	18e3      	adds	r3, r4, r3
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	eb45 0303 	adc.w	r3, r5, r3
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800300a:	4629      	mov	r1, r5
 800300c:	028b      	lsls	r3, r1, #10
 800300e:	4621      	mov	r1, r4
 8003010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003014:	4621      	mov	r1, r4
 8003016:	028a      	lsls	r2, r1, #10
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301e:	2200      	movs	r2, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	61fa      	str	r2, [r7, #28]
 8003024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003028:	f7fd f94a 	bl	80002c0 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003044:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800304e:	e002      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x204>)
 8003052:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003058:	4618      	mov	r0, r3
 800305a:	3750      	adds	r7, #80	@ 0x50
 800305c:	46bd      	mov	sp, r7
 800305e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	00f42400 	.word	0x00f42400
 800306c:	007a1200 	.word	0x007a1200

08003070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003074:	4b03      	ldr	r3, [pc, #12]	@ (8003084 <HAL_RCC_GetHCLKFreq+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000

08003088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800308c:	f7ff fff0 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0a9b      	lsrs	r3, r3, #10
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4903      	ldr	r1, [pc, #12]	@ (80030ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	0800850c 	.word	0x0800850c

080030b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030b4:	f7ff ffdc 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0b5b      	lsrs	r3, r3, #13
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	@ (80030d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	0800850c 	.word	0x0800850c

080030d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80030fc:	4b7a      	ldr	r3, [pc, #488]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80030fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003102:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	4977      	ldr	r1, [pc, #476]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800311a:	2301      	movs	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800312a:	4b6f      	ldr	r3, [pc, #444]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800312c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003130:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	496b      	ldr	r1, [pc, #428]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8003148:	2301      	movs	r3, #1
 800314a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d022      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8003158:	4b63      	ldr	r3, [pc, #396]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800315a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800315e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003166:	4960      	ldr	r1, [pc, #384]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8003176:	2301      	movs	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800317e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003182:	d10c      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8003184:	4b58      	ldr	r3, [pc, #352]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800318a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	3b01      	subs	r3, #1
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	4954      	ldr	r1, [pc, #336]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d022      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80031aa:	4b4f      	ldr	r3, [pc, #316]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80031ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b8:	494b      	ldr	r1, [pc, #300]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80031c8:	2301      	movs	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80031d6:	4b44      	ldr	r3, [pc, #272]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80031d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031dc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	493f      	ldr	r1, [pc, #252]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 808a 	beq.w	8003312 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	4a38      	ldr	r2, [pc, #224]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320c:	6413      	str	r3, [r2, #64]	@ 0x40
 800320e:	4b36      	ldr	r3, [pc, #216]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800321a:	4b34      	ldr	r3, [pc, #208]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a33      	ldr	r2, [pc, #204]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003224:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003226:	f7ff f8b7 	bl	8002398 <HAL_GetTick>
 800322a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800322e:	f7ff f8b3 	bl	8002398 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e1d1      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003240:	4b2a      	ldr	r3, [pc, #168]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800324c:	4b26      	ldr	r3, [pc, #152]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003250:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003254:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d02f      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	429a      	cmp	r2, r3
 8003268:	d028      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800326a:	4b1f      	ldr	r3, [pc, #124]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003272:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003274:	4b1e      	ldr	r3, [pc, #120]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800327a:	4b1d      	ldr	r3, [pc, #116]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003280:	4a19      	ldr	r2, [pc, #100]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003286:	4b18      	ldr	r3, [pc, #96]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d114      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003292:	f7ff f881 	bl	8002398 <HAL_GetTick>
 8003296:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7ff f87d 	bl	8002398 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e199      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b0:	4b0d      	ldr	r3, [pc, #52]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ee      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032c8:	d114      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80032ca:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80032da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032de:	4902      	ldr	r1, [pc, #8]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]
 80032e4:	e00c      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40007000 	.word	0x40007000
 80032f0:	42470e40 	.word	0x42470e40
 80032f4:	4b89      	ldr	r3, [pc, #548]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a88      	ldr	r2, [pc, #544]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80032fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80032fe:	6093      	str	r3, [r2, #8]
 8003300:	4b86      	ldr	r3, [pc, #536]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003302:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330c:	4983      	ldr	r1, [pc, #524]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800330e:	4313      	orrs	r3, r2
 8003310:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8003324:	4b7e      	ldr	r3, [pc, #504]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003326:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003334:	4b79      	ldr	r3, [pc, #484]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	4976      	ldr	r1, [pc, #472]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d011      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003356:	4b71      	ldr	r3, [pc, #452]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800335c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	496d      	ldr	r1, [pc, #436]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003374:	d101      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8003376:	2301      	movs	r3, #1
 8003378:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003386:	4b65      	ldr	r3, [pc, #404]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800338c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	4961      	ldr	r1, [pc, #388]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d004      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b80      	cmp	r3, #128	@ 0x80
 80033a8:	f040 80c6 	bne.w	8003538 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033ac:	4b5d      	ldr	r3, [pc, #372]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033b2:	f7fe fff1 	bl	8002398 <HAL_GetTick>
 80033b6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033ba:	f7fe ffed 	bl	8002398 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e10b      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033cc:	4b53      	ldr	r3, [pc, #332]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f0      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80033d8:	4a53      	ldr	r2, [pc, #332]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033de:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d023      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d019      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800341c:	d00e      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003426:	2b00      	cmp	r3, #0
 8003428:	d019      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	d115      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800343a:	d110      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	071b      	lsls	r3, r3, #28
 8003456:	4931      	ldr	r1, [pc, #196]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800347a:	2b00      	cmp	r3, #0
 800347c:	d026      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d122      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003486:	4b25      	ldr	r3, [pc, #148]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800348c:	0e1b      	lsrs	r3, r3, #24
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	431a      	orrs	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	071b      	lsls	r3, r3, #28
 80034ac:	491b      	ldr	r1, [pc, #108]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80034b4:	4b19      	ldr	r3, [pc, #100]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ba:	f023 021f 	bic.w	r2, r3, #31
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	4915      	ldr	r1, [pc, #84]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d010      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	019b      	lsls	r3, r3, #6
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	071b      	lsls	r3, r3, #28
 80034f2:	490a      	ldr	r1, [pc, #40]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003500:	f7fe ff4a 	bl	8002398 <HAL_GetTick>
 8003504:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003506:	e011      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003508:	f7fe ff46 	bl	8002398 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d90a      	bls.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e064      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	424711e0 	.word	0x424711e0
 8003524:	42470068 	.word	0x42470068
 8003528:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800352c:	4b2f      	ldr	r3, [pc, #188]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0e7      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003544:	4b29      	ldr	r3, [pc, #164]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800354a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003552:	4926      	ldr	r1, [pc, #152]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003566:	4b21      	ldr	r3, [pc, #132]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800356c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003574:	491d      	ldr	r1, [pc, #116]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003588:	4b18      	ldr	r3, [pc, #96]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800358a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800358e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003596:	4915      	ldr	r1, [pc, #84]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80035aa:	4b10      	ldr	r3, [pc, #64]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80035ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035b0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	490c      	ldr	r1, [pc, #48]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035cc:	4b07      	ldr	r3, [pc, #28]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	4904      	ldr	r1, [pc, #16]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800

080035f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e273      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d075      	beq.n	80036fa <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800360e:	4b88      	ldr	r3, [pc, #544]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b04      	cmp	r3, #4
 8003618:	d00c      	beq.n	8003634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361a:	4b85      	ldr	r3, [pc, #532]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003622:	2b08      	cmp	r3, #8
 8003624:	d112      	bne.n	800364c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003626:	4b82      	ldr	r3, [pc, #520]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003632:	d10b      	bne.n	800364c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	4b7e      	ldr	r3, [pc, #504]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d05b      	beq.n	80036f8 <HAL_RCC_OscConfig+0x108>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d157      	bne.n	80036f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e24e      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003654:	d106      	bne.n	8003664 <HAL_RCC_OscConfig+0x74>
 8003656:	4b76      	ldr	r3, [pc, #472]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a75      	ldr	r2, [pc, #468]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e01d      	b.n	80036a0 <HAL_RCC_OscConfig+0xb0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x98>
 800366e:	4b70      	ldr	r3, [pc, #448]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6f      	ldr	r2, [pc, #444]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b6d      	ldr	r3, [pc, #436]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6c      	ldr	r2, [pc, #432]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e00b      	b.n	80036a0 <HAL_RCC_OscConfig+0xb0>
 8003688:	4b69      	ldr	r3, [pc, #420]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a68      	ldr	r2, [pc, #416]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800368e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b66      	ldr	r3, [pc, #408]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a65      	ldr	r2, [pc, #404]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800369a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe fe76 	bl	8002398 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b0:	f7fe fe72 	bl	8002398 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	@ 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e213      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0xc0>
 80036ce:	e014      	b.n	80036fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fe fe62 	bl	8002398 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d8:	f7fe fe5e 	bl	8002398 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	@ 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e1ff      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	4b51      	ldr	r3, [pc, #324]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0xe8>
 80036f6:	e000      	b.n	80036fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d063      	beq.n	80037ce <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003706:	4b4a      	ldr	r3, [pc, #296]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003712:	4b47      	ldr	r3, [pc, #284]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800371a:	2b08      	cmp	r3, #8
 800371c:	d11c      	bne.n	8003758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371e:	4b44      	ldr	r3, [pc, #272]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d116      	bne.n	8003758 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372a:	4b41      	ldr	r3, [pc, #260]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_RCC_OscConfig+0x152>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d001      	beq.n	8003742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e1d3      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003742:	4b3b      	ldr	r3, [pc, #236]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4937      	ldr	r1, [pc, #220]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003756:	e03a      	b.n	80037ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003760:	4b34      	ldr	r3, [pc, #208]	@ (8003834 <HAL_RCC_OscConfig+0x244>)
 8003762:	2201      	movs	r2, #1
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003766:	f7fe fe17 	bl	8002398 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800376e:	f7fe fe13 	bl	8002398 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e1b4      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003780:	4b2b      	ldr	r3, [pc, #172]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378c:	4b28      	ldr	r3, [pc, #160]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4925      	ldr	r1, [pc, #148]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]
 80037a0:	e015      	b.n	80037ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a2:	4b24      	ldr	r3, [pc, #144]	@ (8003834 <HAL_RCC_OscConfig+0x244>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fe fdf6 	bl	8002398 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b0:	f7fe fdf2 	bl	8002398 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e193      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d036      	beq.n	8003848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e2:	4b15      	ldr	r3, [pc, #84]	@ (8003838 <HAL_RCC_OscConfig+0x248>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e8:	f7fe fdd6 	bl	8002398 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f0:	f7fe fdd2 	bl	8002398 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e173      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003802:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x200>
 800380e:	e01b      	b.n	8003848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003810:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <HAL_RCC_OscConfig+0x248>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fe fdbf 	bl	8002398 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	e00e      	b.n	800383c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800381e:	f7fe fdbb 	bl	8002398 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d907      	bls.n	800383c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e15c      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
 8003830:	40023800 	.word	0x40023800
 8003834:	42470000 	.word	0x42470000
 8003838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800383c:	4b8a      	ldr	r3, [pc, #552]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 800383e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ea      	bne.n	800381e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8097 	beq.w	8003984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385a:	4b83      	ldr	r3, [pc, #524]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10f      	bne.n	8003886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003874:	6413      	str	r3, [r2, #64]	@ 0x40
 8003876:	4b7c      	ldr	r3, [pc, #496]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003886:	4b79      	ldr	r3, [pc, #484]	@ (8003a6c <HAL_RCC_OscConfig+0x47c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003892:	4b76      	ldr	r3, [pc, #472]	@ (8003a6c <HAL_RCC_OscConfig+0x47c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a75      	ldr	r2, [pc, #468]	@ (8003a6c <HAL_RCC_OscConfig+0x47c>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fe fd7b 	bl	8002398 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fe fd77 	bl	8002398 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e118      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	4b6c      	ldr	r3, [pc, #432]	@ (8003a6c <HAL_RCC_OscConfig+0x47c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x2ea>
 80038cc:	4b66      	ldr	r3, [pc, #408]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d0:	4a65      	ldr	r2, [pc, #404]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d8:	e01c      	b.n	8003914 <HAL_RCC_OscConfig+0x324>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x30c>
 80038e2:	4b61      	ldr	r3, [pc, #388]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e6:	4a60      	ldr	r2, [pc, #384]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f2:	4a5d      	ldr	r2, [pc, #372]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0x324>
 80038fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	4a59      	ldr	r2, [pc, #356]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	@ 0x70
 8003908:	4b57      	ldr	r3, [pc, #348]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390c:	4a56      	ldr	r2, [pc, #344]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 800390e:	f023 0304 	bic.w	r3, r3, #4
 8003912:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d015      	beq.n	8003948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7fe fd3c 	bl	8002398 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003922:	e00a      	b.n	800393a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7fe fd38 	bl	8002398 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e0d7      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0ee      	beq.n	8003924 <HAL_RCC_OscConfig+0x334>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fe fd26 	bl	8002398 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fe fd22 	bl	8002398 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e0c1      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003966:	4b40      	ldr	r3, [pc, #256]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1ee      	bne.n	8003950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003978:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 800397e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003982:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80ad 	beq.w	8003ae8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800398e:	4b36      	ldr	r3, [pc, #216]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b08      	cmp	r3, #8
 8003998:	d060      	beq.n	8003a5c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d145      	bne.n	8003a2e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	4b33      	ldr	r3, [pc, #204]	@ (8003a70 <HAL_RCC_OscConfig+0x480>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe fcf6 	bl	8002398 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fe fcf2 	bl	8002398 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e093      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	4b29      	ldr	r3, [pc, #164]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69da      	ldr	r2, [r3, #28]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	019b      	lsls	r3, r3, #6
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	3b01      	subs	r3, #1
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f8:	071b      	lsls	r3, r3, #28
 80039fa:	491b      	ldr	r1, [pc, #108]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a00:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <HAL_RCC_OscConfig+0x480>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fe fcc7 	bl	8002398 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fe fcc3 	bl	8002398 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e064      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a20:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x41e>
 8003a2c:	e05c      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b10      	ldr	r3, [pc, #64]	@ (8003a70 <HAL_RCC_OscConfig+0x480>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe fcb0 	bl	8002398 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe fcac 	bl	8002398 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e04d      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x44c>
 8003a5a:	e045      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e040      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a74:	4b1f      	ldr	r3, [pc, #124]	@ (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d030      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d129      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d122      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d119      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d10f      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800

08003af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e042      	b.n	8003b90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fe f9cc 	bl	8001ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	@ 0x24
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f973 	bl	8003e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	@ 0x28
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d175      	bne.n	8003ca4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_UART_Transmit+0x2c>
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e06e      	b.n	8003ca6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2221      	movs	r2, #33	@ 0x21
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bd6:	f7fe fbdf 	bl	8002398 <HAL_GetTick>
 8003bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	88fa      	ldrh	r2, [r7, #6]
 8003be6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf0:	d108      	bne.n	8003c04 <HAL_UART_Transmit+0x6c>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d104      	bne.n	8003c04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	e003      	b.n	8003c0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c0c:	e02e      	b.n	8003c6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2180      	movs	r1, #128	@ 0x80
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f848 	bl	8003cae <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e03a      	b.n	8003ca6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	3302      	adds	r3, #2
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	e007      	b.n	8003c5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	781a      	ldrb	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1cb      	bne.n	8003c0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2140      	movs	r1, #64	@ 0x40
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f814 	bl	8003cae <UART_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e006      	b.n	8003ca6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbe:	e03b      	b.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d037      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc8:	f7fe fb66 	bl	8002398 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <UART_WaitOnFlagUntilTimeout+0x30>
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e03a      	b.n	8003d58 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d023      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b80      	cmp	r3, #128	@ 0x80
 8003cf4:	d020      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b40      	cmp	r3, #64	@ 0x40
 8003cfa:	d01d      	beq.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d116      	bne.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f81d 	bl	8003d60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e00f      	b.n	8003d58 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4013      	ands	r3, r2
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d0b4      	beq.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b095      	sub	sp, #84	@ 0x54
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d88:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e5      	bne.n	8003d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d119      	bne.n	8003e0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f023 0310 	bic.w	r3, r3, #16
 8003dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003df8:	61ba      	str	r2, [r7, #24]
 8003dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6979      	ldr	r1, [r7, #20]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	613b      	str	r3, [r7, #16]
   return(result);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e5      	bne.n	8003dd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e1a:	bf00      	nop
 8003e1c:	3754      	adds	r7, #84	@ 0x54
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e2c:	b0c0      	sub	sp, #256	@ 0x100
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	68d9      	ldr	r1, [r3, #12]
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	ea40 0301 	orr.w	r3, r0, r1
 8003e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e80:	f021 010c 	bic.w	r1, r1, #12
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea2:	6999      	ldr	r1, [r3, #24]
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	ea40 0301 	orr.w	r3, r0, r1
 8003eae:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4b95      	ldr	r3, [pc, #596]	@ (800410c <UART_SetConfig+0x2e4>)
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d011      	beq.n	8003ee0 <UART_SetConfig+0xb8>
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b93      	ldr	r3, [pc, #588]	@ (8004110 <UART_SetConfig+0x2e8>)
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d00b      	beq.n	8003ee0 <UART_SetConfig+0xb8>
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b91      	ldr	r3, [pc, #580]	@ (8004114 <UART_SetConfig+0x2ec>)
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d005      	beq.n	8003ee0 <UART_SetConfig+0xb8>
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b8f      	ldr	r3, [pc, #572]	@ (8004118 <UART_SetConfig+0x2f0>)
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d104      	bne.n	8003eea <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ee0:	f7ff f8e6 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 8003ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ee8:	e003      	b.n	8003ef2 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eea:	f7ff f8cd 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8003eee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003efc:	f040 8110 	bne.w	8004120 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f12:	4622      	mov	r2, r4
 8003f14:	462b      	mov	r3, r5
 8003f16:	1891      	adds	r1, r2, r2
 8003f18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f1a:	415b      	adcs	r3, r3
 8003f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f22:	4621      	mov	r1, r4
 8003f24:	eb12 0801 	adds.w	r8, r2, r1
 8003f28:	4629      	mov	r1, r5
 8003f2a:	eb43 0901 	adc.w	r9, r3, r1
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f42:	4690      	mov	r8, r2
 8003f44:	4699      	mov	r9, r3
 8003f46:	4623      	mov	r3, r4
 8003f48:	eb18 0303 	adds.w	r3, r8, r3
 8003f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f50:	462b      	mov	r3, r5
 8003f52:	eb49 0303 	adc.w	r3, r9, r3
 8003f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f6e:	460b      	mov	r3, r1
 8003f70:	18db      	adds	r3, r3, r3
 8003f72:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f74:	4613      	mov	r3, r2
 8003f76:	eb42 0303 	adc.w	r3, r2, r3
 8003f7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f84:	f7fc f99c 	bl	80002c0 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4b63      	ldr	r3, [pc, #396]	@ (800411c <UART_SetConfig+0x2f4>)
 8003f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	011c      	lsls	r4, r3, #4
 8003f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003fa8:	4642      	mov	r2, r8
 8003faa:	464b      	mov	r3, r9
 8003fac:	1891      	adds	r1, r2, r2
 8003fae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003fb0:	415b      	adcs	r3, r3
 8003fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fb8:	4641      	mov	r1, r8
 8003fba:	eb12 0a01 	adds.w	sl, r2, r1
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fd8:	4692      	mov	sl, r2
 8003fda:	469b      	mov	fp, r3
 8003fdc:	4643      	mov	r3, r8
 8003fde:	eb1a 0303 	adds.w	r3, sl, r3
 8003fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004004:	460b      	mov	r3, r1
 8004006:	18db      	adds	r3, r3, r3
 8004008:	643b      	str	r3, [r7, #64]	@ 0x40
 800400a:	4613      	mov	r3, r2
 800400c:	eb42 0303 	adc.w	r3, r2, r3
 8004010:	647b      	str	r3, [r7, #68]	@ 0x44
 8004012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800401a:	f7fc f951 	bl	80002c0 <__aeabi_uldivmod>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4611      	mov	r1, r2
 8004024:	4b3d      	ldr	r3, [pc, #244]	@ (800411c <UART_SetConfig+0x2f4>)
 8004026:	fba3 2301 	umull	r2, r3, r3, r1
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	2264      	movs	r2, #100	@ 0x64
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	1acb      	subs	r3, r1, r3
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800403a:	4b38      	ldr	r3, [pc, #224]	@ (800411c <UART_SetConfig+0x2f4>)
 800403c:	fba3 2302 	umull	r2, r3, r3, r2
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004048:	441c      	add	r4, r3
 800404a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800404e:	2200      	movs	r2, #0
 8004050:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004054:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	1891      	adds	r1, r2, r2
 8004062:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004064:	415b      	adcs	r3, r3
 8004066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800406c:	4641      	mov	r1, r8
 800406e:	1851      	adds	r1, r2, r1
 8004070:	6339      	str	r1, [r7, #48]	@ 0x30
 8004072:	4649      	mov	r1, r9
 8004074:	414b      	adcs	r3, r1
 8004076:	637b      	str	r3, [r7, #52]	@ 0x34
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004084:	4659      	mov	r1, fp
 8004086:	00cb      	lsls	r3, r1, #3
 8004088:	4651      	mov	r1, sl
 800408a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800408e:	4651      	mov	r1, sl
 8004090:	00ca      	lsls	r2, r1, #3
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	4603      	mov	r3, r0
 8004098:	4642      	mov	r2, r8
 800409a:	189b      	adds	r3, r3, r2
 800409c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040a0:	464b      	mov	r3, r9
 80040a2:	460a      	mov	r2, r1
 80040a4:	eb42 0303 	adc.w	r3, r2, r3
 80040a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040c0:	460b      	mov	r3, r1
 80040c2:	18db      	adds	r3, r3, r3
 80040c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040c6:	4613      	mov	r3, r2
 80040c8:	eb42 0303 	adc.w	r3, r2, r3
 80040cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040d6:	f7fc f8f3 	bl	80002c0 <__aeabi_uldivmod>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4b0f      	ldr	r3, [pc, #60]	@ (800411c <UART_SetConfig+0x2f4>)
 80040e0:	fba3 1302 	umull	r1, r3, r3, r2
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	2164      	movs	r1, #100	@ 0x64
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	3332      	adds	r3, #50	@ 0x32
 80040f2:	4a0a      	ldr	r2, [pc, #40]	@ (800411c <UART_SetConfig+0x2f4>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	f003 0207 	and.w	r2, r3, #7
 80040fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4422      	add	r2, r4
 8004106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004108:	e10a      	b.n	8004320 <UART_SetConfig+0x4f8>
 800410a:	bf00      	nop
 800410c:	40011000 	.word	0x40011000
 8004110:	40011400 	.word	0x40011400
 8004114:	40011800 	.word	0x40011800
 8004118:	40011c00 	.word	0x40011c00
 800411c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004124:	2200      	movs	r2, #0
 8004126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800412a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800412e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004132:	4642      	mov	r2, r8
 8004134:	464b      	mov	r3, r9
 8004136:	1891      	adds	r1, r2, r2
 8004138:	6239      	str	r1, [r7, #32]
 800413a:	415b      	adcs	r3, r3
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
 800413e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004142:	4641      	mov	r1, r8
 8004144:	1854      	adds	r4, r2, r1
 8004146:	4649      	mov	r1, r9
 8004148:	eb43 0501 	adc.w	r5, r3, r1
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	00eb      	lsls	r3, r5, #3
 8004156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800415a:	00e2      	lsls	r2, r4, #3
 800415c:	4614      	mov	r4, r2
 800415e:	461d      	mov	r5, r3
 8004160:	4643      	mov	r3, r8
 8004162:	18e3      	adds	r3, r4, r3
 8004164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004168:	464b      	mov	r3, r9
 800416a:	eb45 0303 	adc.w	r3, r5, r3
 800416e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800417e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800418e:	4629      	mov	r1, r5
 8004190:	008b      	lsls	r3, r1, #2
 8004192:	4621      	mov	r1, r4
 8004194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004198:	4621      	mov	r1, r4
 800419a:	008a      	lsls	r2, r1, #2
 800419c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041a0:	f7fc f88e 	bl	80002c0 <__aeabi_uldivmod>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4b60      	ldr	r3, [pc, #384]	@ (800432c <UART_SetConfig+0x504>)
 80041aa:	fba3 2302 	umull	r2, r3, r3, r2
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	011c      	lsls	r4, r3, #4
 80041b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041c4:	4642      	mov	r2, r8
 80041c6:	464b      	mov	r3, r9
 80041c8:	1891      	adds	r1, r2, r2
 80041ca:	61b9      	str	r1, [r7, #24]
 80041cc:	415b      	adcs	r3, r3
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d4:	4641      	mov	r1, r8
 80041d6:	1851      	adds	r1, r2, r1
 80041d8:	6139      	str	r1, [r7, #16]
 80041da:	4649      	mov	r1, r9
 80041dc:	414b      	adcs	r3, r1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ec:	4659      	mov	r1, fp
 80041ee:	00cb      	lsls	r3, r1, #3
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f6:	4651      	mov	r1, sl
 80041f8:	00ca      	lsls	r2, r1, #3
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	4603      	mov	r3, r0
 8004200:	4642      	mov	r2, r8
 8004202:	189b      	adds	r3, r3, r2
 8004204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004208:	464b      	mov	r3, r9
 800420a:	460a      	mov	r2, r1
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800421e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800422c:	4649      	mov	r1, r9
 800422e:	008b      	lsls	r3, r1, #2
 8004230:	4641      	mov	r1, r8
 8004232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004236:	4641      	mov	r1, r8
 8004238:	008a      	lsls	r2, r1, #2
 800423a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800423e:	f7fc f83f 	bl	80002c0 <__aeabi_uldivmod>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4611      	mov	r1, r2
 8004248:	4b38      	ldr	r3, [pc, #224]	@ (800432c <UART_SetConfig+0x504>)
 800424a:	fba3 2301 	umull	r2, r3, r3, r1
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	2264      	movs	r2, #100	@ 0x64
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	1acb      	subs	r3, r1, r3
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	3332      	adds	r3, #50	@ 0x32
 800425c:	4a33      	ldr	r2, [pc, #204]	@ (800432c <UART_SetConfig+0x504>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004268:	441c      	add	r4, r3
 800426a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800426e:	2200      	movs	r2, #0
 8004270:	673b      	str	r3, [r7, #112]	@ 0x70
 8004272:	677a      	str	r2, [r7, #116]	@ 0x74
 8004274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004278:	4642      	mov	r2, r8
 800427a:	464b      	mov	r3, r9
 800427c:	1891      	adds	r1, r2, r2
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	415b      	adcs	r3, r3
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004288:	4641      	mov	r1, r8
 800428a:	1851      	adds	r1, r2, r1
 800428c:	6039      	str	r1, [r7, #0]
 800428e:	4649      	mov	r1, r9
 8004290:	414b      	adcs	r3, r1
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042a0:	4659      	mov	r1, fp
 80042a2:	00cb      	lsls	r3, r1, #3
 80042a4:	4651      	mov	r1, sl
 80042a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042aa:	4651      	mov	r1, sl
 80042ac:	00ca      	lsls	r2, r1, #3
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	4642      	mov	r2, r8
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ba:	464b      	mov	r3, r9
 80042bc:	460a      	mov	r2, r1
 80042be:	eb42 0303 	adc.w	r3, r2, r3
 80042c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042dc:	4649      	mov	r1, r9
 80042de:	008b      	lsls	r3, r1, #2
 80042e0:	4641      	mov	r1, r8
 80042e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e6:	4641      	mov	r1, r8
 80042e8:	008a      	lsls	r2, r1, #2
 80042ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042ee:	f7fb ffe7 	bl	80002c0 <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <UART_SetConfig+0x504>)
 80042f8:	fba3 1302 	umull	r1, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	2164      	movs	r1, #100	@ 0x64
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	3332      	adds	r3, #50	@ 0x32
 800430a:	4a08      	ldr	r2, [pc, #32]	@ (800432c <UART_SetConfig+0x504>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4422      	add	r2, r4
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004326:	46bd      	mov	sp, r7
 8004328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800432c:	51eb851f 	.word	0x51eb851f

08004330 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004330:	b084      	sub	sp, #16
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	f107 001c 	add.w	r0, r7, #28
 800433e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004342:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004346:	2b01      	cmp	r3, #1
 8004348:	d123      	bne.n	8004392 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800435e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004372:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004376:	2b01      	cmp	r3, #1
 8004378:	d105      	bne.n	8004386 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa9a 	bl	80048c0 <USB_CoreReset>
 800438c:	4603      	mov	r3, r0
 800438e:	73fb      	strb	r3, [r7, #15]
 8004390:	e01b      	b.n	80043ca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa8e 	bl	80048c0 <USB_CoreReset>
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80043bc:	e005      	b.n	80043ca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043ca:	7fbb      	ldrb	r3, [r7, #30]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10b      	bne.n	80043e8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f043 0206 	orr.w	r2, r3, #6
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f4:	b004      	add	sp, #16
 80043f6:	4770      	bx	lr

080043f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 0201 	bic.w	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	460b      	mov	r3, r1
 8004424:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d115      	bne.n	8004468 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004448:	200a      	movs	r0, #10
 800444a:	f7fd ffb1 	bl	80023b0 <HAL_Delay>
      ms += 10U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	330a      	adds	r3, #10
 8004452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fa25 	bl	80048a4 <USB_GetMode>
 800445a:	4603      	mov	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d01e      	beq.n	800449e <USB_SetCurrentMode+0x84>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2bc7      	cmp	r3, #199	@ 0xc7
 8004464:	d9f0      	bls.n	8004448 <USB_SetCurrentMode+0x2e>
 8004466:	e01a      	b.n	800449e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d115      	bne.n	800449a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800447a:	200a      	movs	r0, #10
 800447c:	f7fd ff98 	bl	80023b0 <HAL_Delay>
      ms += 10U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	330a      	adds	r3, #10
 8004484:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa0c 	bl	80048a4 <USB_GetMode>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <USB_SetCurrentMode+0x84>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2bc7      	cmp	r3, #199	@ 0xc7
 8004496:	d9f0      	bls.n	800447a <USB_SetCurrentMode+0x60>
 8004498:	e001      	b.n	800449e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e005      	b.n	80044aa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2bc8      	cmp	r3, #200	@ 0xc8
 80044a2:	d101      	bne.n	80044a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044b4:	b084      	sub	sp, #16
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e009      	b.n	80044e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	3340      	adds	r3, #64	@ 0x40
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3301      	adds	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b0e      	cmp	r3, #14
 80044ec:	d9f2      	bls.n	80044d4 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11c      	bne.n	8004530 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e005      	b.n	800453c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004534:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004548:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10d      	bne.n	800456c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004558:	2100      	movs	r1, #0
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f968 	bl	8004830 <USB_SetDevSpeed>
 8004560:	e008      	b.n	8004574 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004562:	2101      	movs	r1, #1
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f963 	bl	8004830 <USB_SetDevSpeed>
 800456a:	e003      	b.n	8004574 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800456c:	2103      	movs	r1, #3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f95e 	bl	8004830 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004574:	2110      	movs	r1, #16
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8fa 	bl	8004770 <USB_FlushTxFifo>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f924 	bl	80047d4 <USB_FlushRxFifo>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459c:	461a      	mov	r2, r3
 800459e:	2300      	movs	r3, #0
 80045a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a8:	461a      	mov	r2, r3
 80045aa:	2300      	movs	r3, #0
 80045ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b4:	461a      	mov	r2, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	e043      	b.n	8004648 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045d6:	d118      	bne.n	800460a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10a      	bne.n	80045f4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ea:	461a      	mov	r2, r3
 80045ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e013      	b.n	800461c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004600:	461a      	mov	r2, r3
 8004602:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	e008      	b.n	800461c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004616:	461a      	mov	r2, r3
 8004618:	2300      	movs	r3, #0
 800461a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004628:	461a      	mov	r2, r3
 800462a:	2300      	movs	r3, #0
 800462c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463a:	461a      	mov	r2, r3
 800463c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004640:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3301      	adds	r3, #1
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800464c:	461a      	mov	r2, r3
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4293      	cmp	r3, r2
 8004652:	d3b5      	bcc.n	80045c0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e043      	b.n	80046e2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800466c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004670:	d118      	bne.n	80046a4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004684:	461a      	mov	r2, r3
 8004686:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e013      	b.n	80046b6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e008      	b.n	80046b6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c2:	461a      	mov	r2, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d4:	461a      	mov	r2, r3
 80046d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	3301      	adds	r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046e6:	461a      	mov	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d3b5      	bcc.n	800465a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004700:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800470e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004710:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f043 0210 	orr.w	r2, r3, #16
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	4b10      	ldr	r3, [pc, #64]	@ (800476c <USB_DevInit+0x2b8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004730:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f043 0208 	orr.w	r2, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004744:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004754:	f043 0304 	orr.w	r3, r3, #4
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004768:	b004      	add	sp, #16
 800476a:	4770      	bx	lr
 800476c:	803c3800 	.word	0x803c3800

08004770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3301      	adds	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800478a:	d901      	bls.n	8004790 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e01b      	b.n	80047c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	daf2      	bge.n	800477e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	019b      	lsls	r3, r3, #6
 80047a0:	f043 0220 	orr.w	r2, r3, #32
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047b4:	d901      	bls.n	80047ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e006      	b.n	80047c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d0f0      	beq.n	80047a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047ec:	d901      	bls.n	80047f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e018      	b.n	8004824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	daf2      	bge.n	80047e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2210      	movs	r2, #16
 8004802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004810:	d901      	bls.n	8004816 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e006      	b.n	8004824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b10      	cmp	r3, #16
 8004820:	d0f0      	beq.n	8004804 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800487c:	f023 0303 	bic.w	r3, r3, #3
 8004880:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004890:	f043 0302 	orr.w	r3, r3, #2
 8004894:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0301 	and.w	r3, r3, #1
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048d8:	d901      	bls.n	80048de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e01b      	b.n	8004916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	daf2      	bge.n	80048cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004902:	d901      	bls.n	8004908 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e006      	b.n	8004916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d0f0      	beq.n	80048f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af02      	add	r7, sp, #8
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	4608      	mov	r0, r1
 800492c:	4611      	mov	r1, r2
 800492e:	461a      	mov	r2, r3
 8004930:	4603      	mov	r3, r0
 8004932:	70fb      	strb	r3, [r7, #3]
 8004934:	460b      	mov	r3, r1
 8004936:	70bb      	strb	r3, [r7, #2]
 8004938:	4613      	mov	r3, r2
 800493a:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	787b      	ldrb	r3, [r7, #1]
 8004940:	4413      	add	r3, r2
 8004942:	b2d8      	uxtb	r0, r3
 8004944:	78ba      	ldrb	r2, [r7, #2]
 8004946:	7c3b      	ldrb	r3, [r7, #16]
 8004948:	4413      	add	r3, r2
 800494a:	b2db      	uxtb	r3, r3
 800494c:	78ba      	ldrb	r2, [r7, #2]
 800494e:	78f9      	ldrb	r1, [r7, #3]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4603      	mov	r3, r0
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f001 fcb4 	bl	80062c2 <u8g2_IsIntersection>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d012      	beq.n	8004986 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8004960:	e00d      	b.n	800497e <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8004962:	787b      	ldrb	r3, [r7, #1]
 8004964:	78ba      	ldrb	r2, [r7, #2]
 8004966:	78f9      	ldrb	r1, [r7, #3]
 8004968:	2000      	movs	r0, #0
 800496a:	9000      	str	r0, [sp, #0]
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 fb76 	bl	800605e <u8g2_DrawHVLine>
    y++;    
 8004972:	78bb      	ldrb	r3, [r7, #2]
 8004974:	3301      	adds	r3, #1
 8004976:	70bb      	strb	r3, [r7, #2]
    h--;
 8004978:	7c3b      	ldrb	r3, [r7, #16]
 800497a:	3b01      	subs	r3, #1
 800497c:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 800497e:	7c3b      	ldrb	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ee      	bne.n	8004962 <u8g2_DrawBox+0x40>
 8004984:	e000      	b.n	8004988 <u8g2_DrawBox+0x66>
    return;
 8004986:	bf00      	nop
  }
}
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b086      	sub	sp, #24
 8004992:	af02      	add	r7, sp, #8
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	461a      	mov	r2, r3
 800499c:	4603      	mov	r3, r0
 800499e:	70fb      	strb	r3, [r7, #3]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70bb      	strb	r3, [r7, #2]
 80049a4:	4613      	mov	r3, r2
 80049a6:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	787b      	ldrb	r3, [r7, #1]
 80049b0:	4413      	add	r3, r2
 80049b2:	b2d8      	uxtb	r0, r3
 80049b4:	78ba      	ldrb	r2, [r7, #2]
 80049b6:	7e3b      	ldrb	r3, [r7, #24]
 80049b8:	4413      	add	r3, r2
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	78ba      	ldrb	r2, [r7, #2]
 80049be:	78f9      	ldrb	r1, [r7, #3]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	4603      	mov	r3, r0
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 fc7c 	bl	80062c2 <u8g2_IsIntersection>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02e      	beq.n	8004a2e <u8g2_DrawFrame+0xa0>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80049d0:	787b      	ldrb	r3, [r7, #1]
 80049d2:	78ba      	ldrb	r2, [r7, #2]
 80049d4:	78f9      	ldrb	r1, [r7, #3]
 80049d6:	2000      	movs	r0, #0
 80049d8:	9000      	str	r0, [sp, #0]
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f001 fb3f 	bl	800605e <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80049e0:	7e3b      	ldrb	r3, [r7, #24]
 80049e2:	78ba      	ldrb	r2, [r7, #2]
 80049e4:	78f9      	ldrb	r1, [r7, #3]
 80049e6:	2001      	movs	r0, #1
 80049e8:	9000      	str	r0, [sp, #0]
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f001 fb37 	bl	800605e <u8g2_DrawHVLine>
  x+=w;
 80049f0:	78fa      	ldrb	r2, [r7, #3]
 80049f2:	787b      	ldrb	r3, [r7, #1]
 80049f4:	4413      	add	r3, r2
 80049f6:	70fb      	strb	r3, [r7, #3]
  x--;
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80049fe:	7e3b      	ldrb	r3, [r7, #24]
 8004a00:	78ba      	ldrb	r2, [r7, #2]
 8004a02:	78f9      	ldrb	r1, [r7, #3]
 8004a04:	2001      	movs	r0, #1
 8004a06:	9000      	str	r0, [sp, #0]
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f001 fb28 	bl	800605e <u8g2_DrawHVLine>
  y+=h;
 8004a0e:	78ba      	ldrb	r2, [r7, #2]
 8004a10:	7e3b      	ldrb	r3, [r7, #24]
 8004a12:	4413      	add	r3, r2
 8004a14:	70bb      	strb	r3, [r7, #2]
  y--;
 8004a16:	78bb      	ldrb	r3, [r7, #2]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8004a1c:	787b      	ldrb	r3, [r7, #1]
 8004a1e:	78ba      	ldrb	r2, [r7, #2]
 8004a20:	7bf9      	ldrb	r1, [r7, #15]
 8004a22:	2000      	movs	r0, #0
 8004a24:	9000      	str	r0, [sp, #0]
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f001 fb19 	bl	800605e <u8g2_DrawHVLine>
 8004a2c:	e000      	b.n	8004a30 <u8g2_DrawFrame+0xa2>
    return;
 8004a2e:	bf00      	nop
}
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af02      	add	r7, sp, #8
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	4608      	mov	r0, r1
 8004a40:	4611      	mov	r1, r2
 8004a42:	461a      	mov	r2, r3
 8004a44:	4603      	mov	r3, r0
 8004a46:	70fb      	strb	r3, [r7, #3]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	70bb      	strb	r3, [r7, #2]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	787b      	ldrb	r3, [r7, #1]
 8004a54:	4413      	add	r3, r2
 8004a56:	b2d8      	uxtb	r0, r3
 8004a58:	78ba      	ldrb	r2, [r7, #2]
 8004a5a:	7e3b      	ldrb	r3, [r7, #24]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	78ba      	ldrb	r2, [r7, #2]
 8004a62:	78f9      	ldrb	r1, [r7, #3]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	4603      	mov	r3, r0
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f001 fc2a 	bl	80062c2 <u8g2_IsIntersection>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 808c 	beq.w	8004b8e <u8g2_DrawRBox+0x158>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8004a7a:	7bfa      	ldrb	r2, [r7, #15]
 8004a7c:	7f3b      	ldrb	r3, [r7, #28]
 8004a7e:	4413      	add	r3, r2
 8004a80:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8004a82:	78bb      	ldrb	r3, [r7, #2]
 8004a84:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8004a86:	7bba      	ldrb	r2, [r7, #14]
 8004a88:	7f3b      	ldrb	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	73bb      	strb	r3, [r7, #14]
 
  xr = x;
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	737b      	strb	r3, [r7, #13]
  xr += w;
 8004a92:	7b7a      	ldrb	r2, [r7, #13]
 8004a94:	787b      	ldrb	r3, [r7, #1]
 8004a96:	4413      	add	r3, r2
 8004a98:	737b      	strb	r3, [r7, #13]
  xr -= r;
 8004a9a:	7b7a      	ldrb	r2, [r7, #13]
 8004a9c:	7f3b      	ldrb	r3, [r7, #28]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	737b      	strb	r3, [r7, #13]
  xr -= 1;
 8004aa2:	7b7b      	ldrb	r3, [r7, #13]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	737b      	strb	r3, [r7, #13]
  
  yl = y;
 8004aa8:	78bb      	ldrb	r3, [r7, #2]
 8004aaa:	733b      	strb	r3, [r7, #12]
  yl += h;
 8004aac:	7b3a      	ldrb	r2, [r7, #12]
 8004aae:	7e3b      	ldrb	r3, [r7, #24]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	733b      	strb	r3, [r7, #12]
  yl -= r; 
 8004ab4:	7b3a      	ldrb	r2, [r7, #12]
 8004ab6:	7f3b      	ldrb	r3, [r7, #28]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	733b      	strb	r3, [r7, #12]
  yl -= 1;
 8004abc:	7b3b      	ldrb	r3, [r7, #12]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	733b      	strb	r3, [r7, #12]

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8004ac2:	7f3b      	ldrb	r3, [r7, #28]
 8004ac4:	7bba      	ldrb	r2, [r7, #14]
 8004ac6:	7bf9      	ldrb	r1, [r7, #15]
 8004ac8:	2002      	movs	r0, #2
 8004aca:	9000      	str	r0, [sp, #0]
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fba0 	bl	8005212 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8004ad2:	7f3b      	ldrb	r3, [r7, #28]
 8004ad4:	7bba      	ldrb	r2, [r7, #14]
 8004ad6:	7b79      	ldrb	r1, [r7, #13]
 8004ad8:	2001      	movs	r0, #1
 8004ada:	9000      	str	r0, [sp, #0]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fb98 	bl	8005212 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8004ae2:	7f3b      	ldrb	r3, [r7, #28]
 8004ae4:	7b3a      	ldrb	r2, [r7, #12]
 8004ae6:	7bf9      	ldrb	r1, [r7, #15]
 8004ae8:	2004      	movs	r0, #4
 8004aea:	9000      	str	r0, [sp, #0]
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fb90 	bl	8005212 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8004af2:	7f3b      	ldrb	r3, [r7, #28]
 8004af4:	7b3a      	ldrb	r2, [r7, #12]
 8004af6:	7b79      	ldrb	r1, [r7, #13]
 8004af8:	2008      	movs	r0, #8
 8004afa:	9000      	str	r0, [sp, #0]
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fb88 	bl	8005212 <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8004b02:	787b      	ldrb	r3, [r7, #1]
 8004b04:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8004b06:	7afa      	ldrb	r2, [r7, #11]
 8004b08:	7f3b      	ldrb	r3, [r7, #28]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8004b0e:	7afa      	ldrb	r2, [r7, #11]
 8004b10:	7f3b      	ldrb	r3, [r7, #28]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	72fb      	strb	r3, [r7, #11]
    xl++;
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
    yu++;
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8004b22:	7afb      	ldrb	r3, [r7, #11]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d918      	bls.n	8004b5a <u8g2_DrawRBox+0x124>
    {
      ww -= 2;
 8004b28:	7afb      	ldrb	r3, [r7, #11]
 8004b2a:	3b02      	subs	r3, #2
 8004b2c:	72fb      	strb	r3, [r7, #11]
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8004b2e:	7f3b      	ldrb	r3, [r7, #28]
 8004b30:	3301      	adds	r3, #1
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	7af8      	ldrb	r0, [r7, #11]
 8004b36:	78ba      	ldrb	r2, [r7, #2]
 8004b38:	7bf9      	ldrb	r1, [r7, #15]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff feef 	bl	8004922 <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
 8004b44:	7f3b      	ldrb	r3, [r7, #28]
 8004b46:	3301      	adds	r3, #1
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	7af8      	ldrb	r0, [r7, #11]
 8004b4c:	7b3a      	ldrb	r2, [r7, #12]
 8004b4e:	7bf9      	ldrb	r1, [r7, #15]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	4603      	mov	r3, r0
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fee4 	bl	8004922 <u8g2_DrawBox>
    }
    
    hh = h;
 8004b5a:	7e3b      	ldrb	r3, [r7, #24]
 8004b5c:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8004b5e:	7aba      	ldrb	r2, [r7, #10]
 8004b60:	7f3b      	ldrb	r3, [r7, #28]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8004b66:	7aba      	ldrb	r2, [r7, #10]
 8004b68:	7f3b      	ldrb	r3, [r7, #28]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	72bb      	strb	r3, [r7, #10]
    //h--;
    if ( hh >= 3 )
 8004b6e:	7abb      	ldrb	r3, [r7, #10]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d90d      	bls.n	8004b90 <u8g2_DrawRBox+0x15a>
    {
      hh -= 2;
 8004b74:	7abb      	ldrb	r3, [r7, #10]
 8004b76:	3b02      	subs	r3, #2
 8004b78:	72bb      	strb	r3, [r7, #10]
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8004b7a:	7878      	ldrb	r0, [r7, #1]
 8004b7c:	7bba      	ldrb	r2, [r7, #14]
 8004b7e:	78f9      	ldrb	r1, [r7, #3]
 8004b80:	7abb      	ldrb	r3, [r7, #10]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	4603      	mov	r3, r0
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fecb 	bl	8004922 <u8g2_DrawBox>
 8004b8c:	e000      	b.n	8004b90 <u8g2_DrawRBox+0x15a>
    return;
 8004b8e:	bf00      	nop
    }
  }
}
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b086      	sub	sp, #24
 8004b9a:	af02      	add	r7, sp, #8
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	4608      	mov	r0, r1
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	70fb      	strb	r3, [r7, #3]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70bb      	strb	r3, [r7, #2]
 8004bac:	4613      	mov	r3, r2
 8004bae:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	787b      	ldrb	r3, [r7, #1]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	b2d8      	uxtb	r0, r3
 8004bb8:	78ba      	ldrb	r2, [r7, #2]
 8004bba:	7e3b      	ldrb	r3, [r7, #24]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	78ba      	ldrb	r2, [r7, #2]
 8004bc2:	78f9      	ldrb	r1, [r7, #3]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f001 fb7a 	bl	80062c2 <u8g2_IsIntersection>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8091 	beq.w	8004cf8 <u8g2_DrawRFrame+0x162>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8004bda:	7bfa      	ldrb	r2, [r7, #15]
 8004bdc:	7f3b      	ldrb	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8004be2:	78bb      	ldrb	r3, [r7, #2]
 8004be4:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8004be6:	7bba      	ldrb	r2, [r7, #14]
 8004be8:	7f3b      	ldrb	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	737b      	strb	r3, [r7, #13]
    xr += w;
 8004bf2:	7b7a      	ldrb	r2, [r7, #13]
 8004bf4:	787b      	ldrb	r3, [r7, #1]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	737b      	strb	r3, [r7, #13]
    xr -= r;
 8004bfa:	7b7a      	ldrb	r2, [r7, #13]
 8004bfc:	7f3b      	ldrb	r3, [r7, #28]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8004c02:	7b7b      	ldrb	r3, [r7, #13]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 8004c08:	78bb      	ldrb	r3, [r7, #2]
 8004c0a:	733b      	strb	r3, [r7, #12]
    yl += h;
 8004c0c:	7b3a      	ldrb	r2, [r7, #12]
 8004c0e:	7e3b      	ldrb	r3, [r7, #24]
 8004c10:	4413      	add	r3, r2
 8004c12:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8004c14:	7b3a      	ldrb	r2, [r7, #12]
 8004c16:	7f3b      	ldrb	r3, [r7, #28]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 8004c1c:	7b3b      	ldrb	r3, [r7, #12]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8004c22:	7f3b      	ldrb	r3, [r7, #28]
 8004c24:	7bba      	ldrb	r2, [r7, #14]
 8004c26:	7bf9      	ldrb	r1, [r7, #15]
 8004c28:	2002      	movs	r0, #2
 8004c2a:	9000      	str	r0, [sp, #0]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f9ce 	bl	8004fce <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8004c32:	7f3b      	ldrb	r3, [r7, #28]
 8004c34:	7bba      	ldrb	r2, [r7, #14]
 8004c36:	7b79      	ldrb	r1, [r7, #13]
 8004c38:	2001      	movs	r0, #1
 8004c3a:	9000      	str	r0, [sp, #0]
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f9c6 	bl	8004fce <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8004c42:	7f3b      	ldrb	r3, [r7, #28]
 8004c44:	7b3a      	ldrb	r2, [r7, #12]
 8004c46:	7bf9      	ldrb	r1, [r7, #15]
 8004c48:	2004      	movs	r0, #4
 8004c4a:	9000      	str	r0, [sp, #0]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f9be 	bl	8004fce <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8004c52:	7f3b      	ldrb	r3, [r7, #28]
 8004c54:	7b3a      	ldrb	r2, [r7, #12]
 8004c56:	7b79      	ldrb	r1, [r7, #13]
 8004c58:	2008      	movs	r0, #8
 8004c5a:	9000      	str	r0, [sp, #0]
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f9b6 	bl	8004fce <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8004c62:	787b      	ldrb	r3, [r7, #1]
 8004c64:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8004c66:	7afa      	ldrb	r2, [r7, #11]
 8004c68:	7f3b      	ldrb	r3, [r7, #28]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8004c6e:	7afa      	ldrb	r2, [r7, #11]
 8004c70:	7f3b      	ldrb	r3, [r7, #28]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	72fb      	strb	r3, [r7, #11]
    hh = h;
 8004c76:	7e3b      	ldrb	r3, [r7, #24]
 8004c78:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8004c7a:	7aba      	ldrb	r2, [r7, #10]
 8004c7c:	7f3b      	ldrb	r3, [r7, #28]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8004c82:	7aba      	ldrb	r2, [r7, #10]
 8004c84:	7f3b      	ldrb	r3, [r7, #28]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
    yu++;
 8004c90:	7bbb      	ldrb	r3, [r7, #14]
 8004c92:	3301      	adds	r3, #1
 8004c94:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8004c96:	7afb      	ldrb	r3, [r7, #11]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d914      	bls.n	8004cc6 <u8g2_DrawRFrame+0x130>
    {
      ww -= 2;
 8004c9c:	7afb      	ldrb	r3, [r7, #11]
 8004c9e:	3b02      	subs	r3, #2
 8004ca0:	72fb      	strb	r3, [r7, #11]
      h--;
 8004ca2:	7e3b      	ldrb	r3, [r7, #24]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8004ca8:	7afb      	ldrb	r3, [r7, #11]
 8004caa:	78ba      	ldrb	r2, [r7, #2]
 8004cac:	7bf9      	ldrb	r1, [r7, #15]
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f001 fa58 	bl	8006164 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8004cb4:	78ba      	ldrb	r2, [r7, #2]
 8004cb6:	7e3b      	ldrb	r3, [r7, #24]
 8004cb8:	4413      	add	r3, r2
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
 8004cbe:	7bf9      	ldrb	r1, [r7, #15]
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 fa4f 	bl	8006164 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8004cc6:	7abb      	ldrb	r3, [r7, #10]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d916      	bls.n	8004cfa <u8g2_DrawRFrame+0x164>
    {
      hh -= 2;
 8004ccc:	7abb      	ldrb	r3, [r7, #10]
 8004cce:	3b02      	subs	r3, #2
 8004cd0:	72bb      	strb	r3, [r7, #10]
      w--;
 8004cd2:	787b      	ldrb	r3, [r7, #1]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8004cd8:	7abb      	ldrb	r3, [r7, #10]
 8004cda:	7bba      	ldrb	r2, [r7, #14]
 8004cdc:	78f9      	ldrb	r1, [r7, #3]
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f001 fa59 	bl	8006196 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	787b      	ldrb	r3, [r7, #1]
 8004ce8:	4413      	add	r3, r2
 8004cea:	b2d9      	uxtb	r1, r3
 8004cec:	7abb      	ldrb	r3, [r7, #10]
 8004cee:	7bba      	ldrb	r2, [r7, #14]
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f001 fa50 	bl	8006196 <u8g2_DrawVLine>
 8004cf6:	e000      	b.n	8004cfa <u8g2_DrawRFrame+0x164>
    return;
 8004cf8:	bf00      	nop
    }
  }
}
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	7c1b      	ldrb	r3, [r3, #16]
 8004d0e:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d16:	461a      	mov	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f002 fcd7 	bl	80076e2 <memset>
}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	7c1b      	ldrb	r3, [r3, #16]
 8004d52:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5c:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	89ba      	ldrh	r2, [r7, #12]
 8004d64:	fb12 f303 	smulbb	r3, r2, r3
 8004d68:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8004d6a:	89bb      	ldrh	r3, [r7, #12]
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8004d70:	89bb      	ldrh	r3, [r7, #12]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	4413      	add	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8004d78:	7bf9      	ldrb	r1, [r7, #15]
 8004d7a:	78ba      	ldrb	r2, [r7, #2]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	460b      	mov	r3, r1
 8004d82:	2100      	movs	r1, #0
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f002 f9dc 	bl	8007142 <u8x8_DrawTile>
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004da4:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dac:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	7c5b      	ldrb	r3, [r3, #17]
 8004db4:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8004db6:	7bba      	ldrb	r2, [r7, #14]
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ffbd 	bl	8004d3c <u8g2_send_tile_row>
    src_row++;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8004dc8:	7bbb      	ldrb	r3, [r7, #14]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8004dce:	7bfa      	ldrb	r2, [r7, #15]
 8004dd0:	7b7b      	ldrb	r3, [r7, #13]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d203      	bcs.n	8004dde <u8g2_send_buffer+0x4c>
 8004dd6:	7bba      	ldrb	r2, [r7, #14]
 8004dd8:	7b3b      	ldrb	r3, [r7, #12]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d3eb      	bcc.n	8004db6 <u8g2_send_buffer+0x24>
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff ffcf 	bl	8004d92 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f002 f9f5 	bl	80071e4 <u8x8_RefreshDisplay>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4603      	mov	r3, r0
 8004e12:	70fb      	strb	r3, [r7, #3]
 8004e14:	460b      	mov	r3, r1
 8004e16:	70bb      	strb	r3, [r7, #2]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8004e1c:	7d3b      	ldrb	r3, [r7, #20]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d017      	beq.n	8004e56 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8004e26:	787a      	ldrb	r2, [r7, #1]
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	b2d9      	uxtb	r1, r3
 8004e2e:	7c3a      	ldrb	r2, [r7, #16]
 8004e30:	78bb      	ldrb	r3, [r7, #2]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f001 f9c5 	bl	80061c8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8004e3e:	787a      	ldrb	r2, [r7, #1]
 8004e40:	78bb      	ldrb	r3, [r7, #2]
 8004e42:	4413      	add	r3, r2
 8004e44:	b2d9      	uxtb	r1, r3
 8004e46:	7c3a      	ldrb	r2, [r7, #16]
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f001 f9b9 	bl	80061c8 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8004e56:	7d3b      	ldrb	r3, [r7, #20]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d017      	beq.n	8004e90 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8004e60:	787a      	ldrb	r2, [r7, #1]
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	b2d9      	uxtb	r1, r3
 8004e68:	7c3a      	ldrb	r2, [r7, #16]
 8004e6a:	78bb      	ldrb	r3, [r7, #2]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 f9a8 	bl	80061c8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8004e78:	787a      	ldrb	r2, [r7, #1]
 8004e7a:	78bb      	ldrb	r3, [r7, #2]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	b2d9      	uxtb	r1, r3
 8004e80:	7c3a      	ldrb	r2, [r7, #16]
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 f99c 	bl	80061c8 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8004e90:	7d3b      	ldrb	r3, [r7, #20]
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d017      	beq.n	8004eca <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8004e9a:	787a      	ldrb	r2, [r7, #1]
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	b2d9      	uxtb	r1, r3
 8004ea2:	7c3a      	ldrb	r2, [r7, #16]
 8004ea4:	78bb      	ldrb	r3, [r7, #2]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f001 f98b 	bl	80061c8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8004eb2:	787a      	ldrb	r2, [r7, #1]
 8004eb4:	78bb      	ldrb	r3, [r7, #2]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	b2d9      	uxtb	r1, r3
 8004eba:	7c3a      	ldrb	r2, [r7, #16]
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f001 f97f 	bl	80061c8 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8004eca:	7d3b      	ldrb	r3, [r7, #20]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d017      	beq.n	8004f04 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8004ed4:	787a      	ldrb	r2, [r7, #1]
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	b2d9      	uxtb	r1, r3
 8004edc:	7c3a      	ldrb	r2, [r7, #16]
 8004ede:	78bb      	ldrb	r3, [r7, #2]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 f96e 	bl	80061c8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8004eec:	787a      	ldrb	r2, [r7, #1]
 8004eee:	78bb      	ldrb	r3, [r7, #2]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	b2d9      	uxtb	r1, r3
 8004ef4:	7c3a      	ldrb	r2, [r7, #16]
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	4413      	add	r3, r2
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f001 f962 	bl	80061c8 <u8g2_DrawPixel>
    }
}
 8004f04:	bf00      	nop
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	70fb      	strb	r3, [r7, #3]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	70bb      	strb	r3, [r7, #2]
 8004f22:	4613      	mov	r3, r2
 8004f24:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	787b      	ldrb	r3, [r7, #1]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8004f3c:	7b7a      	ldrb	r2, [r7, #13]
 8004f3e:	787b      	ldrb	r3, [r7, #1]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8004f46:	7b7b      	ldrb	r3, [r7, #13]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	737b      	strb	r3, [r7, #13]
    x = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	733b      	strb	r3, [r7, #12]
    y = rad;
 8004f52:	787b      	ldrb	r3, [r7, #1]
 8004f54:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8004f56:	78f8      	ldrb	r0, [r7, #3]
 8004f58:	7afa      	ldrb	r2, [r7, #11]
 8004f5a:	7b39      	ldrb	r1, [r7, #12]
 8004f5c:	7e3b      	ldrb	r3, [r7, #24]
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	78bb      	ldrb	r3, [r7, #2]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	4603      	mov	r3, r0
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff ff4b 	bl	8004e02 <u8g2_draw_circle_section>
    
    while ( x < y )
 8004f6c:	e026      	b.n	8004fbc <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 8004f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	db0b      	blt.n	8004f8e <u8g2_draw_circle+0x82>
      {
        y--;
 8004f76:	7afb      	ldrb	r3, [r7, #11]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 8004f7c:	7b7b      	ldrb	r3, [r7, #13]
 8004f7e:	3302      	adds	r3, #2
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	7b7b      	ldrb	r3, [r7, #13]
 8004f88:	4413      	add	r3, r2
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 8004f8e:	7b3b      	ldrb	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 8004f94:	7bbb      	ldrb	r3, [r7, #14]
 8004f96:	3302      	adds	r3, #2
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 8004f9c:	7bfa      	ldrb	r2, [r7, #15]
 8004f9e:	7bbb      	ldrb	r3, [r7, #14]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8004fa6:	78f8      	ldrb	r0, [r7, #3]
 8004fa8:	7afa      	ldrb	r2, [r7, #11]
 8004faa:	7b39      	ldrb	r1, [r7, #12]
 8004fac:	7e3b      	ldrb	r3, [r7, #24]
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	78bb      	ldrb	r3, [r7, #2]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ff23 	bl	8004e02 <u8g2_draw_circle_section>
    while ( x < y )
 8004fbc:	7b3a      	ldrb	r2, [r7, #12]
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d3d4      	bcc.n	8004f6e <u8g2_draw_circle+0x62>
    }
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8004fce:	b590      	push	{r4, r7, lr}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af02      	add	r7, sp, #8
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	4611      	mov	r1, r2
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4603      	mov	r3, r0
 8004fde:	70fb      	strb	r3, [r7, #3]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70bb      	strb	r3, [r7, #2]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8004fe8:	78fa      	ldrb	r2, [r7, #3]
 8004fea:	787b      	ldrb	r3, [r7, #1]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	b2d9      	uxtb	r1, r3
 8004ff0:	78ba      	ldrb	r2, [r7, #2]
 8004ff2:	787b      	ldrb	r3, [r7, #1]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	b2d8      	uxtb	r0, r3
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	787b      	ldrb	r3, [r7, #1]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	3301      	adds	r3, #1
 8005002:	b2dc      	uxtb	r4, r3
 8005004:	78ba      	ldrb	r2, [r7, #2]
 8005006:	787b      	ldrb	r3, [r7, #1]
 8005008:	4413      	add	r3, r2
 800500a:	b2db      	uxtb	r3, r3
 800500c:	3301      	adds	r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	4623      	mov	r3, r4
 8005014:	4602      	mov	r2, r0
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 f953 	bl	80062c2 <u8g2_IsIntersection>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8005022:	7878      	ldrb	r0, [r7, #1]
 8005024:	78ba      	ldrb	r2, [r7, #2]
 8005026:	78f9      	ldrb	r1, [r7, #3]
 8005028:	7e3b      	ldrb	r3, [r7, #24]
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	4603      	mov	r3, r0
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff ff6c 	bl	8004f0c <u8g2_draw_circle>
 8005034:	e000      	b.n	8005038 <u8g2_DrawCircle+0x6a>
      return;
 8005036:	bf00      	nop
}
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bd90      	pop	{r4, r7, pc}

0800503e <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	4608      	mov	r0, r1
 8005048:	4611      	mov	r1, r2
 800504a:	461a      	mov	r2, r3
 800504c:	4603      	mov	r3, r0
 800504e:	70fb      	strb	r3, [r7, #3]
 8005050:	460b      	mov	r3, r1
 8005052:	70bb      	strb	r3, [r7, #2]
 8005054:	4613      	mov	r3, r2
 8005056:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8005058:	7d3b      	ldrb	r3, [r7, #20]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01b      	beq.n	800509a <u8g2_draw_disc_section+0x5c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 8005062:	787a      	ldrb	r2, [r7, #1]
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	4413      	add	r3, r2
 8005068:	b2d9      	uxtb	r1, r3
 800506a:	7c3a      	ldrb	r2, [r7, #16]
 800506c:	78bb      	ldrb	r3, [r7, #2]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	b2da      	uxtb	r2, r3
 8005072:	78bb      	ldrb	r3, [r7, #2]
 8005074:	3301      	adds	r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f001 f88c 	bl	8006196 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 800507e:	787a      	ldrb	r2, [r7, #1]
 8005080:	78bb      	ldrb	r3, [r7, #2]
 8005082:	4413      	add	r3, r2
 8005084:	b2d9      	uxtb	r1, r3
 8005086:	7c3a      	ldrb	r2, [r7, #16]
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	b2da      	uxtb	r2, r3
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	3301      	adds	r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f001 f87e 	bl	8006196 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800509a:	7d3b      	ldrb	r3, [r7, #20]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01b      	beq.n	80050dc <u8g2_draw_disc_section+0x9e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 80050a4:	787a      	ldrb	r2, [r7, #1]
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	b2d9      	uxtb	r1, r3
 80050ac:	7c3a      	ldrb	r2, [r7, #16]
 80050ae:	78bb      	ldrb	r3, [r7, #2]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	78bb      	ldrb	r3, [r7, #2]
 80050b6:	3301      	adds	r3, #1
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f001 f86b 	bl	8006196 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 80050c0:	787a      	ldrb	r2, [r7, #1]
 80050c2:	78bb      	ldrb	r3, [r7, #2]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	b2d9      	uxtb	r1, r3
 80050c8:	7c3a      	ldrb	r2, [r7, #16]
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	3301      	adds	r3, #1
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 f85d 	bl	8006196 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80050dc:	7d3b      	ldrb	r3, [r7, #20]
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d015      	beq.n	8005112 <u8g2_draw_disc_section+0xd4>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 80050e6:	787a      	ldrb	r2, [r7, #1]
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	4413      	add	r3, r2
 80050ec:	b2d9      	uxtb	r1, r3
 80050ee:	78bb      	ldrb	r3, [r7, #2]
 80050f0:	3301      	adds	r3, #1
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	7c3a      	ldrb	r2, [r7, #16]
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f001 f84d 	bl	8006196 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 80050fc:	787a      	ldrb	r2, [r7, #1]
 80050fe:	78bb      	ldrb	r3, [r7, #2]
 8005100:	4413      	add	r3, r2
 8005102:	b2d9      	uxtb	r1, r3
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	3301      	adds	r3, #1
 8005108:	b2db      	uxtb	r3, r3
 800510a:	7c3a      	ldrb	r2, [r7, #16]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f001 f842 	bl	8006196 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8005112:	7d3b      	ldrb	r3, [r7, #20]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <u8g2_draw_disc_section+0x10a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 800511c:	787a      	ldrb	r2, [r7, #1]
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	b2d9      	uxtb	r1, r3
 8005124:	78bb      	ldrb	r3, [r7, #2]
 8005126:	3301      	adds	r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	7c3a      	ldrb	r2, [r7, #16]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f001 f832 	bl	8006196 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 8005132:	787a      	ldrb	r2, [r7, #1]
 8005134:	78bb      	ldrb	r3, [r7, #2]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	b2d9      	uxtb	r1, r3
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	3301      	adds	r3, #1
 800513e:	b2db      	uxtb	r3, r3
 8005140:	7c3a      	ldrb	r2, [r7, #16]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 f827 	bl	8006196 <u8g2_DrawVLine>
    }
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af02      	add	r7, sp, #8
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	4608      	mov	r0, r1
 800515a:	4611      	mov	r1, r2
 800515c:	461a      	mov	r2, r3
 800515e:	4603      	mov	r3, r0
 8005160:	70fb      	strb	r3, [r7, #3]
 8005162:	460b      	mov	r3, r1
 8005164:	70bb      	strb	r3, [r7, #2]
 8005166:	4613      	mov	r3, r2
 8005168:	707b      	strb	r3, [r7, #1]
  u8g2_int_t ddF_x;
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
 800516a:	2301      	movs	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
  f -= rad;
 800516e:	7bfa      	ldrb	r2, [r7, #15]
 8005170:	787b      	ldrb	r3, [r7, #1]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	b2db      	uxtb	r3, r3
 8005176:	73fb      	strb	r3, [r7, #15]
  ddF_x = 1;
 8005178:	2301      	movs	r3, #1
 800517a:	73bb      	strb	r3, [r7, #14]
  ddF_y = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	737b      	strb	r3, [r7, #13]
  ddF_y -= rad;
 8005180:	7b7a      	ldrb	r2, [r7, #13]
 8005182:	787b      	ldrb	r3, [r7, #1]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	b2db      	uxtb	r3, r3
 8005188:	737b      	strb	r3, [r7, #13]
  ddF_y *= 2;
 800518a:	7b7b      	ldrb	r3, [r7, #13]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	737b      	strb	r3, [r7, #13]
  x = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	733b      	strb	r3, [r7, #12]
  y = rad;
 8005196:	787b      	ldrb	r3, [r7, #1]
 8005198:	72fb      	strb	r3, [r7, #11]

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 800519a:	78f8      	ldrb	r0, [r7, #3]
 800519c:	7afa      	ldrb	r2, [r7, #11]
 800519e:	7b39      	ldrb	r1, [r7, #12]
 80051a0:	7e3b      	ldrb	r3, [r7, #24]
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	78bb      	ldrb	r3, [r7, #2]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	4603      	mov	r3, r0
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff ff47 	bl	800503e <u8g2_draw_disc_section>
  
  while ( x < y )
 80051b0:	e026      	b.n	8005200 <u8g2_draw_disc+0xb0>
  {
    if (f >= 0) 
 80051b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	db0b      	blt.n	80051d2 <u8g2_draw_disc+0x82>
    {
      y--;
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	3b01      	subs	r3, #1
 80051be:	72fb      	strb	r3, [r7, #11]
      ddF_y += 2;
 80051c0:	7b7b      	ldrb	r3, [r7, #13]
 80051c2:	3302      	adds	r3, #2
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	737b      	strb	r3, [r7, #13]
      f += ddF_y;
 80051c8:	7bfa      	ldrb	r2, [r7, #15]
 80051ca:	7b7b      	ldrb	r3, [r7, #13]
 80051cc:	4413      	add	r3, r2
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	73fb      	strb	r3, [r7, #15]
    }
    x++;
 80051d2:	7b3b      	ldrb	r3, [r7, #12]
 80051d4:	3301      	adds	r3, #1
 80051d6:	733b      	strb	r3, [r7, #12]
    ddF_x += 2;
 80051d8:	7bbb      	ldrb	r3, [r7, #14]
 80051da:	3302      	adds	r3, #2
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	73bb      	strb	r3, [r7, #14]
    f += ddF_x;
 80051e0:	7bfa      	ldrb	r2, [r7, #15]
 80051e2:	7bbb      	ldrb	r3, [r7, #14]
 80051e4:	4413      	add	r3, r2
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	73fb      	strb	r3, [r7, #15]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 80051ea:	78f8      	ldrb	r0, [r7, #3]
 80051ec:	7afa      	ldrb	r2, [r7, #11]
 80051ee:	7b39      	ldrb	r1, [r7, #12]
 80051f0:	7e3b      	ldrb	r3, [r7, #24]
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	78bb      	ldrb	r3, [r7, #2]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	4603      	mov	r3, r0
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff ff1f 	bl	800503e <u8g2_draw_disc_section>
  while ( x < y )
 8005200:	7b3a      	ldrb	r2, [r7, #12]
 8005202:	7afb      	ldrb	r3, [r7, #11]
 8005204:	429a      	cmp	r2, r3
 8005206:	d3d4      	bcc.n	80051b2 <u8g2_draw_disc+0x62>
  }
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8005212:	b590      	push	{r4, r7, lr}
 8005214:	b085      	sub	sp, #20
 8005216:	af02      	add	r7, sp, #8
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	4608      	mov	r0, r1
 800521c:	4611      	mov	r1, r2
 800521e:	461a      	mov	r2, r3
 8005220:	4603      	mov	r3, r0
 8005222:	70fb      	strb	r3, [r7, #3]
 8005224:	460b      	mov	r3, r1
 8005226:	70bb      	strb	r3, [r7, #2]
 8005228:	4613      	mov	r3, r2
 800522a:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	787b      	ldrb	r3, [r7, #1]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	b2d9      	uxtb	r1, r3
 8005234:	78ba      	ldrb	r2, [r7, #2]
 8005236:	787b      	ldrb	r3, [r7, #1]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	b2d8      	uxtb	r0, r3
 800523c:	78fa      	ldrb	r2, [r7, #3]
 800523e:	787b      	ldrb	r3, [r7, #1]
 8005240:	4413      	add	r3, r2
 8005242:	b2db      	uxtb	r3, r3
 8005244:	3301      	adds	r3, #1
 8005246:	b2dc      	uxtb	r4, r3
 8005248:	78ba      	ldrb	r2, [r7, #2]
 800524a:	787b      	ldrb	r3, [r7, #1]
 800524c:	4413      	add	r3, r2
 800524e:	b2db      	uxtb	r3, r3
 8005250:	3301      	adds	r3, #1
 8005252:	b2db      	uxtb	r3, r3
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	4623      	mov	r3, r4
 8005258:	4602      	mov	r2, r0
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f001 f831 	bl	80062c2 <u8g2_IsIntersection>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <u8g2_DrawDisc+0x68>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
 8005266:	7878      	ldrb	r0, [r7, #1]
 8005268:	78ba      	ldrb	r2, [r7, #2]
 800526a:	78f9      	ldrb	r1, [r7, #3]
 800526c:	7e3b      	ldrb	r3, [r7, #24]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	4603      	mov	r3, r0
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff ff6c 	bl	8005150 <u8g2_draw_disc>
 8005278:	e000      	b.n	800527c <u8g2_DrawDisc+0x6a>
      return;
 800527a:	bf00      	nop
}
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bd90      	pop	{r4, r7, pc}
	...

08005284 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2208      	movs	r2, #8
 8005290:	701a      	strb	r2, [r3, #0]
  return buf;
 8005292:	4b03      	ldr	r3, [pc, #12]	@ (80052a0 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	20000778 	.word	0x20000778

080052a4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a0b      	ldr	r2, [pc, #44]	@ (80052e8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 80052ba:	490c      	ldr	r1, [pc, #48]	@ (80052ec <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f001 fff5 	bl	80072ac <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80052c2:	f107 0313 	add.w	r3, r7, #19
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ffdc 	bl	8005284 <u8g2_m_16_8_f>
 80052cc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80052ce:	7cfa      	ldrb	r2, [r7, #19]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 80052d6:	6979      	ldr	r1, [r7, #20]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f001 f901 	bl	80064e0 <u8g2_SetupBuffer>
}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	08006de1 	.word	0x08006de1
 80052ec:	0800703d 	.word	0x0800703d
 80052f0:	08006319 	.word	0x08006319

080052f4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	781b      	ldrb	r3, [r3, #0]
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	4413      	add	r3, r2
 800532a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	81fb      	strh	r3, [r7, #14]
    font++;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3301      	adds	r3, #1
 8005336:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	89fb      	ldrh	r3, [r7, #14]
 8005346:	4413      	add	r3, r2
 8005348:	81fb      	strh	r3, [r7, #14]
    return pos;
 800534a:	89fb      	ldrh	r3, [r7, #14]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8005362:	2100      	movs	r1, #0
 8005364:	6838      	ldr	r0, [r7, #0]
 8005366:	f7ff ffc5 	bl	80052f4 <u8g2_font_get_byte>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8005372:	2101      	movs	r1, #1
 8005374:	6838      	ldr	r0, [r7, #0]
 8005376:	f7ff ffbd 	bl	80052f4 <u8g2_font_get_byte>
 800537a:	4603      	mov	r3, r0
 800537c:	461a      	mov	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8005382:	2102      	movs	r1, #2
 8005384:	6838      	ldr	r0, [r7, #0]
 8005386:	f7ff ffb5 	bl	80052f4 <u8g2_font_get_byte>
 800538a:	4603      	mov	r3, r0
 800538c:	461a      	mov	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8005392:	2103      	movs	r1, #3
 8005394:	6838      	ldr	r0, [r7, #0]
 8005396:	f7ff ffad 	bl	80052f4 <u8g2_font_get_byte>
 800539a:	4603      	mov	r3, r0
 800539c:	461a      	mov	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80053a2:	2104      	movs	r1, #4
 80053a4:	6838      	ldr	r0, [r7, #0]
 80053a6:	f7ff ffa5 	bl	80052f4 <u8g2_font_get_byte>
 80053aa:	4603      	mov	r3, r0
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80053b2:	2105      	movs	r1, #5
 80053b4:	6838      	ldr	r0, [r7, #0]
 80053b6:	f7ff ff9d 	bl	80052f4 <u8g2_font_get_byte>
 80053ba:	4603      	mov	r3, r0
 80053bc:	461a      	mov	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80053c2:	2106      	movs	r1, #6
 80053c4:	6838      	ldr	r0, [r7, #0]
 80053c6:	f7ff ff95 	bl	80052f4 <u8g2_font_get_byte>
 80053ca:	4603      	mov	r3, r0
 80053cc:	461a      	mov	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80053d2:	2107      	movs	r1, #7
 80053d4:	6838      	ldr	r0, [r7, #0]
 80053d6:	f7ff ff8d 	bl	80052f4 <u8g2_font_get_byte>
 80053da:	4603      	mov	r3, r0
 80053dc:	461a      	mov	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80053e2:	2108      	movs	r1, #8
 80053e4:	6838      	ldr	r0, [r7, #0]
 80053e6:	f7ff ff85 	bl	80052f4 <u8g2_font_get_byte>
 80053ea:	4603      	mov	r3, r0
 80053ec:	461a      	mov	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80053f2:	2109      	movs	r1, #9
 80053f4:	6838      	ldr	r0, [r7, #0]
 80053f6:	f7ff ff7d 	bl	80052f4 <u8g2_font_get_byte>
 80053fa:	4603      	mov	r3, r0
 80053fc:	b25a      	sxtb	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8005402:	210a      	movs	r1, #10
 8005404:	6838      	ldr	r0, [r7, #0]
 8005406:	f7ff ff75 	bl	80052f4 <u8g2_font_get_byte>
 800540a:	4603      	mov	r3, r0
 800540c:	b25a      	sxtb	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8005412:	210b      	movs	r1, #11
 8005414:	6838      	ldr	r0, [r7, #0]
 8005416:	f7ff ff6d 	bl	80052f4 <u8g2_font_get_byte>
 800541a:	4603      	mov	r3, r0
 800541c:	b25a      	sxtb	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8005422:	210c      	movs	r1, #12
 8005424:	6838      	ldr	r0, [r7, #0]
 8005426:	f7ff ff65 	bl	80052f4 <u8g2_font_get_byte>
 800542a:	4603      	mov	r3, r0
 800542c:	b25a      	sxtb	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8005432:	210d      	movs	r1, #13
 8005434:	6838      	ldr	r0, [r7, #0]
 8005436:	f7ff ff5d 	bl	80052f4 <u8g2_font_get_byte>
 800543a:	4603      	mov	r3, r0
 800543c:	b25a      	sxtb	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8005442:	210e      	movs	r1, #14
 8005444:	6838      	ldr	r0, [r7, #0]
 8005446:	f7ff ff55 	bl	80052f4 <u8g2_font_get_byte>
 800544a:	4603      	mov	r3, r0
 800544c:	b25a      	sxtb	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8005452:	210f      	movs	r1, #15
 8005454:	6838      	ldr	r0, [r7, #0]
 8005456:	f7ff ff4d 	bl	80052f4 <u8g2_font_get_byte>
 800545a:	4603      	mov	r3, r0
 800545c:	b25a      	sxtb	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8005462:	2110      	movs	r1, #16
 8005464:	6838      	ldr	r0, [r7, #0]
 8005466:	f7ff ff45 	bl	80052f4 <u8g2_font_get_byte>
 800546a:	4603      	mov	r3, r0
 800546c:	b25a      	sxtb	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8005472:	2111      	movs	r1, #17
 8005474:	6838      	ldr	r0, [r7, #0]
 8005476:	f7ff ff4f 	bl	8005318 <u8g2_font_get_word>
 800547a:	4603      	mov	r3, r0
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8005482:	2113      	movs	r1, #19
 8005484:	6838      	ldr	r0, [r7, #0]
 8005486:	f7ff ff47 	bl	8005318 <u8g2_font_get_word>
 800548a:	4603      	mov	r3, r0
 800548c:	461a      	mov	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8005492:	2115      	movs	r1, #21
 8005494:	6838      	ldr	r0, [r7, #0]
 8005496:	f7ff ff3f 	bl	8005318 <u8g2_font_get_word>
 800549a:	4603      	mov	r3, r0
 800549c:	461a      	mov	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	82da      	strh	r2, [r3, #22]
#endif
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	460b      	mov	r3, r1
 80054b4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7a9b      	ldrb	r3, [r3, #10]
 80054ba:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80054c4:	7bfa      	ldrb	r2, [r7, #15]
 80054c6:	7b7b      	ldrb	r3, [r7, #13]
 80054c8:	fa42 f303 	asr.w	r3, r2, r3
 80054cc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80054ce:	7b7b      	ldrb	r3, [r7, #13]
 80054d0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80054d2:	7bba      	ldrb	r2, [r7, #14]
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	4413      	add	r3, r2
 80054d8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	2b07      	cmp	r3, #7
 80054de:	d91a      	bls.n	8005516 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80054e0:	2308      	movs	r3, #8
 80054e2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80054e4:	7b3a      	ldrb	r2, [r7, #12]
 80054e6:	7b7b      	ldrb	r3, [r7, #13]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	7b3b      	ldrb	r3, [r7, #12]
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	b25a      	sxtb	r2, r3
 8005506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800550a:	4313      	orrs	r3, r2
 800550c:	b25b      	sxtb	r3, r3
 800550e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	3b08      	subs	r3, #8
 8005514:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	f04f 32ff 	mov.w	r2, #4294967295
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	b2db      	uxtb	r3, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	b2da      	uxtb	r2, r3
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	4013      	ands	r3, r2
 800552a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	7bba      	ldrb	r2, [r7, #14]
 8005530:	729a      	strb	r2, [r3, #10]
  return val;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	4619      	mov	r1, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ffaa 	bl	80054aa <u8g2_font_decode_get_unsigned_bits>
 8005556:	4603      	mov	r3, r0
 8005558:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800555a:	2301      	movs	r3, #1
 800555c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	3b01      	subs	r3, #1
 8005562:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8005564:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8005570:	7bfa      	ldrb	r2, [r7, #15]
 8005572:	7bbb      	ldrb	r3, [r7, #14]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	b2db      	uxtb	r3, r3
 8005578:	73fb      	strb	r3, [r7, #15]
  return v;
 800557a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8005586:	b490      	push	{r4, r7}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	4604      	mov	r4, r0
 800558e:	4608      	mov	r0, r1
 8005590:	4611      	mov	r1, r2
 8005592:	461a      	mov	r2, r3
 8005594:	4623      	mov	r3, r4
 8005596:	71fb      	strb	r3, [r7, #7]
 8005598:	4603      	mov	r3, r0
 800559a:	71bb      	strb	r3, [r7, #6]
 800559c:	460b      	mov	r3, r1
 800559e:	717b      	strb	r3, [r7, #5]
 80055a0:	4613      	mov	r3, r2
 80055a2:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80055a4:	793b      	ldrb	r3, [r7, #4]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d010      	beq.n	80055cc <u8g2_add_vector_y+0x46>
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	dc13      	bgt.n	80055d6 <u8g2_add_vector_y+0x50>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <u8g2_add_vector_y+0x32>
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d005      	beq.n	80055c2 <u8g2_add_vector_y+0x3c>
 80055b6:	e00e      	b.n	80055d6 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 80055b8:	797a      	ldrb	r2, [r7, #5]
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	4413      	add	r3, r2
 80055be:	71fb      	strb	r3, [r7, #7]
      break;
 80055c0:	e00e      	b.n	80055e0 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80055c2:	79ba      	ldrb	r2, [r7, #6]
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	4413      	add	r3, r2
 80055c8:	71fb      	strb	r3, [r7, #7]
      break;
 80055ca:	e009      	b.n	80055e0 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 80055cc:	797b      	ldrb	r3, [r7, #5]
 80055ce:	79fa      	ldrb	r2, [r7, #7]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	71fb      	strb	r3, [r7, #7]
      break;
 80055d4:	e004      	b.n	80055e0 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 80055d6:	79bb      	ldrb	r3, [r7, #6]
 80055d8:	79fa      	ldrb	r2, [r7, #7]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	71fb      	strb	r3, [r7, #7]
      break;      
 80055de:	bf00      	nop
  }
  return dy;
 80055e0:	79fb      	ldrb	r3, [r7, #7]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc90      	pop	{r4, r7}
 80055ea:	4770      	bx	lr

080055ec <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80055ec:	b490      	push	{r4, r7}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4604      	mov	r4, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	4611      	mov	r1, r2
 80055f8:	461a      	mov	r2, r3
 80055fa:	4623      	mov	r3, r4
 80055fc:	71fb      	strb	r3, [r7, #7]
 80055fe:	4603      	mov	r3, r0
 8005600:	71bb      	strb	r3, [r7, #6]
 8005602:	460b      	mov	r3, r1
 8005604:	717b      	strb	r3, [r7, #5]
 8005606:	4613      	mov	r3, r2
 8005608:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800560a:	793b      	ldrb	r3, [r7, #4]
 800560c:	2b02      	cmp	r3, #2
 800560e:	d010      	beq.n	8005632 <u8g2_add_vector_x+0x46>
 8005610:	2b02      	cmp	r3, #2
 8005612:	dc13      	bgt.n	800563c <u8g2_add_vector_x+0x50>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <u8g2_add_vector_x+0x32>
 8005618:	2b01      	cmp	r3, #1
 800561a:	d005      	beq.n	8005628 <u8g2_add_vector_x+0x3c>
 800561c:	e00e      	b.n	800563c <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 800561e:	79ba      	ldrb	r2, [r7, #6]
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	4413      	add	r3, r2
 8005624:	71fb      	strb	r3, [r7, #7]
      break;
 8005626:	e00e      	b.n	8005646 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8005628:	797b      	ldrb	r3, [r7, #5]
 800562a:	79fa      	ldrb	r2, [r7, #7]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	71fb      	strb	r3, [r7, #7]
      break;
 8005630:	e009      	b.n	8005646 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8005632:	79bb      	ldrb	r3, [r7, #6]
 8005634:	79fa      	ldrb	r2, [r7, #7]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	71fb      	strb	r3, [r7, #7]
      break;
 800563a:	e004      	b.n	8005646 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 800563c:	797a      	ldrb	r2, [r7, #5]
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	4413      	add	r3, r2
 8005642:	71fb      	strb	r3, [r7, #7]
      break;      
 8005644:	bf00      	nop
  }
  return dx;
 8005646:	79fb      	ldrb	r3, [r7, #7]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bc90      	pop	{r4, r7}
 8005650:	4770      	bx	lr

08005652 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b088      	sub	sp, #32
 8005656:	af02      	add	r7, sp, #8
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
 800565e:	4613      	mov	r3, r2
 8005660:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3358      	adds	r3, #88	@ 0x58
 8005666:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005672:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800567a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005682:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8005684:	7bfa      	ldrb	r2, [r7, #15]
 8005686:	7d7b      	ldrb	r3, [r7, #21]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8005690:	7dfa      	ldrb	r2, [r7, #23]
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	429a      	cmp	r2, r3
 8005696:	d201      	bcs.n	800569c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8005698:	7dfb      	ldrb	r3, [r7, #23]
 800569a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	791b      	ldrb	r3, [r3, #4]
 80056a0:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	795b      	ldrb	r3, [r3, #5]
 80056a6:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80056a8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80056ac:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	7b9b      	ldrb	r3, [r3, #14]
 80056b4:	7bb8      	ldrb	r0, [r7, #14]
 80056b6:	f7ff ff99 	bl	80055ec <u8g2_add_vector_x>
 80056ba:	4603      	mov	r3, r0
 80056bc:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80056be:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80056c2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	7b9b      	ldrb	r3, [r3, #14]
 80056ca:	7b78      	ldrb	r0, [r7, #13]
 80056cc:	f7ff ff5b 	bl	8005586 <u8g2_add_vector_y>
 80056d0:	4603      	mov	r3, r0
 80056d2:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80056d4:	78bb      	ldrb	r3, [r7, #2]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00f      	beq.n	80056fa <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	7b1a      	ldrb	r2, [r3, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
      u8g2_DrawHVLine(u8g2, 
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	7b9b      	ldrb	r3, [r3, #14]
 80056e8:	7db8      	ldrb	r0, [r7, #22]
 80056ea:	7b7a      	ldrb	r2, [r7, #13]
 80056ec:	7bb9      	ldrb	r1, [r7, #14]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	4603      	mov	r3, r0
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fcb3 	bl	800605e <u8g2_DrawHVLine>
 80056f8:	e012      	b.n	8005720 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	7adb      	ldrb	r3, [r3, #11]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10e      	bne.n	8005720 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	7b5a      	ldrb	r2, [r3, #13]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
      u8g2_DrawHVLine(u8g2, 
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	7b9b      	ldrb	r3, [r3, #14]
 8005710:	7db8      	ldrb	r0, [r7, #22]
 8005712:	7b7a      	ldrb	r2, [r7, #13]
 8005714:	7bb9      	ldrb	r1, [r7, #14]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	4603      	mov	r3, r0
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fc9f 	bl	800605e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8005720:	7dfa      	ldrb	r2, [r7, #23]
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	429a      	cmp	r2, r3
 8005726:	d309      	bcc.n	800573c <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8005728:	7dfa      	ldrb	r2, [r7, #23]
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	757b      	strb	r3, [r7, #21]
    ly++;
 8005734:	7d3b      	ldrb	r3, [r7, #20]
 8005736:	3301      	adds	r3, #1
 8005738:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800573a:	e79f      	b.n	800567c <u8g2_font_decode_len+0x2a>
      break;
 800573c:	bf00      	nop
  }
  lx += cnt;
 800573e:	7d7a      	ldrb	r2, [r7, #21]
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	4413      	add	r3, r2
 8005744:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8005746:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 800574e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	71da      	strb	r2, [r3, #7]
  
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3358      	adds	r3, #88	@ 0x58
 800576c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8005780:	4619      	mov	r1, r3
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff fe91 	bl	80054aa <u8g2_font_decode_get_unsigned_bits>
 8005788:	4603      	mov	r3, r0
 800578a:	b25a      	sxtb	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8005796:	4619      	mov	r1, r3
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff fe86 	bl	80054aa <u8g2_font_decode_get_unsigned_bits>
 800579e:	4603      	mov	r3, r0
 80057a0:	b25a      	sxtb	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 2086 	ldrb.w	r2, [r3, #134]	@ 0x86
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	7b1b      	ldrb	r3, [r3, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	735a      	strb	r2, [r3, #13]
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3358      	adds	r3, #88	@ 0x58
 80057da:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff ffbd 	bl	800575e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80057ea:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80057f2:	4619      	mov	r1, r3
 80057f4:	6938      	ldr	r0, [r7, #16]
 80057f6:	f7ff fea3 	bl	8005540 <u8g2_font_decode_get_signed_bits>
 80057fa:	4603      	mov	r3, r0
 80057fc:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8005804:	4619      	mov	r1, r3
 8005806:	6938      	ldr	r0, [r7, #16]
 8005808:	f7ff fe9a 	bl	8005540 <u8g2_font_decode_get_signed_bits>
 800580c:	4603      	mov	r3, r0
 800580e:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8005816:	4619      	mov	r1, r3
 8005818:	6938      	ldr	r0, [r7, #16]
 800581a:	f7ff fe91 	bl	8005540 <u8g2_font_decode_get_signed_bits>
 800581e:	4603      	mov	r3, r0
 8005820:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	f340 80cf 	ble.w	80059cc <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	7918      	ldrb	r0, [r3, #4]
 8005832:	7bfa      	ldrb	r2, [r7, #15]
 8005834:	7b7b      	ldrb	r3, [r7, #13]
 8005836:	4413      	add	r3, r2
 8005838:	b2db      	uxtb	r3, r3
 800583a:	425b      	negs	r3, r3
 800583c:	b2db      	uxtb	r3, r3
 800583e:	b25a      	sxtb	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	7b9b      	ldrb	r3, [r3, #14]
 8005844:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8005848:	f7ff fed0 	bl	80055ec <u8g2_add_vector_x>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	7958      	ldrb	r0, [r3, #5]
 8005858:	7bfa      	ldrb	r2, [r7, #15]
 800585a:	7b7b      	ldrb	r3, [r7, #13]
 800585c:	4413      	add	r3, r2
 800585e:	b2db      	uxtb	r3, r3
 8005860:	425b      	negs	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	b25a      	sxtb	r2, r3
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	7b9b      	ldrb	r3, [r3, #14]
 800586a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800586e:	f7ff fe8a 	bl	8005586 <u8g2_add_vector_y>
 8005872:	4603      	mov	r3, r0
 8005874:	461a      	mov	r2, r3
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	791b      	ldrb	r3, [r3, #4]
 800587e:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	795b      	ldrb	r3, [r3, #5]
 8005884:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 800588a:	7d7b      	ldrb	r3, [r7, #21]
 800588c:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	7b9b      	ldrb	r3, [r3, #14]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d852      	bhi.n	800593c <u8g2_font_decode_glyph+0x170>
 8005896:	a201      	add	r2, pc, #4	@ (adr r2, 800589c <u8g2_font_decode_glyph+0xd0>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058ad 	.word	0x080058ad
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058e9 	.word	0x080058e9
 80058a8:	08005919 	.word	0x08005919
      {
	case 0:
	    x1 += decode->glyph_width;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	7dbb      	ldrb	r3, [r7, #22]
 80058b6:	4413      	add	r3, r2
 80058b8:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 80058ba:	7bfa      	ldrb	r2, [r7, #15]
 80058bc:	7d3b      	ldrb	r3, [r7, #20]
 80058be:	4413      	add	r3, r2
 80058c0:	753b      	strb	r3, [r7, #20]
	    break;
 80058c2:	e03b      	b.n	800593c <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	7dfa      	ldrb	r2, [r7, #23]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
 80058ce:	3301      	adds	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80058d2:	7dbb      	ldrb	r3, [r7, #22]
 80058d4:	3301      	adds	r3, #1
 80058d6:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	7d3b      	ldrb	r3, [r7, #20]
 80058e2:	4413      	add	r3, r2
 80058e4:	753b      	strb	r3, [r7, #20]
	    break;
 80058e6:	e029      	b.n	800593c <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	7dfa      	ldrb	r2, [r7, #23]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
 80058f8:	3301      	adds	r3, #1
 80058fa:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80058fc:	7dbb      	ldrb	r3, [r7, #22]
 80058fe:	3301      	adds	r3, #1
 8005900:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	7d7a      	ldrb	r2, [r7, #21]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800590a:	7d7b      	ldrb	r3, [r7, #21]
 800590c:	3301      	adds	r3, #1
 800590e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8005910:	7d3b      	ldrb	r3, [r7, #20]
 8005912:	3301      	adds	r3, #1
 8005914:	753b      	strb	r3, [r7, #20]
	    break;	  
 8005916:	e011      	b.n	800593c <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8005918:	7bfa      	ldrb	r2, [r7, #15]
 800591a:	7dbb      	ldrb	r3, [r7, #22]
 800591c:	4413      	add	r3, r2
 800591e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	7d7a      	ldrb	r2, [r7, #21]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800592e:	7d7b      	ldrb	r3, [r7, #21]
 8005930:	3301      	adds	r3, #1
 8005932:	757b      	strb	r3, [r7, #21]
	    y1++;
 8005934:	7d3b      	ldrb	r3, [r7, #20]
 8005936:	3301      	adds	r3, #1
 8005938:	753b      	strb	r3, [r7, #20]
	    break;	  
 800593a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800593c:	7db8      	ldrb	r0, [r7, #22]
 800593e:	7d7a      	ldrb	r2, [r7, #21]
 8005940:	7df9      	ldrb	r1, [r7, #23]
 8005942:	7d3b      	ldrb	r3, [r7, #20]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	4603      	mov	r3, r0
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fcba 	bl	80062c2 <u8g2_IsIntersection>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <u8g2_font_decode_glyph+0x18e>
	return d;
 8005954:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005958:	e03a      	b.n	80059d0 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2200      	movs	r2, #0
 800595e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2200      	movs	r2, #0
 8005964:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800596c:	4619      	mov	r1, r3
 800596e:	6938      	ldr	r0, [r7, #16]
 8005970:	f7ff fd9b 	bl	80054aa <u8g2_font_decode_get_unsigned_bits>
 8005974:	4603      	mov	r3, r0
 8005976:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800597e:	4619      	mov	r1, r3
 8005980:	6938      	ldr	r0, [r7, #16]
 8005982:	f7ff fd92 	bl	80054aa <u8g2_font_decode_get_unsigned_bits>
 8005986:	4603      	mov	r3, r0
 8005988:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800598a:	7afb      	ldrb	r3, [r7, #11]
 800598c:	2200      	movs	r2, #0
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fe5e 	bl	8005652 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8005996:	7abb      	ldrb	r3, [r7, #10]
 8005998:	2201      	movs	r2, #1
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff fe58 	bl	8005652 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80059a2:	2101      	movs	r1, #1
 80059a4:	6938      	ldr	r0, [r7, #16]
 80059a6:	f7ff fd80 	bl	80054aa <u8g2_font_decode_get_unsigned_bits>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1ec      	bne.n	800598a <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80059b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	dd00      	ble.n	80059c0 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80059be:	e7d2      	b.n	8005966 <u8g2_font_decode_glyph+0x19a>
	break;
 80059c0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	7b1a      	ldrb	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
  }
  return d;
 80059cc:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	3317      	adds	r3, #23
 80059ee:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80059f0:	887b      	ldrh	r3, [r7, #2]
 80059f2:	2bff      	cmp	r3, #255	@ 0xff
 80059f4:	d82a      	bhi.n	8005a4c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80059f6:	887b      	ldrh	r3, [r7, #2]
 80059f8:	2b60      	cmp	r3, #96	@ 0x60
 80059fa:	d907      	bls.n	8005a0c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8005a02:	461a      	mov	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	4413      	add	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e009      	b.n	8005a20 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8005a0c:	887b      	ldrh	r3, [r7, #2]
 8005a0e:	2b40      	cmp	r3, #64	@ 0x40
 8005a10:	d906      	bls.n	8005a20 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 8005a18:	461a      	mov	r2, r3
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	3301      	adds	r3, #1
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d04e      	beq.n	8005ac8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	887b      	ldrh	r3, [r7, #2]
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d102      	bne.n	8005a3c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	3302      	adds	r3, #2
 8005a3a:	e049      	b.n	8005ad0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8005a4a:	e7e9      	b.n	8005a20 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8005a52:	461a      	mov	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8005a5e:	2100      	movs	r1, #0
 8005a60:	6938      	ldr	r0, [r7, #16]
 8005a62:	f7ff fc59 	bl	8005318 <u8g2_font_get_word>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8005a70:	2102      	movs	r1, #2
 8005a72:	6938      	ldr	r0, [r7, #16]
 8005a74:	f7ff fc50 	bl	8005318 <u8g2_font_get_word>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8005a82:	89fa      	ldrh	r2, [r7, #14]
 8005a84:	887b      	ldrh	r3, [r7, #2]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d3e9      	bcc.n	8005a5e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8005a90:	89fb      	ldrh	r3, [r7, #14]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	89fb      	ldrh	r3, [r7, #14]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8005aa4:	89fb      	ldrh	r3, [r7, #14]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d010      	beq.n	8005acc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8005aaa:	89fa      	ldrh	r2, [r7, #14]
 8005aac:	887b      	ldrh	r3, [r7, #2]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d102      	bne.n	8005ab8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	3303      	adds	r3, #3
 8005ab6:	e00b      	b.n	8005ad0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	3302      	adds	r3, #2
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8005ac6:	e7e0      	b.n	8005a8a <u8g2_font_get_glyph_data+0xb2>
	break;
 8005ac8:	bf00      	nop
 8005aca:	e000      	b.n	8005ace <u8g2_font_get_glyph_data+0xf6>
	break;
 8005acc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	70fb      	strb	r3, [r7, #3]
 8005aea:	460b      	mov	r3, r1
 8005aec:	70bb      	strb	r3, [r7, #2]
 8005aee:	4613      	mov	r3, r2
 8005af0:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  u8g2->font_decode.target_y = y;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	78ba      	ldrb	r2, [r7, #2]
 8005b02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8005b06:	883b      	ldrh	r3, [r7, #0]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff ff64 	bl	80059d8 <u8g2_font_get_glyph_data>
 8005b10:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fe56 	bl	80057cc <u8g2_font_decode_glyph>
 8005b20:	4603      	mov	r3, r0
 8005b22:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8005b3a:	887b      	ldrh	r3, [r7, #2]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff ff4a 	bl	80059d8 <u8g2_font_get_glyph_data>
 8005b44:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e027      	b.n	8005ba0 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8005b50:	68f9      	ldr	r1, [r7, #12]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fe03 	bl	800575e <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f7ff fcea 	bl	8005540 <u8g2_font_decode_get_signed_bits>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	461a      	mov	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f7ff fcdb 	bl	8005540 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8005b96:	4619      	mov	r1, r3
 8005b98:	4610      	mov	r0, r2
 8005b9a:	f7ff fcd1 	bl	8005540 <u8g2_font_decode_get_signed_bits>
 8005b9e:	4603      	mov	r3, r0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	70fb      	strb	r3, [r7, #3]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70bb      	strb	r3, [r7, #2]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d833      	bhi.n	8005c34 <u8g2_DrawGlyph+0x8c>
 8005bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <u8g2_DrawGlyph+0x2c>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005be5 	.word	0x08005be5
 8005bd8:	08005bf9 	.word	0x08005bf9
 8005bdc:	08005c0d 	.word	0x08005c0d
 8005be0:	08005c21 	.word	0x08005c21
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	4798      	blx	r3
 8005bec:	4603      	mov	r3, r0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	78bb      	ldrb	r3, [r7, #2]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	70bb      	strb	r3, [r7, #2]
      break;
 8005bf6:	e01d      	b.n	8005c34 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
 8005c00:	4603      	mov	r3, r0
 8005c02:	461a      	mov	r2, r3
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	70fb      	strb	r3, [r7, #3]
      break;
 8005c0a:	e013      	b.n	8005c34 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	78bb      	ldrb	r3, [r7, #2]
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	70bb      	strb	r3, [r7, #2]
      break;
 8005c1e:	e009      	b.n	8005c34 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
 8005c28:	4603      	mov	r3, r0
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	4413      	add	r3, r2
 8005c30:	70fb      	strb	r3, [r7, #3]
      break;
 8005c32:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8005c34:	883b      	ldrh	r3, [r7, #0]
 8005c36:	78ba      	ldrb	r2, [r7, #2]
 8005c38:	78f9      	ldrb	r1, [r7, #3]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff ff4c 	bl	8005ad8 <u8g2_font_draw_glyph>
 8005c40:	4603      	mov	r3, r0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop

08005c4c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	607b      	str	r3, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	72fb      	strb	r3, [r7, #11]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fd92 	bl	8006788 <u8x8_utf8_init>
  sum = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	4611      	mov	r1, r2
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	4798      	blx	r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8005c7a:	8abb      	ldrh	r3, [r7, #20]
 8005c7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d038      	beq.n	8005cf6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3301      	adds	r3, #1
 8005c88:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8005c8a:	8abb      	ldrh	r3, [r7, #20]
 8005c8c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d0e9      	beq.n	8005c68 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8005c94:	8abb      	ldrh	r3, [r7, #20]
 8005c96:	7aba      	ldrb	r2, [r7, #10]
 8005c98:	7af9      	ldrb	r1, [r7, #11]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff ff84 	bl	8005ba8 <u8g2_DrawGlyph>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d81e      	bhi.n	8005cec <u8g2_draw_string+0xa0>
 8005cae:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb4 <u8g2_draw_string+0x68>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005cc5 	.word	0x08005cc5
 8005cb8:	08005ccf 	.word	0x08005ccf
 8005cbc:	08005cd9 	.word	0x08005cd9
 8005cc0:	08005ce3 	.word	0x08005ce3
      {
	case 0:
	  x += delta;
 8005cc4:	7afa      	ldrb	r2, [r7, #11]
 8005cc6:	7cfb      	ldrb	r3, [r7, #19]
 8005cc8:	4413      	add	r3, r2
 8005cca:	72fb      	strb	r3, [r7, #11]
	  break;
 8005ccc:	e00e      	b.n	8005cec <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8005cce:	7aba      	ldrb	r2, [r7, #10]
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	72bb      	strb	r3, [r7, #10]
	  break;
 8005cd6:	e009      	b.n	8005cec <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8005cd8:	7afa      	ldrb	r2, [r7, #11]
 8005cda:	7cfb      	ldrb	r3, [r7, #19]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	72fb      	strb	r3, [r7, #11]
	  break;
 8005ce0:	e004      	b.n	8005cec <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8005ce2:	7aba      	ldrb	r2, [r7, #10]
 8005ce4:	7cfb      	ldrb	r3, [r7, #19]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	72bb      	strb	r3, [r7, #10]
	  break;
 8005cea:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8005cec:	7dfa      	ldrb	r2, [r7, #23]
 8005cee:	7cfb      	ldrb	r3, [r7, #19]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005cf4:	e7b8      	b.n	8005c68 <u8g2_draw_string+0x1c>
      break;
 8005cf6:	bf00      	nop
    }
  }
  return sum;
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop

08005d04 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	607b      	str	r3, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	72fb      	strb	r3, [r7, #11]
 8005d12:	4613      	mov	r3, r2
 8005d14:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a06      	ldr	r2, [pc, #24]	@ (8005d34 <u8g2_DrawUTF8+0x30>)
 8005d1a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8005d1c:	7aba      	ldrb	r2, [r7, #10]
 8005d1e:	7af9      	ldrb	r1, [r7, #11]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff ff92 	bl	8005c4c <u8g2_draw_string>
 8005d28:	4603      	mov	r3, r0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	080067d3 	.word	0x080067d3

08005d38 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d05d      	beq.n	8005e04 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f993 2075 	ldrsb.w	r2, [r3, #117]	@ 0x75
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f993 2076 	ldrsb.w	r2, [r3, #118]	@ 0x76
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d04d      	beq.n	8005e06 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d11c      	bne.n	8005dae <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f993 3077 	ldrsb.w	r3, [r3, #119]	@ 0x77
 8005d80:	429a      	cmp	r2, r3
 8005d82:	da05      	bge.n	8005d90 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f993 2077 	ldrsb.w	r2, [r3, #119]	@ 0x77
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f993 3078 	ldrsb.w	r3, [r3, #120]	@ 0x78
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	dd32      	ble.n	8005e06 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f993 2078 	ldrsb.w	r2, [r3, #120]	@ 0x78
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 8005dac:	e02b      	b.n	8005e06 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 8005db4:	461a      	mov	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f993 3072 	ldrsb.w	r3, [r3, #114]	@ 0x72
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f993 3074 	ldrsb.w	r3, [r3, #116]	@ 0x74
 8005dc4:	440b      	add	r3, r1
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	da0d      	bge.n	8005de6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f993 3072 	ldrsb.w	r3, [r3, #114]	@ 0x72
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f993 3074 	ldrsb.w	r3, [r3, #116]	@ 0x74
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	4413      	add	r3, r2
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	b25a      	sxtb	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f993 3074 	ldrsb.w	r3, [r3, #116]	@ 0x74
 8005df2:	429a      	cmp	r2, r3
 8005df4:	dd07      	ble.n	8005e06 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f993 2074 	ldrsb.w	r2, [r3, #116]	@ 0x74
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 8005e02:	e000      	b.n	8005e06 <u8g2_UpdateRefHeight+0xce>
    return;
 8005e04:	bf00      	nop
  }  
}
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  return 0;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a04      	ldr	r2, [pc, #16]	@ (8005e44 <u8g2_SetFontPosBaseline+0x1c>)
 8005e34:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	08005e11 	.word	0x08005e11

08005e48 <u8g2_font_calc_vref_bottom>:


u8g2_uint_t u8g2_font_calc_vref_bottom(u8g2_t *u8g2)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  return (u8g2_uint_t)(u8g2->font_ref_descent);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8005e56:	b2db      	uxtb	r3, r3
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <u8g2_SetFontPosBottom>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a04      	ldr	r2, [pc, #16]	@ (8005e80 <u8g2_SetFontPosBottom+0x1c>)
 8005e70:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	08005e49 	.word	0x08005e49

08005e84 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d00b      	beq.n	8005eb0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	651a      	str	r2, [r3, #80]	@ 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3368      	adds	r3, #104	@ 0x68
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fa57 	bl	8005358 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff ff44 	bl	8005d38 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fc5c 	bl	8006788 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	7812      	ldrb	r2, [r2, #0]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	4798      	blx	r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8005eea:	89bb      	ldrh	r3, [r7, #12]
 8005eec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d013      	beq.n	8005f1c <u8g2_string_width+0x64>
      break;
    str++;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8005efa:	89bb      	ldrh	r3, [r7, #12]
 8005efc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d0e9      	beq.n	8005ed8 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8005f04:	89bb      	ldrh	r3, [r7, #12]
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff fe10 	bl	8005b2e <u8g2_GetGlyphWidth>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73bb      	strb	r3, [r7, #14]
      w += dx;
 8005f12:	7bfa      	ldrb	r2, [r7, #15]
 8005f14:	7bbb      	ldrb	r3, [r7, #14]
 8005f16:	4413      	add	r3, r2
 8005f18:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005f1a:	e7dd      	b.n	8005ed8 <u8g2_string_width+0x20>
      break;
 8005f1c:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f993 3060 	ldrsb.w	r3, [r3, #96]	@ 0x60
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d011      	beq.n	8005f4c <u8g2_string_width+0x94>
  {
    w -= dx;
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f993 3060 	ldrsb.w	r3, [r3, #96]	@ 0x60
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	4413      	add	r3, r2
 8005f4a:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a05      	ldr	r2, [pc, #20]	@ (8005f7c <u8g2_GetStrWidth+0x24>)
 8005f66:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff ffa4 	bl	8005eb8 <u8g2_string_width>
 8005f70:	4603      	mov	r3, r0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	080067a5 	.word	0x080067a5

08005f80 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	460b      	mov	r3, r1
 8005f90:	71fb      	strb	r3, [r7, #7]
 8005f92:	4613      	mov	r3, r2
 8005f94:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
 8005f9e:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	781a      	ldrb	r2, [r3, #0]
 8005fa4:	7dbb      	ldrb	r3, [r7, #22]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8005faa:	7dfa      	ldrb	r2, [r7, #23]
 8005fac:	7dbb      	ldrb	r3, [r7, #22]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d90b      	bls.n	8005fca <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8005fb2:	7dfa      	ldrb	r2, [r7, #23]
 8005fb4:	79bb      	ldrb	r3, [r7, #6]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d205      	bcs.n	8005fc6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8005fba:	79bb      	ldrb	r3, [r7, #6]
 8005fbc:	75bb      	strb	r3, [r7, #22]
      b--;
 8005fbe:	7dbb      	ldrb	r3, [r7, #22]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	75bb      	strb	r3, [r7, #22]
 8005fc4:	e001      	b.n	8005fca <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8005fca:	7dfa      	ldrb	r2, [r7, #23]
 8005fcc:	79bb      	ldrb	r3, [r7, #6]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d301      	bcc.n	8005fd6 <u8g2_clip_intersection2+0x56>
    return 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e01c      	b.n	8006010 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8005fd6:	7dba      	ldrb	r2, [r7, #22]
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d801      	bhi.n	8005fe2 <u8g2_clip_intersection2+0x62>
    return 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e016      	b.n	8006010 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8005fe2:	7dfa      	ldrb	r2, [r7, #23]
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d201      	bcs.n	8005fee <u8g2_clip_intersection2+0x6e>
    a = c;
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8005fee:	7dba      	ldrb	r2, [r7, #22]
 8005ff0:	79bb      	ldrb	r3, [r7, #6]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d901      	bls.n	8005ffa <u8g2_clip_intersection2+0x7a>
    b = d;
 8005ff6:	79bb      	ldrb	r3, [r7, #6]
 8005ff8:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	7dfa      	ldrb	r2, [r7, #23]
 8005ffe:	701a      	strb	r2, [r3, #0]
  b -= a;
 8006000:	7dba      	ldrb	r2, [r7, #22]
 8006002:	7dfb      	ldrb	r3, [r7, #23]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	7dba      	ldrb	r2, [r7, #22]
 800600c:	701a      	strb	r2, [r3, #0]
  return 1;
 800600e:	2301      	movs	r3, #1
}
 8006010:	4618      	mov	r0, r3
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b085      	sub	sp, #20
 8006020:	af02      	add	r7, sp, #8
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	461a      	mov	r2, r3
 800602a:	4603      	mov	r3, r0
 800602c:	70fb      	strb	r3, [r7, #3]
 800602e:	460b      	mov	r3, r1
 8006030:	70bb      	strb	r3, [r7, #2]
 8006032:	4613      	mov	r3, r2
 8006034:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800603c:	78ba      	ldrb	r2, [r7, #2]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8006046:	7878      	ldrb	r0, [r7, #1]
 8006048:	78ba      	ldrb	r2, [r7, #2]
 800604a:	78f9      	ldrb	r1, [r7, #3]
 800604c:	7e3b      	ldrb	r3, [r7, #24]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	4603      	mov	r3, r0
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	47a0      	blx	r4
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	bd90      	pop	{r4, r7, pc}

0800605e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800605e:	b590      	push	{r4, r7, lr}
 8006060:	b085      	sub	sp, #20
 8006062:	af02      	add	r7, sp, #8
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	4608      	mov	r0, r1
 8006068:	4611      	mov	r1, r2
 800606a:	461a      	mov	r2, r3
 800606c:	4603      	mov	r3, r0
 800606e:	70fb      	strb	r3, [r7, #3]
 8006070:	460b      	mov	r3, r1
 8006072:	70bb      	strb	r3, [r7, #2]
 8006074:	4613      	mov	r3, r2
 8006076:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800607e:	2b00      	cmp	r3, #0
 8006080:	d06d      	beq.n	800615e <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8006082:	787b      	ldrb	r3, [r7, #1]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d06a      	beq.n	800615e <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8006088:	787b      	ldrb	r3, [r7, #1]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d918      	bls.n	80060c0 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800608e:	7e3b      	ldrb	r3, [r7, #24]
 8006090:	2b02      	cmp	r3, #2
 8006092:	d109      	bne.n	80060a8 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	787b      	ldrb	r3, [r7, #1]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	b2db      	uxtb	r3, r3
 800609c:	70fb      	strb	r3, [r7, #3]
	  x++;
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	3301      	adds	r3, #1
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	70fb      	strb	r3, [r7, #3]
 80060a6:	e00b      	b.n	80060c0 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80060a8:	7e3b      	ldrb	r3, [r7, #24]
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d108      	bne.n	80060c0 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80060ae:	78ba      	ldrb	r2, [r7, #2]
 80060b0:	787b      	ldrb	r3, [r7, #1]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	70bb      	strb	r3, [r7, #2]
	  y++;
 80060b8:	78bb      	ldrb	r3, [r7, #2]
 80060ba:	3301      	adds	r3, #1
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80060c0:	7e3b      	ldrb	r3, [r7, #24]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80060c8:	7e3b      	ldrb	r3, [r7, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d119      	bne.n	8006102 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 80060d4:	78bb      	ldrb	r3, [r7, #2]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d838      	bhi.n	800614c <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80060e0:	78bb      	ldrb	r3, [r7, #2]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d934      	bls.n	8006150 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80060f2:	1c79      	adds	r1, r7, #1
 80060f4:	1cf8      	adds	r0, r7, #3
 80060f6:	f7ff ff43 	bl	8005f80 <u8g2_clip_intersection2>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d119      	bne.n	8006134 <u8g2_DrawHVLine+0xd6>
	  return;
 8006100:	e02d      	b.n	800615e <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	429a      	cmp	r2, r3
 800610c:	d822      	bhi.n	8006154 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	429a      	cmp	r2, r3
 8006118:	d91e      	bls.n	8006158 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006126:	1c79      	adds	r1, r7, #1
 8006128:	1cb8      	adds	r0, r7, #2
 800612a:	f7ff ff29 	bl	8005f80 <u8g2_clip_intersection2>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d013      	beq.n	800615c <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006138:	689c      	ldr	r4, [r3, #8]
 800613a:	78f9      	ldrb	r1, [r7, #3]
 800613c:	78ba      	ldrb	r2, [r7, #2]
 800613e:	7878      	ldrb	r0, [r7, #1]
 8006140:	7e3b      	ldrb	r3, [r7, #24]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	4603      	mov	r3, r0
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	47a0      	blx	r4
 800614a:	e008      	b.n	800615e <u8g2_DrawHVLine+0x100>
	  return;
 800614c:	bf00      	nop
 800614e:	e006      	b.n	800615e <u8g2_DrawHVLine+0x100>
	  return;
 8006150:	bf00      	nop
 8006152:	e004      	b.n	800615e <u8g2_DrawHVLine+0x100>
	  return;
 8006154:	bf00      	nop
 8006156:	e002      	b.n	800615e <u8g2_DrawHVLine+0x100>
	  return;
 8006158:	bf00      	nop
 800615a:	e000      	b.n	800615e <u8g2_DrawHVLine+0x100>
	  return;
 800615c:	bf00      	nop
    }
}
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	bd90      	pop	{r4, r7, pc}

08006164 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af02      	add	r7, sp, #8
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	4608      	mov	r0, r1
 800616e:	4611      	mov	r1, r2
 8006170:	461a      	mov	r2, r3
 8006172:	4603      	mov	r3, r0
 8006174:	70fb      	strb	r3, [r7, #3]
 8006176:	460b      	mov	r3, r1
 8006178:	70bb      	strb	r3, [r7, #2]
 800617a:	4613      	mov	r3, r2
 800617c:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800617e:	787b      	ldrb	r3, [r7, #1]
 8006180:	78ba      	ldrb	r2, [r7, #2]
 8006182:	78f9      	ldrb	r1, [r7, #3]
 8006184:	2000      	movs	r0, #0
 8006186:	9000      	str	r0, [sp, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ff68 	bl	800605e <u8g2_DrawHVLine>
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af02      	add	r7, sp, #8
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	4608      	mov	r0, r1
 80061a0:	4611      	mov	r1, r2
 80061a2:	461a      	mov	r2, r3
 80061a4:	4603      	mov	r3, r0
 80061a6:	70fb      	strb	r3, [r7, #3]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70bb      	strb	r3, [r7, #2]
 80061ac:	4613      	mov	r3, r2
 80061ae:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80061b0:	787b      	ldrb	r3, [r7, #1]
 80061b2:	78ba      	ldrb	r2, [r7, #2]
 80061b4:	78f9      	ldrb	r1, [r7, #3]
 80061b6:	2001      	movs	r0, #1
 80061b8:	9000      	str	r0, [sp, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff ff4f 	bl	800605e <u8g2_DrawHVLine>
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	70fb      	strb	r3, [r7, #3]
 80061d4:	4613      	mov	r3, r2
 80061d6:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80061de:	78ba      	ldrb	r2, [r7, #2]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d31a      	bcc.n	800621a <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80061ea:	78ba      	ldrb	r2, [r7, #2]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d216      	bcs.n	800621e <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d312      	bcc.n	8006222 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006202:	78fa      	ldrb	r2, [r7, #3]
 8006204:	429a      	cmp	r2, r3
 8006206:	d20e      	bcs.n	8006226 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8006208:	78ba      	ldrb	r2, [r7, #2]
 800620a:	78f9      	ldrb	r1, [r7, #3]
 800620c:	2300      	movs	r3, #0
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	2301      	movs	r3, #1
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff ff23 	bl	800605e <u8g2_DrawHVLine>
 8006218:	e006      	b.n	8006228 <u8g2_DrawPixel+0x60>
    return;
 800621a:	bf00      	nop
 800621c:	e004      	b.n	8006228 <u8g2_DrawPixel+0x60>
    return;
 800621e:	bf00      	nop
 8006220:	e002      	b.n	8006228 <u8g2_DrawPixel+0x60>
    return;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <u8g2_DrawPixel+0x60>
    return;
 8006226:	bf00      	nop
}
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	78fa      	ldrb	r2, [r7, #3]
 800623e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
  if ( color >= 3 )
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d903      	bls.n	8006250 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800625c:	b490      	push	{r4, r7}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	4604      	mov	r4, r0
 8006264:	4608      	mov	r0, r1
 8006266:	4611      	mov	r1, r2
 8006268:	461a      	mov	r2, r3
 800626a:	4623      	mov	r3, r4
 800626c:	71fb      	strb	r3, [r7, #7]
 800626e:	4603      	mov	r3, r0
 8006270:	71bb      	strb	r3, [r7, #6]
 8006272:	460b      	mov	r3, r1
 8006274:	717b      	strb	r3, [r7, #5]
 8006276:	4613      	mov	r3, r2
 8006278:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800627a:	797a      	ldrb	r2, [r7, #5]
 800627c:	79bb      	ldrb	r3, [r7, #6]
 800627e:	429a      	cmp	r2, r3
 8006280:	d20d      	bcs.n	800629e <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8006282:	793a      	ldrb	r2, [r7, #4]
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	429a      	cmp	r2, r3
 8006288:	d901      	bls.n	800628e <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800628a:	2301      	movs	r3, #1
 800628c:	e014      	b.n	80062b8 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800628e:	797a      	ldrb	r2, [r7, #5]
 8006290:	793b      	ldrb	r3, [r7, #4]
 8006292:	429a      	cmp	r2, r3
 8006294:	d901      	bls.n	800629a <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8006296:	2301      	movs	r3, #1
 8006298:	e00e      	b.n	80062b8 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800629a:	2300      	movs	r3, #0
 800629c:	e00c      	b.n	80062b8 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800629e:	793a      	ldrb	r2, [r7, #4]
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d907      	bls.n	80062b6 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80062a6:	797a      	ldrb	r2, [r7, #5]
 80062a8:	793b      	ldrb	r3, [r7, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d901      	bls.n	80062b2 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e002      	b.n	80062b8 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e000      	b.n	80062b8 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80062b6:	2300      	movs	r3, #0
    }
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc90      	pop	{r4, r7}
 80062c0:	4770      	bx	lr

080062c2 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	4608      	mov	r0, r1
 80062cc:	4611      	mov	r1, r2
 80062ce:	461a      	mov	r2, r3
 80062d0:	4603      	mov	r3, r0
 80062d2:	70fb      	strb	r3, [r7, #3]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70bb      	strb	r3, [r7, #2]
 80062d8:	4613      	mov	r3, r2
 80062da:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 0047 	ldrb.w	r0, [r3, #71]	@ 0x47
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 1048 	ldrb.w	r1, [r3, #72]	@ 0x48
 80062e8:	7c3b      	ldrb	r3, [r7, #16]
 80062ea:	78ba      	ldrb	r2, [r7, #2]
 80062ec:	f7ff ffb6 	bl	800625c <u8g2_is_intersection_decision_tree>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <u8g2_IsIntersection+0x38>
    return 0; 
 80062f6:	2300      	movs	r3, #0
 80062f8:	e00a      	b.n	8006310 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 0045 	ldrb.w	r0, [r3, #69]	@ 0x45
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 1046 	ldrb.w	r1, [r3, #70]	@ 0x46
 8006306:	787b      	ldrb	r3, [r7, #1]
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	f7ff ffa7 	bl	800625c <u8g2_is_intersection_decision_tree>
 800630e:	4603      	mov	r3, r0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	4608      	mov	r0, r1
 8006322:	4611      	mov	r1, r2
 8006324:	461a      	mov	r2, r3
 8006326:	4603      	mov	r3, r0
 8006328:	70fb      	strb	r3, [r7, #3]
 800632a:	460b      	mov	r3, r1
 800632c:	70bb      	strb	r3, [r7, #2]
 800632e:	4613      	mov	r3, r2
 8006330:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8006332:	78bb      	ldrb	r3, [r7, #2]
 8006334:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8006336:	7cfb      	ldrb	r3, [r7, #19]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800633e:	2301      	movs	r3, #1
 8006340:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8006342:	7c3a      	ldrb	r2, [r7, #16]
 8006344:	7cfb      	ldrb	r3, [r7, #19]
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800635a:	2b01      	cmp	r3, #1
 800635c:	d801      	bhi.n	8006362 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800635e:	7c3b      	ldrb	r3, [r7, #16]
 8006360:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8006368:	2b01      	cmp	r3, #1
 800636a:	d001      	beq.n	8006370 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800636c:	7c3b      	ldrb	r3, [r7, #16]
 800636e:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8006370:	78bb      	ldrb	r3, [r7, #2]
 8006372:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8006374:	89fb      	ldrh	r3, [r7, #14]
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	7c1b      	ldrb	r3, [r3, #16]
 8006382:	461a      	mov	r2, r3
 8006384:	89fb      	ldrh	r3, [r7, #14]
 8006386:	fb13 f302 	smulbb	r3, r3, r2
 800638a:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006390:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8006392:	89fb      	ldrh	r3, [r7, #14]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4413      	add	r3, r2
 8006398:	617b      	str	r3, [r7, #20]
  ptr += x;
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4413      	add	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80063a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d117      	bne.n	80063da <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	7cbb      	ldrb	r3, [r7, #18]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	781a      	ldrb	r2, [r3, #0]
 80063bc:	7c7b      	ldrb	r3, [r7, #17]
 80063be:	4053      	eors	r3, r2
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	701a      	strb	r2, [r3, #0]
	ptr++;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	3301      	adds	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
	len--;
 80063cc:	787b      	ldrb	r3, [r7, #1]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80063d2:	787b      	ldrb	r3, [r7, #1]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e8      	bne.n	80063aa <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80063d8:	e039      	b.n	800644e <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	7cbb      	ldrb	r3, [r7, #18]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	7c7b      	ldrb	r3, [r7, #17]
 80063ee:	4053      	eors	r3, r2
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	3301      	adds	r3, #1
 80063fa:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	74fb      	strb	r3, [r7, #19]
      len--;
 8006404:	787b      	ldrb	r3, [r7, #1]
 8006406:	3b01      	subs	r3, #1
 8006408:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800640a:	7cfb      	ldrb	r3, [r7, #19]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d115      	bne.n	800643c <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006416:	461a      	mov	r2, r3
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	4413      	add	r3, r2
 800641c:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8006424:	2b01      	cmp	r3, #1
 8006426:	d801      	bhi.n	800642c <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8006428:	2301      	movs	r3, #1
 800642a:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8006432:	2b01      	cmp	r3, #1
 8006434:	d008      	beq.n	8006448 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8006436:	2301      	movs	r3, #1
 8006438:	747b      	strb	r3, [r7, #17]
 800643a:	e005      	b.n	8006448 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800643c:	7cbb      	ldrb	r3, [r7, #18]
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8006442:	7c7b      	ldrb	r3, [r7, #17]
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8006448:	787b      	ldrb	r3, [r7, #1]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1c5      	bne.n	80063da <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800644e:	bf00      	nop
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
  u8g2->clip_y0 = 0;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	22ff      	movs	r2, #255	@ 0xff
 8006476:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	22ff      	movs	r2, #255	@ 0xff
 800647e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <u8g2_SetClipWindow>:

void u8g2_SetClipWindow(u8g2_t *u8g2, u8g2_uint_t clip_x0, u8g2_uint_t clip_y0, u8g2_uint_t clip_x1, u8g2_uint_t clip_y1 )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	461a      	mov	r2, r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	70fb      	strb	r3, [r7, #3]
 80064a6:	460b      	mov	r3, r1
 80064a8:	70bb      	strb	r3, [r7, #2]
 80064aa:	4613      	mov	r3, r2
 80064ac:	707b      	strb	r3, [r7, #1]
  u8g2->clip_x0 = clip_x0;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
  u8g2->clip_y0 = clip_y0;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	78ba      	ldrb	r2, [r7, #2]
 80064ba:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  u8g2->clip_x1 = clip_x1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	787a      	ldrb	r2, [r7, #1]
 80064c2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  u8g2->clip_y1 = clip_y1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	7c3a      	ldrb	r2, [r7, #16]
 80064ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  u8g2->cb->update_page_win(u8g2);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	4613      	mov	r3, r2
 80064ee:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	651a      	str	r2, [r3, #80]	@ 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	631a      	str	r2, [r3, #48]	@ 0x30
  
  u8g2->tile_buf_ptr = buf;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	639a      	str	r2, [r3, #56]	@ 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	79fa      	ldrb	r2, [r7, #7]
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  u8g2->tile_curr_row = 0;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
  u8g2->bitmap_transparency = 0;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
  
  u8g2->draw_color = 1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
  u8g2->is_auto_page_clear = 1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
  
  u8g2->cb = u8g2_cb;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->cb->update_dimension(u8g2);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f7ff ff89 	bl	800645a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff fc6d 	bl	8005e28 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
#endif
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006572:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	7bfa      	ldrb	r2, [r7, #15]
 800657e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  
  t = display_info->tile_width;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	7c1b      	ldrb	r3, [r3, #16]
 8006586:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b1f      	cmp	r3, #31
 800658c:	d901      	bls.n	8006592 <u8g2_update_dimension_common+0x34>
    t = 31;
 800658e:	231f      	movs	r3, #31
 8006590:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	7bfa      	ldrb	r2, [r7, #15]
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_curr_row;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a6:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	7bfa      	ldrb	r2, [r7, #15]
 80065b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
  t = u8g2->tile_buf_height;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065bc:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
 80065c6:	4413      	add	r3, r2
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	7c52      	ldrb	r2, [r2, #17]
 80065cc:	4293      	cmp	r3, r2
 80065ce:	dd06      	ble.n	80065de <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	7c5a      	ldrb	r2, [r3, #17]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	4413      	add	r3, r2
 8006606:	b2da      	uxtb	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	22f0      	movs	r2, #240	@ 0xf0
 8006612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  if ( display_info->pixel_width <= 240 )
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	8a9b      	ldrh	r3, [r3, #20]
 800661a:	2bf0      	cmp	r3, #240	@ 0xf0
 800661c:	d805      	bhi.n	800662a <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	8a9b      	ldrh	r3, [r3, #20]
 8006622:	b2da      	uxtb	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  u8g2->height = display_info->pixel_height;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	8adb      	ldrh	r3, [r3, #22]
 800662e:	b2da      	uxtb	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
#endif

}
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af02      	add	r7, sp, #8
 8006648:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 1049 	ldrb.w	r1, [r3, #73]	@ 0x49
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 004a 	ldrb.w	r0, [r3, #74]	@ 0x4a
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	4603      	mov	r3, r0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff fe2b 	bl	80062c2 <u8g2_IsIntersection>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800667a:	e03b      	b.n	80066f4 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006690:	429a      	cmp	r2, r3
 8006692:	d205      	bcs.n	80066a0 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d905      	bls.n	80066bc <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d205      	bcs.n	80066d8 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d905      	bls.n	80066f4 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 80066f4:	bf00      	nop
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff ff2a 	bl	800655e <u8g2_update_dimension_common>
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff ff7b 	bl	8006642 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af02      	add	r7, sp, #8
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	4608      	mov	r0, r1
 800675e:	4611      	mov	r1, r2
 8006760:	461a      	mov	r2, r3
 8006762:	4603      	mov	r3, r0
 8006764:	70fb      	strb	r3, [r7, #3]
 8006766:	460b      	mov	r3, r1
 8006768:	70bb      	strb	r3, [r7, #2]
 800676a:	4613      	mov	r3, r2
 800676c:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800676e:	7878      	ldrb	r0, [r7, #1]
 8006770:	78ba      	ldrb	r2, [r7, #2]
 8006772:	78f9      	ldrb	r1, [r7, #3]
 8006774:	7c3b      	ldrb	r3, [r7, #16]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	4603      	mov	r3, r0
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff fc4e 	bl	800601c <u8g2_draw_hv_line_2dir>
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <u8x8_ascii_next+0x18>
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	2b0a      	cmp	r3, #10
 80067ba:	d102      	bne.n	80067c2 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80067bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067c0:	e001      	b.n	80067c6 <u8x8_ascii_next+0x22>
  return b;
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	b29b      	uxth	r3, r3
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <u8x8_utf8_next+0x18>
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	2b0a      	cmp	r3, #10
 80067e8:	d102      	bne.n	80067f0 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80067ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067ee:	e06e      	b.n	80068ce <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d145      	bne.n	8006886 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	2bfb      	cmp	r3, #251	@ 0xfb
 80067fe:	d908      	bls.n	8006812 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2205      	movs	r2, #5
 8006804:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
      b &= 1;
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	70fb      	strb	r3, [r7, #3]
 8006810:	e032      	b.n	8006878 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	2bf7      	cmp	r3, #247	@ 0xf7
 8006816:	d908      	bls.n	800682a <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2204      	movs	r2, #4
 800681c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
      b &= 3;
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	70fb      	strb	r3, [r7, #3]
 8006828:	e026      	b.n	8006878 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	2bef      	cmp	r3, #239	@ 0xef
 800682e:	d908      	bls.n	8006842 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2203      	movs	r2, #3
 8006834:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
      b &= 7;      
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	70fb      	strb	r3, [r7, #3]
 8006840:	e01a      	b.n	8006878 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	2bdf      	cmp	r3, #223	@ 0xdf
 8006846:	d908      	bls.n	800685a <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
      b &= 15;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	70fb      	strb	r3, [r7, #3]
 8006858:	e00e      	b.n	8006878 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	2bbf      	cmp	r3, #191	@ 0xbf
 800685e:	d908      	bls.n	8006872 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
      b &= 0x01f;
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	f003 031f 	and.w	r3, r3, #31
 800686e:	70fb      	strb	r3, [r7, #3]
 8006870:	e002      	b.n	8006878 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	b29b      	uxth	r3, r3
 8006876:	e02a      	b.n	80068ce <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	b29a      	uxth	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8006880:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006884:	e023      	b.n	80068ce <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800688c:	3b01      	subs	r3, #1
 800688e:	b2da      	uxtb	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8c1b      	ldrh	r3, [r3, #32]
 800689a:	019b      	lsls	r3, r3, #6
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068a8:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	8c1a      	ldrh	r2, [r3, #32]
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80068c4:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80068c8:	e001      	b.n	80068ce <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8c1b      	ldrh	r3, [r3, #32]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80068da:	b590      	push	{r4, r7, lr}
 80068dc:	b085      	sub	sp, #20
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	460b      	mov	r3, r1
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	691c      	ldr	r4, [r3, #16]
 80068ec:	7afa      	ldrb	r2, [r7, #11]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2117      	movs	r1, #23
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	47a0      	blx	r4
 80068f6:	4603      	mov	r3, r0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd90      	pop	{r4, r7, pc}

08006900 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800690c:	1cfb      	adds	r3, r7, #3
 800690e:	461a      	mov	r2, r3
 8006910:	2101      	movs	r1, #1
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff ffe1 	bl	80068da <u8x8_byte_SendBytes>
 8006918:	4603      	mov	r3, r0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8006922:	b590      	push	{r4, r7, lr}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691c      	ldr	r4, [r3, #16]
 800692e:	2300      	movs	r3, #0
 8006930:	2200      	movs	r2, #0
 8006932:	2118      	movs	r1, #24
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	47a0      	blx	r4
 8006938:	4603      	mov	r3, r0
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bd90      	pop	{r4, r7, pc}

08006942 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8006942:	b590      	push	{r4, r7, lr}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691c      	ldr	r4, [r3, #16]
 800694e:	2300      	movs	r3, #0
 8006950:	2200      	movs	r2, #0
 8006952:	2119      	movs	r1, #25
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	47a0      	blx	r4
 8006958:	4603      	mov	r3, r0
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	bd90      	pop	{r4, r7, pc}

08006962 <i2c_delay>:
  ignores ACK response (which is anyway not provided by some displays)
  also does not allow reading from the device
*/
static void i2c_delay(u8x8_t *u8x8) U8X8_NOINLINE;
static void i2c_delay(u8x8_t *u8x8)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  //u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_10MICRO, u8x8->display_info->i2c_bus_clock_100kHz);
  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_I2C, u8x8->display_info->i2c_bus_clock_100kHz);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	7b5b      	ldrb	r3, [r3, #13]
 8006970:	461a      	mov	r2, r3
 8006972:	212d      	movs	r1, #45	@ 0x2d
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fc44 	bl	8007202 <u8x8_gpio_call>
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <i2c_init>:

static void i2c_init(u8x8_t *u8x8)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  u8x8_gpio_SetI2CClock(u8x8, 1);
 800698a:	2201      	movs	r2, #1
 800698c:	214c      	movs	r1, #76	@ 0x4c
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fc37 	bl	8007202 <u8x8_gpio_call>
  u8x8_gpio_SetI2CData(u8x8, 1);
 8006994:	2201      	movs	r2, #1
 8006996:	214d      	movs	r1, #77	@ 0x4d
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fc32 	bl	8007202 <u8x8_gpio_call>
  
  i2c_delay(u8x8);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff ffdf 	bl	8006962 <i2c_delay>
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <i2c_read_scl_and_delay>:

/* actually, the scl line is not observed, so this procedure does not return a value */

static void i2c_read_scl_and_delay(u8x8_t *u8x8)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CClock(u8x8, 1);
 80069b4:	2201      	movs	r2, #1
 80069b6:	214c      	movs	r1, #76	@ 0x4c
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fc22 	bl	8007202 <u8x8_gpio_call>

  i2c_delay(u8x8);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff ffcf 	bl	8006962 <i2c_delay>
}
 80069c4:	bf00      	nop
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <i2c_clear_scl>:

static void i2c_clear_scl(u8x8_t *u8x8)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  u8x8_gpio_SetI2CClock(u8x8, 0);
 80069d4:	2200      	movs	r2, #0
 80069d6:	214c      	movs	r1, #76	@ 0x4c
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fc12 	bl	8007202 <u8x8_gpio_call>
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <i2c_read_sda>:

static void i2c_read_sda(u8x8_t *u8x8)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CData(u8x8, 1);
 80069ee:	2201      	movs	r2, #1
 80069f0:	214d      	movs	r1, #77	@ 0x4d
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fc05 	bl	8007202 <u8x8_gpio_call>
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <i2c_clear_sda>:

static void i2c_clear_sda(u8x8_t *u8x8)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* set open collector and drive low */
  u8x8_gpio_SetI2CData(u8x8, 0);
 8006a08:	2200      	movs	r2, #0
 8006a0a:	214d      	movs	r1, #77	@ 0x4d
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fbf8 	bl	8007202 <u8x8_gpio_call>
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <i2c_start>:

static void i2c_start(u8x8_t *u8x8)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  if ( u8x8->i2c_started != 0 )
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <i2c_start+0x24>
  {
    /* if already started: do restart */
    i2c_read_sda(u8x8);     /* SDA = 1 */
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ffda 	bl	80069e6 <i2c_read_sda>
    i2c_delay(u8x8);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff ff95 	bl	8006962 <i2c_delay>
    i2c_read_scl_and_delay(u8x8);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff ffb7 	bl	80069ac <i2c_read_scl_and_delay>
  }
  i2c_read_sda(u8x8);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ffd1 	bl	80069e6 <i2c_read_sda>
  /* send the start condition, both lines go from 1 to 0 */
  i2c_clear_sda(u8x8);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff ffdb 	bl	8006a00 <i2c_clear_sda>
  i2c_delay(u8x8);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ff89 	bl	8006962 <i2c_delay>
  i2c_clear_scl(u8x8);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff ffbb 	bl	80069cc <i2c_clear_scl>
  u8x8->i2c_started = 1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8006a5e:	bf00      	nop
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <i2c_stop>:


static void i2c_stop(u8x8_t *u8x8)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* set SDA to 0 */
  i2c_clear_sda(u8x8);  
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff ffc6 	bl	8006a00 <i2c_clear_sda>
  i2c_delay(u8x8);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff ff74 	bl	8006962 <i2c_delay>
 
  /* now release all lines */
  i2c_read_scl_and_delay(u8x8);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff ff96 	bl	80069ac <i2c_read_scl_and_delay>
 
  /* set SDA to 1 */
  i2c_read_sda(u8x8);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff ffb0 	bl	80069e6 <i2c_read_sda>
  i2c_delay(u8x8);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff ff6b 	bl	8006962 <i2c_delay>
  u8x8->i2c_started = 0;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <i2c_write_bit>:

static void i2c_write_bit(u8x8_t *u8x8, uint8_t val)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70fb      	strb	r3, [r7, #3]
  if (val)
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <i2c_write_bit+0x1a>
    i2c_read_sda(u8x8);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff ff99 	bl	80069e6 <i2c_read_sda>
 8006ab4:	e002      	b.n	8006abc <i2c_write_bit+0x20>
  else
    i2c_clear_sda(u8x8);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff ffa2 	bl	8006a00 <i2c_clear_sda>
 
  i2c_delay(u8x8);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff ff50 	bl	8006962 <i2c_delay>
  i2c_read_scl_and_delay(u8x8);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff ff72 	bl	80069ac <i2c_read_scl_and_delay>
  i2c_clear_scl(u8x8);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff ff7f 	bl	80069cc <i2c_clear_scl>
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <i2c_read_bit>:

static void i2c_read_bit(u8x8_t *u8x8)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  //uint8_t val;
  /* do not drive SDA */
  i2c_read_sda(u8x8);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff ff81 	bl	80069e6 <i2c_read_sda>
  i2c_delay(u8x8);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff ff3c 	bl	8006962 <i2c_delay>
  i2c_read_scl_and_delay(u8x8);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff ff5e 	bl	80069ac <i2c_read_scl_and_delay>
  i2c_read_sda(u8x8);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ff78 	bl	80069e6 <i2c_read_sda>
  i2c_delay(u8x8);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff ff33 	bl	8006962 <i2c_delay>
  i2c_clear_scl(u8x8);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff ff65 	bl	80069cc <i2c_clear_scl>
  //return val;
}
 8006b02:	bf00      	nop
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <i2c_write_byte>:

static void i2c_write_byte(u8x8_t *u8x8, uint8_t b)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  i2c_write_bit(u8x8, b & 128);
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff ffbb 	bl	8006a9c <i2c_write_bit>
  i2c_write_bit(u8x8, b & 64);
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff ffb3 	bl	8006a9c <i2c_write_bit>
  i2c_write_bit(u8x8, b & 32);
 8006b36:	78fb      	ldrb	r3, [r7, #3]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff ffab 	bl	8006a9c <i2c_write_bit>
  i2c_write_bit(u8x8, b & 16);
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff ffa3 	bl	8006a9c <i2c_write_bit>
  i2c_write_bit(u8x8, b & 8);
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	f003 0308 	and.w	r3, r3, #8
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff ff9b 	bl	8006a9c <i2c_write_bit>
  i2c_write_bit(u8x8, b & 4);
 8006b66:	78fb      	ldrb	r3, [r7, #3]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff ff93 	bl	8006a9c <i2c_write_bit>
  i2c_write_bit(u8x8, b & 2);
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff ff8b 	bl	8006a9c <i2c_write_bit>
  i2c_write_bit(u8x8, b & 1);
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff ff83 	bl	8006a9c <i2c_write_bit>
    
  /* read ack from client */
  /* 0: ack was given by client */
  /* 1: nothing happend during ack cycle */  
  i2c_read_bit(u8x8);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff ff9d 	bl	8006ad6 <i2c_read_bit>
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <u8x8_byte_sw_i2c>:

uint8_t u8x8_byte_sw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	607b      	str	r3, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	72fb      	strb	r3, [r7, #11]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	72bb      	strb	r3, [r7, #10]
  uint8_t *data;

  switch(msg)
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	3b14      	subs	r3, #20
 8006bba:	2b0c      	cmp	r3, #12
 8006bbc:	d842      	bhi.n	8006c44 <u8x8_byte_sw_i2c+0xa0>
 8006bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc4 <u8x8_byte_sw_i2c+0x20>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006c1f 	.word	0x08006c1f
 8006bc8:	08006c45 	.word	0x08006c45
 8006bcc:	08006c45 	.word	0x08006c45
 8006bd0:	08006bf9 	.word	0x08006bf9
 8006bd4:	08006c27 	.word	0x08006c27
 8006bd8:	08006c3d 	.word	0x08006c3d
 8006bdc:	08006c45 	.word	0x08006c45
 8006be0:	08006c45 	.word	0x08006c45
 8006be4:	08006c45 	.word	0x08006c45
 8006be8:	08006c45 	.word	0x08006c45
 8006bec:	08006c45 	.word	0x08006c45
 8006bf0:	08006c45 	.word	0x08006c45
 8006bf4:	08006c49 	.word	0x08006c49
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	617b      	str	r3, [r7, #20]
    
      while( arg_int > 0 )
 8006bfc:	e00b      	b.n	8006c16 <u8x8_byte_sw_i2c+0x72>
      {
	i2c_write_byte(u8x8, *data);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	4619      	mov	r1, r3
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff ff80 	bl	8006b0a <i2c_write_byte>
	data++;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	617b      	str	r3, [r7, #20]
	arg_int--;
 8006c10:	7abb      	ldrb	r3, [r7, #10]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8006c16:	7abb      	ldrb	r3, [r7, #10]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f0      	bne.n	8006bfe <u8x8_byte_sw_i2c+0x5a>
      }
      
      break;
 8006c1c:	e015      	b.n	8006c4a <u8x8_byte_sw_i2c+0xa6>
      
    case U8X8_MSG_BYTE_INIT:
      i2c_init(u8x8);
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff feaf 	bl	8006982 <i2c_init>
      break;
 8006c24:	e011      	b.n	8006c4a <u8x8_byte_sw_i2c+0xa6>
    case U8X8_MSG_BYTE_SET_DC:
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      i2c_start(u8x8);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fef7 	bl	8006a1a <i2c_start>
      i2c_write_byte(u8x8, u8x8_GetI2CAddress(u8x8));
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c32:	4619      	mov	r1, r3
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f7ff ff68 	bl	8006b0a <i2c_write_byte>
      //i2c_write_byte(u8x8, 0x078);
      break;
 8006c3a:	e006      	b.n	8006c4a <u8x8_byte_sw_i2c+0xa6>
    case U8X8_MSG_BYTE_END_TRANSFER:
      i2c_stop(u8x8);
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff ff12 	bl	8006a66 <i2c_stop>
      break;
 8006c42:	e002      	b.n	8006c4a <u8x8_byte_sw_i2c+0xa6>
    default:
      return 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e001      	b.n	8006c4c <u8x8_byte_sw_i2c+0xa8>
      break;
 8006c48:	bf00      	nop
  }
  return 1;
 8006c4a:	2301      	movs	r3, #1
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8006c54:	b590      	push	{r4, r7, lr}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68dc      	ldr	r4, [r3, #12]
 8006c64:	78fa      	ldrb	r2, [r7, #3]
 8006c66:	2300      	movs	r3, #0
 8006c68:	2115      	movs	r1, #21
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	47a0      	blx	r4
 8006c6e:	4603      	mov	r3, r0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd90      	pop	{r4, r7, pc}

08006c78 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8006c78:	b590      	push	{r4, r7, lr}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68dc      	ldr	r4, [r3, #12]
 8006c88:	78fa      	ldrb	r2, [r7, #3]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2116      	movs	r1, #22
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	47a0      	blx	r4
 8006c92:	4603      	mov	r3, r0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd90      	pop	{r4, r7, pc}

08006c9c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006c9c:	b590      	push	{r4, r7, lr}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68dc      	ldr	r4, [r3, #12]
 8006cae:	7afa      	ldrb	r2, [r7, #11]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2117      	movs	r1, #23
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	47a0      	blx	r4
 8006cb8:	4603      	mov	r3, r0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd90      	pop	{r4, r7, pc}

08006cc2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8006cc2:	b590      	push	{r4, r7, lr}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68dc      	ldr	r4, [r3, #12]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2118      	movs	r1, #24
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	47a0      	blx	r4
 8006cd8:	4603      	mov	r3, r0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd90      	pop	{r4, r7, pc}

08006ce2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8006ce2:	b590      	push	{r4, r7, lr}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68dc      	ldr	r4, [r3, #12]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2119      	movs	r1, #25
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	47a0      	blx	r4
 8006cf8:	4603      	mov	r3, r0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd90      	pop	{r4, r7, pc}

08006d02 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8006d02:	b590      	push	{r4, r7, lr}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	73fb      	strb	r3, [r7, #15]
    data++;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2bfe      	cmp	r3, #254	@ 0xfe
 8006d1c:	d031      	beq.n	8006d82 <u8x8_cad_SendSequence+0x80>
 8006d1e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006d20:	dc3d      	bgt.n	8006d9e <u8x8_cad_SendSequence+0x9c>
 8006d22:	2b19      	cmp	r3, #25
 8006d24:	dc3b      	bgt.n	8006d9e <u8x8_cad_SendSequence+0x9c>
 8006d26:	2b18      	cmp	r3, #24
 8006d28:	da23      	bge.n	8006d72 <u8x8_cad_SendSequence+0x70>
 8006d2a:	2b16      	cmp	r3, #22
 8006d2c:	dc02      	bgt.n	8006d34 <u8x8_cad_SendSequence+0x32>
 8006d2e:	2b15      	cmp	r3, #21
 8006d30:	da03      	bge.n	8006d3a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8006d32:	e034      	b.n	8006d9e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8006d34:	2b17      	cmp	r3, #23
 8006d36:	d00e      	beq.n	8006d56 <u8x8_cad_SendSequence+0x54>
	return;
 8006d38:	e031      	b.n	8006d9e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68dc      	ldr	r4, [r3, #12]
 8006d44:	7bba      	ldrb	r2, [r7, #14]
 8006d46:	7bf9      	ldrb	r1, [r7, #15]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	47a0      	blx	r4
	  data++;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	603b      	str	r3, [r7, #0]
	  break;
 8006d54:	e022      	b.n	8006d9c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8006d5c:	f107 030e 	add.w	r3, r7, #14
 8006d60:	461a      	mov	r2, r3
 8006d62:	2101      	movs	r1, #1
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ff99 	bl	8006c9c <u8x8_cad_SendData>
	  data++;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	603b      	str	r3, [r7, #0]
	  break;
 8006d70:	e014      	b.n	8006d9c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68dc      	ldr	r4, [r3, #12]
 8006d76:	7bf9      	ldrb	r1, [r7, #15]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	47a0      	blx	r4
	  break;
 8006d80:	e00c      	b.n	8006d9c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	2129      	movs	r1, #41	@ 0x29
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa37 	bl	8007202 <u8x8_gpio_call>
	  data++;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	3301      	adds	r3, #1
 8006d98:	603b      	str	r3, [r7, #0]
	  break;
 8006d9a:	bf00      	nop
    cmd = *data;
 8006d9c:	e7b6      	b.n	8006d0c <u8x8_cad_SendSequence+0xa>
	return;
 8006d9e:	bf00      	nop
    }
  }
}
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd90      	pop	{r4, r7, pc}

08006da6 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8006da6:	b590      	push	{r4, r7, lr}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	460b      	mov	r3, r1
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff fdb4 	bl	8006922 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8006dba:	2140      	movs	r1, #64	@ 0x40
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff fd9f 	bl	8006900 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	691c      	ldr	r4, [r3, #16]
 8006dc6:	7afa      	ldrb	r2, [r7, #11]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2117      	movs	r1, #23
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff fdb6 	bl	8006942 <u8x8_byte_EndTransfer>
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd90      	pop	{r4, r7, pc}
	...

08006de0 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006de0:	b590      	push	{r4, r7, lr}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	72fb      	strb	r3, [r7, #11]
 8006dee:	4613      	mov	r3, r2
 8006df0:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	3b14      	subs	r3, #20
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	d86e      	bhi.n	8006ed8 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8006dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006e00 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e97 	.word	0x08006e97
 8006e04:	08006e19 	.word	0x08006e19
 8006e08:	08006e47 	.word	0x08006e47
 8006e0c:	08006e53 	.word	0x08006e53
 8006e10:	08006ebb 	.word	0x08006ebb
 8006e14:	08006ec3 	.word	0x08006ec3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8006e18:	4b33      	ldr	r3, [pc, #204]	@ (8006ee8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff fd8e 	bl	8006942 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff fd7b 	bl	8006922 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff fd66 	bl	8006900 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8006e34:	7abb      	ldrb	r3, [r7, #10]
 8006e36:	4619      	mov	r1, r3
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff fd61 	bl	8006900 <u8x8_byte_SendByte>
      in_transfer = 1;
 8006e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8006e44:	e04a      	b.n	8006edc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8006e46:	7abb      	ldrb	r3, [r7, #10]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7ff fd58 	bl	8006900 <u8x8_byte_SendByte>
      break;      
 8006e50:	e044      	b.n	8006edc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8006e52:	4b25      	ldr	r3, [pc, #148]	@ (8006ee8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff fd71 	bl	8006942 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8006e64:	e00a      	b.n	8006e7c <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	2118      	movs	r1, #24
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff ff9b 	bl	8006da6 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8006e70:	7abb      	ldrb	r3, [r7, #10]
 8006e72:	3b18      	subs	r3, #24
 8006e74:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	3318      	adds	r3, #24
 8006e7a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8006e7c:	7abb      	ldrb	r3, [r7, #10]
 8006e7e:	2b18      	cmp	r3, #24
 8006e80:	d8f1      	bhi.n	8006e66 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8006e82:	7abb      	ldrb	r3, [r7, #10]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4619      	mov	r1, r3
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff ff8c 	bl	8006da6 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8006e8e:	4b16      	ldr	r3, [pc, #88]	@ (8006ee8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	701a      	strb	r2, [r3, #0]
      break;
 8006e94:	e022      	b.n	8006edc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e9c:	2bff      	cmp	r3, #255	@ 0xff
 8006e9e:	d103      	bne.n	8006ea8 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2278      	movs	r2, #120	@ 0x78
 8006ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	691c      	ldr	r4, [r3, #16]
 8006eac:	7aba      	ldrb	r2, [r7, #10]
 8006eae:	7af9      	ldrb	r1, [r7, #11]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	47a0      	blx	r4
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	e011      	b.n	8006ede <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8006eba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
      break;
 8006ec0:	e00c      	b.n	8006edc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8006ec2:	4b09      	ldr	r3, [pc, #36]	@ (8006ee8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff fd39 	bl	8006942 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8006ed0:	4b05      	ldr	r3, [pc, #20]	@ (8006ee8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	701a      	strb	r2, [r3, #0]
      break;
 8006ed6:	e001      	b.n	8006edc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e000      	b.n	8006ede <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8006edc:	2301      	movs	r3, #1
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd90      	pop	{r4, r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000b78 	.word	0x20000b78

08006eec <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	607b      	str	r3, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	72fb      	strb	r3, [r7, #11]
 8006efa:	4613      	mov	r3, r2
 8006efc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	3b0b      	subs	r3, #11
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	f200 808a 	bhi.w	800701c <u8x8_d_ssd1306_sh1106_generic+0x130>
 8006f08:	a201      	add	r2, pc, #4	@ (adr r2, 8006f10 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f25 	.word	0x08006f25
 8006f14:	0800701d 	.word	0x0800701d
 8006f18:	08006f3f 	.word	0x08006f3f
 8006f1c:	08006f71 	.word	0x08006f71
 8006f20:	08006f91 	.word	0x08006f91
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8006f24:	7abb      	ldrb	r3, [r7, #10]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8006f2a:	4940      	ldr	r1, [pc, #256]	@ (800702c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff fee8 	bl	8006d02 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8006f32:	e075      	b.n	8007020 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8006f34:	493e      	ldr	r1, [pc, #248]	@ (8007030 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f7ff fee3 	bl	8006d02 <u8x8_cad_SendSequence>
      break;
 8006f3c:	e070      	b.n	8007020 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8006f3e:	7abb      	ldrb	r3, [r7, #10]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8006f44:	493b      	ldr	r1, [pc, #236]	@ (8007034 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f7ff fedb 	bl	8006d02 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	7c9a      	ldrb	r2, [r3, #18]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8006f58:	e062      	b.n	8007020 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8006f5a:	4937      	ldr	r1, [pc, #220]	@ (8007038 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7ff fed0 	bl	8006d02 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	7cda      	ldrb	r2, [r3, #19]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8006f6e:	e057      	b.n	8007020 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f7ff fea6 	bl	8006cc2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8006f76:	2181      	movs	r1, #129	@ 0x81
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7ff fe6b 	bl	8006c54 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8006f7e:	7abb      	ldrb	r3, [r7, #10]
 8006f80:	4619      	mov	r1, r3
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f7ff fe78 	bl	8006c78 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7ff feaa 	bl	8006ce2 <u8x8_cad_EndTransfer>
      break;
 8006f8e:	e047      	b.n	8007020 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fe96 	bl	8006cc2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	795b      	ldrb	r3, [r3, #5]
 8006f9a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	4413      	add	r3, r2
 8006fac:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8006fae:	2140      	movs	r1, #64	@ 0x40
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fe4f 	bl	8006c54 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	091b      	lsrs	r3, r3, #4
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	f043 0310 	orr.w	r3, r3, #16
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff fe45 	bl	8006c54 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff fe4f 	bl	8006c78 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	799b      	ldrb	r3, [r3, #6]
 8006fde:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff fe46 	bl	8006c78 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	791b      	ldrb	r3, [r3, #4]
 8006ff0:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8006ff8:	7dbb      	ldrb	r3, [r7, #22]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4619      	mov	r1, r3
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7ff fe4a 	bl	8006c9c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8007008:	7abb      	ldrb	r3, [r7, #10]
 800700a:	3b01      	subs	r3, #1
 800700c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800700e:	7abb      	ldrb	r3, [r7, #10]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1eb      	bne.n	8006fec <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff fe64 	bl	8006ce2 <u8x8_cad_EndTransfer>
      break;
 800701a:	e001      	b.n	8007020 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800701c:	2300      	movs	r3, #0
 800701e:	e000      	b.n	8007022 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8007020:	2301      	movs	r3, #1
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	0800a930 	.word	0x0800a930
 8007030:	0800a938 	.word	0x0800a938
 8007034:	0800a940 	.word	0x0800a940
 8007038:	0800a948 	.word	0x0800a948

0800703c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	607b      	str	r3, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	72fb      	strb	r3, [r7, #11]
 800704a:	4613      	mov	r3, r2
 800704c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800704e:	7aba      	ldrb	r2, [r7, #10]
 8007050:	7af9      	ldrb	r1, [r7, #11]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f7ff ff49 	bl	8006eec <u8x8_d_ssd1306_sh1106_generic>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8007060:	2301      	movs	r3, #1
 8007062:	e014      	b.n	800708e <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8007064:	7afb      	ldrb	r3, [r7, #11]
 8007066:	2b09      	cmp	r3, #9
 8007068:	d009      	beq.n	800707e <u8x8_d_ssd1306_128x64_noname+0x42>
 800706a:	2b0a      	cmp	r3, #10
 800706c:	d10c      	bne.n	8007088 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f82a 	bl	80070c8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8007074:	4908      	ldr	r1, [pc, #32]	@ (8007098 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff fe43 	bl	8006d02 <u8x8_cad_SendSequence>
      break;
 800707c:	e006      	b.n	800708c <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800707e:	4907      	ldr	r1, [pc, #28]	@ (800709c <u8x8_d_ssd1306_128x64_noname+0x60>)
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f80d 	bl	80070a0 <u8x8_d_helper_display_setup_memory>
      break;
 8007086:	e001      	b.n	800708c <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8007088:	2300      	movs	r3, #0
 800708a:	e000      	b.n	800708e <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800708c:	2301      	movs	r3, #1
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	0800a8f8 	.word	0x0800a8f8
 800709c:	0800a950 	.word	0x0800a950

080070a0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	7c9a      	ldrb	r2, [r3, #18]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80070c8:	b590      	push	{r4, r7, lr}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	695c      	ldr	r4, [r3, #20]
 80070d4:	2300      	movs	r3, #0
 80070d6:	2200      	movs	r2, #0
 80070d8:	2128      	movs	r1, #40	@ 0x28
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68dc      	ldr	r4, [r3, #12]
 80070e2:	2300      	movs	r3, #0
 80070e4:	2200      	movs	r2, #0
 80070e6:	2114      	movs	r1, #20
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80070ec:	2201      	movs	r2, #1
 80070ee:	214b      	movs	r1, #75	@ 0x4b
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f886 	bl	8007202 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	791b      	ldrb	r3, [r3, #4]
 80070fc:	461a      	mov	r2, r3
 80070fe:	2129      	movs	r1, #41	@ 0x29
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f87e 	bl	8007202 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8007106:	2200      	movs	r2, #0
 8007108:	214b      	movs	r1, #75	@ 0x4b
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f879 	bl	8007202 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	791b      	ldrb	r3, [r3, #4]
 8007116:	461a      	mov	r2, r3
 8007118:	2129      	movs	r1, #41	@ 0x29
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f871 	bl	8007202 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8007120:	2201      	movs	r2, #1
 8007122:	214b      	movs	r1, #75	@ 0x4b
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f86c 	bl	8007202 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	795b      	ldrb	r3, [r3, #5]
 8007130:	461a      	mov	r2, r3
 8007132:	2129      	movs	r1, #41	@ 0x29
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f864 	bl	8007202 <u8x8_gpio_call>
}    
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	bd90      	pop	{r4, r7, pc}

08007142 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8007142:	b590      	push	{r4, r7, lr}
 8007144:	b085      	sub	sp, #20
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	4608      	mov	r0, r1
 800714c:	4611      	mov	r1, r2
 800714e:	461a      	mov	r2, r3
 8007150:	4603      	mov	r3, r0
 8007152:	70fb      	strb	r3, [r7, #3]
 8007154:	460b      	mov	r3, r1
 8007156:	70bb      	strb	r3, [r7, #2]
 8007158:	4613      	mov	r3, r2
 800715a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8007160:	78bb      	ldrb	r3, [r7, #2]
 8007162:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8007164:	787b      	ldrb	r3, [r7, #1]
 8007166:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689c      	ldr	r4, [r3, #8]
 8007170:	f107 0308 	add.w	r3, r7, #8
 8007174:	2201      	movs	r2, #1
 8007176:	210f      	movs	r1, #15
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	47a0      	blx	r4
 800717c:	4603      	mov	r3, r0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	bd90      	pop	{r4, r7, pc}

08007186 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8007186:	b590      	push	{r4, r7, lr}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689c      	ldr	r4, [r3, #8]
 8007192:	2300      	movs	r3, #0
 8007194:	2200      	movs	r2, #0
 8007196:	2109      	movs	r1, #9
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	47a0      	blx	r4
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd90      	pop	{r4, r7, pc}

080071a4 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80071a4:	b590      	push	{r4, r7, lr}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689c      	ldr	r4, [r3, #8]
 80071b0:	2300      	movs	r3, #0
 80071b2:	2200      	movs	r2, #0
 80071b4:	210a      	movs	r1, #10
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	47a0      	blx	r4
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd90      	pop	{r4, r7, pc}

080071c2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80071c2:	b590      	push	{r4, r7, lr}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689c      	ldr	r4, [r3, #8]
 80071d2:	78fa      	ldrb	r2, [r7, #3]
 80071d4:	2300      	movs	r3, #0
 80071d6:	210b      	movs	r1, #11
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	47a0      	blx	r4
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd90      	pop	{r4, r7, pc}

080071e4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80071e4:	b590      	push	{r4, r7, lr}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689c      	ldr	r4, [r3, #8]
 80071f0:	2300      	movs	r3, #0
 80071f2:	2200      	movs	r2, #0
 80071f4:	2110      	movs	r1, #16
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	47a0      	blx	r4
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd90      	pop	{r4, r7, pc}

08007202 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8007202:	b590      	push	{r4, r7, lr}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	460b      	mov	r3, r1
 800720c:	70fb      	strb	r3, [r7, #3]
 800720e:	4613      	mov	r3, r2
 8007210:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695c      	ldr	r4, [r3, #20]
 8007216:	78ba      	ldrb	r2, [r7, #2]
 8007218:	78f9      	ldrb	r1, [r7, #3]
 800721a:	2300      	movs	r3, #0
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	47a0      	blx	r4
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	bd90      	pop	{r4, r7, pc}

08007228 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	607b      	str	r3, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	72fb      	strb	r3, [r7, #11]
 8007236:	4613      	mov	r3, r2
 8007238:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a13      	ldr	r2, [pc, #76]	@ (80072a8 <u8x8_SetupDefaults+0x60>)
 800725a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a12      	ldr	r2, [pc, #72]	@ (80072a8 <u8x8_SetupDefaults+0x60>)
 8007260:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a10      	ldr	r2, [pc, #64]	@ (80072a8 <u8x8_SetupDefaults+0x60>)
 8007266:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a0f      	ldr	r2, [pc, #60]	@ (80072a8 <u8x8_SetupDefaults+0x60>)
 800726c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    u8x8->device_address = 0;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	22ff      	movs	r2, #255	@ 0xff
 8007290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	22ff      	movs	r2, #255	@ 0xff
 8007298:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	08007229 	.word	0x08007229

080072ac <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7ff ffc4 	bl	8007248 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7ff ff54 	bl	8007186 <u8x8_SetupMemory>
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <__assert_func>:
 80072e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072ea:	4614      	mov	r4, r2
 80072ec:	461a      	mov	r2, r3
 80072ee:	4b09      	ldr	r3, [pc, #36]	@ (8007314 <__assert_func+0x2c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4605      	mov	r5, r0
 80072f4:	68d8      	ldr	r0, [r3, #12]
 80072f6:	b954      	cbnz	r4, 800730e <__assert_func+0x26>
 80072f8:	4b07      	ldr	r3, [pc, #28]	@ (8007318 <__assert_func+0x30>)
 80072fa:	461c      	mov	r4, r3
 80072fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007300:	9100      	str	r1, [sp, #0]
 8007302:	462b      	mov	r3, r5
 8007304:	4905      	ldr	r1, [pc, #20]	@ (800731c <__assert_func+0x34>)
 8007306:	f000 f967 	bl	80075d8 <fiprintf>
 800730a:	f000 fa96 	bl	800783a <abort>
 800730e:	4b04      	ldr	r3, [pc, #16]	@ (8007320 <__assert_func+0x38>)
 8007310:	e7f4      	b.n	80072fc <__assert_func+0x14>
 8007312:	bf00      	nop
 8007314:	20000018 	.word	0x20000018
 8007318:	0800a9a3 	.word	0x0800a9a3
 800731c:	0800a975 	.word	0x0800a975
 8007320:	0800a968 	.word	0x0800a968

08007324 <malloc>:
 8007324:	4b02      	ldr	r3, [pc, #8]	@ (8007330 <malloc+0xc>)
 8007326:	4601      	mov	r1, r0
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	f000 b825 	b.w	8007378 <_malloc_r>
 800732e:	bf00      	nop
 8007330:	20000018 	.word	0x20000018

08007334 <sbrk_aligned>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4e0f      	ldr	r6, [pc, #60]	@ (8007374 <sbrk_aligned+0x40>)
 8007338:	460c      	mov	r4, r1
 800733a:	6831      	ldr	r1, [r6, #0]
 800733c:	4605      	mov	r5, r0
 800733e:	b911      	cbnz	r1, 8007346 <sbrk_aligned+0x12>
 8007340:	f000 fa1e 	bl	8007780 <_sbrk_r>
 8007344:	6030      	str	r0, [r6, #0]
 8007346:	4621      	mov	r1, r4
 8007348:	4628      	mov	r0, r5
 800734a:	f000 fa19 	bl	8007780 <_sbrk_r>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	d103      	bne.n	800735a <sbrk_aligned+0x26>
 8007352:	f04f 34ff 	mov.w	r4, #4294967295
 8007356:	4620      	mov	r0, r4
 8007358:	bd70      	pop	{r4, r5, r6, pc}
 800735a:	1cc4      	adds	r4, r0, #3
 800735c:	f024 0403 	bic.w	r4, r4, #3
 8007360:	42a0      	cmp	r0, r4
 8007362:	d0f8      	beq.n	8007356 <sbrk_aligned+0x22>
 8007364:	1a21      	subs	r1, r4, r0
 8007366:	4628      	mov	r0, r5
 8007368:	f000 fa0a 	bl	8007780 <_sbrk_r>
 800736c:	3001      	adds	r0, #1
 800736e:	d1f2      	bne.n	8007356 <sbrk_aligned+0x22>
 8007370:	e7ef      	b.n	8007352 <sbrk_aligned+0x1e>
 8007372:	bf00      	nop
 8007374:	20000b7c 	.word	0x20000b7c

08007378 <_malloc_r>:
 8007378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800737c:	1ccd      	adds	r5, r1, #3
 800737e:	f025 0503 	bic.w	r5, r5, #3
 8007382:	3508      	adds	r5, #8
 8007384:	2d0c      	cmp	r5, #12
 8007386:	bf38      	it	cc
 8007388:	250c      	movcc	r5, #12
 800738a:	2d00      	cmp	r5, #0
 800738c:	4606      	mov	r6, r0
 800738e:	db01      	blt.n	8007394 <_malloc_r+0x1c>
 8007390:	42a9      	cmp	r1, r5
 8007392:	d904      	bls.n	800739e <_malloc_r+0x26>
 8007394:	230c      	movs	r3, #12
 8007396:	6033      	str	r3, [r6, #0]
 8007398:	2000      	movs	r0, #0
 800739a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800739e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007474 <_malloc_r+0xfc>
 80073a2:	f000 f869 	bl	8007478 <__malloc_lock>
 80073a6:	f8d8 3000 	ldr.w	r3, [r8]
 80073aa:	461c      	mov	r4, r3
 80073ac:	bb44      	cbnz	r4, 8007400 <_malloc_r+0x88>
 80073ae:	4629      	mov	r1, r5
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7ff ffbf 	bl	8007334 <sbrk_aligned>
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	4604      	mov	r4, r0
 80073ba:	d158      	bne.n	800746e <_malloc_r+0xf6>
 80073bc:	f8d8 4000 	ldr.w	r4, [r8]
 80073c0:	4627      	mov	r7, r4
 80073c2:	2f00      	cmp	r7, #0
 80073c4:	d143      	bne.n	800744e <_malloc_r+0xd6>
 80073c6:	2c00      	cmp	r4, #0
 80073c8:	d04b      	beq.n	8007462 <_malloc_r+0xea>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	4639      	mov	r1, r7
 80073ce:	4630      	mov	r0, r6
 80073d0:	eb04 0903 	add.w	r9, r4, r3
 80073d4:	f000 f9d4 	bl	8007780 <_sbrk_r>
 80073d8:	4581      	cmp	r9, r0
 80073da:	d142      	bne.n	8007462 <_malloc_r+0xea>
 80073dc:	6821      	ldr	r1, [r4, #0]
 80073de:	1a6d      	subs	r5, r5, r1
 80073e0:	4629      	mov	r1, r5
 80073e2:	4630      	mov	r0, r6
 80073e4:	f7ff ffa6 	bl	8007334 <sbrk_aligned>
 80073e8:	3001      	adds	r0, #1
 80073ea:	d03a      	beq.n	8007462 <_malloc_r+0xea>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	442b      	add	r3, r5
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	f8d8 3000 	ldr.w	r3, [r8]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	bb62      	cbnz	r2, 8007454 <_malloc_r+0xdc>
 80073fa:	f8c8 7000 	str.w	r7, [r8]
 80073fe:	e00f      	b.n	8007420 <_malloc_r+0xa8>
 8007400:	6822      	ldr	r2, [r4, #0]
 8007402:	1b52      	subs	r2, r2, r5
 8007404:	d420      	bmi.n	8007448 <_malloc_r+0xd0>
 8007406:	2a0b      	cmp	r2, #11
 8007408:	d917      	bls.n	800743a <_malloc_r+0xc2>
 800740a:	1961      	adds	r1, r4, r5
 800740c:	42a3      	cmp	r3, r4
 800740e:	6025      	str	r5, [r4, #0]
 8007410:	bf18      	it	ne
 8007412:	6059      	strne	r1, [r3, #4]
 8007414:	6863      	ldr	r3, [r4, #4]
 8007416:	bf08      	it	eq
 8007418:	f8c8 1000 	streq.w	r1, [r8]
 800741c:	5162      	str	r2, [r4, r5]
 800741e:	604b      	str	r3, [r1, #4]
 8007420:	4630      	mov	r0, r6
 8007422:	f000 f82f 	bl	8007484 <__malloc_unlock>
 8007426:	f104 000b 	add.w	r0, r4, #11
 800742a:	1d23      	adds	r3, r4, #4
 800742c:	f020 0007 	bic.w	r0, r0, #7
 8007430:	1ac2      	subs	r2, r0, r3
 8007432:	bf1c      	itt	ne
 8007434:	1a1b      	subne	r3, r3, r0
 8007436:	50a3      	strne	r3, [r4, r2]
 8007438:	e7af      	b.n	800739a <_malloc_r+0x22>
 800743a:	6862      	ldr	r2, [r4, #4]
 800743c:	42a3      	cmp	r3, r4
 800743e:	bf0c      	ite	eq
 8007440:	f8c8 2000 	streq.w	r2, [r8]
 8007444:	605a      	strne	r2, [r3, #4]
 8007446:	e7eb      	b.n	8007420 <_malloc_r+0xa8>
 8007448:	4623      	mov	r3, r4
 800744a:	6864      	ldr	r4, [r4, #4]
 800744c:	e7ae      	b.n	80073ac <_malloc_r+0x34>
 800744e:	463c      	mov	r4, r7
 8007450:	687f      	ldr	r7, [r7, #4]
 8007452:	e7b6      	b.n	80073c2 <_malloc_r+0x4a>
 8007454:	461a      	mov	r2, r3
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	42a3      	cmp	r3, r4
 800745a:	d1fb      	bne.n	8007454 <_malloc_r+0xdc>
 800745c:	2300      	movs	r3, #0
 800745e:	6053      	str	r3, [r2, #4]
 8007460:	e7de      	b.n	8007420 <_malloc_r+0xa8>
 8007462:	230c      	movs	r3, #12
 8007464:	6033      	str	r3, [r6, #0]
 8007466:	4630      	mov	r0, r6
 8007468:	f000 f80c 	bl	8007484 <__malloc_unlock>
 800746c:	e794      	b.n	8007398 <_malloc_r+0x20>
 800746e:	6005      	str	r5, [r0, #0]
 8007470:	e7d6      	b.n	8007420 <_malloc_r+0xa8>
 8007472:	bf00      	nop
 8007474:	20000b80 	.word	0x20000b80

08007478 <__malloc_lock>:
 8007478:	4801      	ldr	r0, [pc, #4]	@ (8007480 <__malloc_lock+0x8>)
 800747a:	f000 b9ce 	b.w	800781a <__retarget_lock_acquire_recursive>
 800747e:	bf00      	nop
 8007480:	20000cc4 	.word	0x20000cc4

08007484 <__malloc_unlock>:
 8007484:	4801      	ldr	r0, [pc, #4]	@ (800748c <__malloc_unlock+0x8>)
 8007486:	f000 b9c9 	b.w	800781c <__retarget_lock_release_recursive>
 800748a:	bf00      	nop
 800748c:	20000cc4 	.word	0x20000cc4

08007490 <std>:
 8007490:	2300      	movs	r3, #0
 8007492:	b510      	push	{r4, lr}
 8007494:	4604      	mov	r4, r0
 8007496:	e9c0 3300 	strd	r3, r3, [r0]
 800749a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800749e:	6083      	str	r3, [r0, #8]
 80074a0:	8181      	strh	r1, [r0, #12]
 80074a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074a4:	81c2      	strh	r2, [r0, #14]
 80074a6:	6183      	str	r3, [r0, #24]
 80074a8:	4619      	mov	r1, r3
 80074aa:	2208      	movs	r2, #8
 80074ac:	305c      	adds	r0, #92	@ 0x5c
 80074ae:	f000 f918 	bl	80076e2 <memset>
 80074b2:	4b0d      	ldr	r3, [pc, #52]	@ (80074e8 <std+0x58>)
 80074b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80074b6:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <std+0x5c>)
 80074b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074ba:	4b0d      	ldr	r3, [pc, #52]	@ (80074f0 <std+0x60>)
 80074bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074be:	4b0d      	ldr	r3, [pc, #52]	@ (80074f4 <std+0x64>)
 80074c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80074c2:	4b0d      	ldr	r3, [pc, #52]	@ (80074f8 <std+0x68>)
 80074c4:	6224      	str	r4, [r4, #32]
 80074c6:	429c      	cmp	r4, r3
 80074c8:	d006      	beq.n	80074d8 <std+0x48>
 80074ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074ce:	4294      	cmp	r4, r2
 80074d0:	d002      	beq.n	80074d8 <std+0x48>
 80074d2:	33d0      	adds	r3, #208	@ 0xd0
 80074d4:	429c      	cmp	r4, r3
 80074d6:	d105      	bne.n	80074e4 <std+0x54>
 80074d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e0:	f000 b99a 	b.w	8007818 <__retarget_lock_init_recursive>
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	bf00      	nop
 80074e8:	0800765d 	.word	0x0800765d
 80074ec:	0800767f 	.word	0x0800767f
 80074f0:	080076b7 	.word	0x080076b7
 80074f4:	080076db 	.word	0x080076db
 80074f8:	20000b84 	.word	0x20000b84

080074fc <stdio_exit_handler>:
 80074fc:	4a02      	ldr	r2, [pc, #8]	@ (8007508 <stdio_exit_handler+0xc>)
 80074fe:	4903      	ldr	r1, [pc, #12]	@ (800750c <stdio_exit_handler+0x10>)
 8007500:	4803      	ldr	r0, [pc, #12]	@ (8007510 <stdio_exit_handler+0x14>)
 8007502:	f000 b87b 	b.w	80075fc <_fwalk_sglue>
 8007506:	bf00      	nop
 8007508:	2000000c 	.word	0x2000000c
 800750c:	08007f85 	.word	0x08007f85
 8007510:	2000001c 	.word	0x2000001c

08007514 <cleanup_stdio>:
 8007514:	6841      	ldr	r1, [r0, #4]
 8007516:	4b0c      	ldr	r3, [pc, #48]	@ (8007548 <cleanup_stdio+0x34>)
 8007518:	4299      	cmp	r1, r3
 800751a:	b510      	push	{r4, lr}
 800751c:	4604      	mov	r4, r0
 800751e:	d001      	beq.n	8007524 <cleanup_stdio+0x10>
 8007520:	f000 fd30 	bl	8007f84 <_fflush_r>
 8007524:	68a1      	ldr	r1, [r4, #8]
 8007526:	4b09      	ldr	r3, [pc, #36]	@ (800754c <cleanup_stdio+0x38>)
 8007528:	4299      	cmp	r1, r3
 800752a:	d002      	beq.n	8007532 <cleanup_stdio+0x1e>
 800752c:	4620      	mov	r0, r4
 800752e:	f000 fd29 	bl	8007f84 <_fflush_r>
 8007532:	68e1      	ldr	r1, [r4, #12]
 8007534:	4b06      	ldr	r3, [pc, #24]	@ (8007550 <cleanup_stdio+0x3c>)
 8007536:	4299      	cmp	r1, r3
 8007538:	d004      	beq.n	8007544 <cleanup_stdio+0x30>
 800753a:	4620      	mov	r0, r4
 800753c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007540:	f000 bd20 	b.w	8007f84 <_fflush_r>
 8007544:	bd10      	pop	{r4, pc}
 8007546:	bf00      	nop
 8007548:	20000b84 	.word	0x20000b84
 800754c:	20000bec 	.word	0x20000bec
 8007550:	20000c54 	.word	0x20000c54

08007554 <global_stdio_init.part.0>:
 8007554:	b510      	push	{r4, lr}
 8007556:	4b0b      	ldr	r3, [pc, #44]	@ (8007584 <global_stdio_init.part.0+0x30>)
 8007558:	4c0b      	ldr	r4, [pc, #44]	@ (8007588 <global_stdio_init.part.0+0x34>)
 800755a:	4a0c      	ldr	r2, [pc, #48]	@ (800758c <global_stdio_init.part.0+0x38>)
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	4620      	mov	r0, r4
 8007560:	2200      	movs	r2, #0
 8007562:	2104      	movs	r1, #4
 8007564:	f7ff ff94 	bl	8007490 <std>
 8007568:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800756c:	2201      	movs	r2, #1
 800756e:	2109      	movs	r1, #9
 8007570:	f7ff ff8e 	bl	8007490 <std>
 8007574:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007578:	2202      	movs	r2, #2
 800757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800757e:	2112      	movs	r1, #18
 8007580:	f7ff bf86 	b.w	8007490 <std>
 8007584:	20000cbc 	.word	0x20000cbc
 8007588:	20000b84 	.word	0x20000b84
 800758c:	080074fd 	.word	0x080074fd

08007590 <__sfp_lock_acquire>:
 8007590:	4801      	ldr	r0, [pc, #4]	@ (8007598 <__sfp_lock_acquire+0x8>)
 8007592:	f000 b942 	b.w	800781a <__retarget_lock_acquire_recursive>
 8007596:	bf00      	nop
 8007598:	20000cc5 	.word	0x20000cc5

0800759c <__sfp_lock_release>:
 800759c:	4801      	ldr	r0, [pc, #4]	@ (80075a4 <__sfp_lock_release+0x8>)
 800759e:	f000 b93d 	b.w	800781c <__retarget_lock_release_recursive>
 80075a2:	bf00      	nop
 80075a4:	20000cc5 	.word	0x20000cc5

080075a8 <__sinit>:
 80075a8:	b510      	push	{r4, lr}
 80075aa:	4604      	mov	r4, r0
 80075ac:	f7ff fff0 	bl	8007590 <__sfp_lock_acquire>
 80075b0:	6a23      	ldr	r3, [r4, #32]
 80075b2:	b11b      	cbz	r3, 80075bc <__sinit+0x14>
 80075b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b8:	f7ff bff0 	b.w	800759c <__sfp_lock_release>
 80075bc:	4b04      	ldr	r3, [pc, #16]	@ (80075d0 <__sinit+0x28>)
 80075be:	6223      	str	r3, [r4, #32]
 80075c0:	4b04      	ldr	r3, [pc, #16]	@ (80075d4 <__sinit+0x2c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f5      	bne.n	80075b4 <__sinit+0xc>
 80075c8:	f7ff ffc4 	bl	8007554 <global_stdio_init.part.0>
 80075cc:	e7f2      	b.n	80075b4 <__sinit+0xc>
 80075ce:	bf00      	nop
 80075d0:	08007515 	.word	0x08007515
 80075d4:	20000cbc 	.word	0x20000cbc

080075d8 <fiprintf>:
 80075d8:	b40e      	push	{r1, r2, r3}
 80075da:	b503      	push	{r0, r1, lr}
 80075dc:	4601      	mov	r1, r0
 80075de:	ab03      	add	r3, sp, #12
 80075e0:	4805      	ldr	r0, [pc, #20]	@ (80075f8 <fiprintf+0x20>)
 80075e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e6:	6800      	ldr	r0, [r0, #0]
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	f000 f9a1 	bl	8007930 <_vfiprintf_r>
 80075ee:	b002      	add	sp, #8
 80075f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80075f4:	b003      	add	sp, #12
 80075f6:	4770      	bx	lr
 80075f8:	20000018 	.word	0x20000018

080075fc <_fwalk_sglue>:
 80075fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007600:	4607      	mov	r7, r0
 8007602:	4688      	mov	r8, r1
 8007604:	4614      	mov	r4, r2
 8007606:	2600      	movs	r6, #0
 8007608:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800760c:	f1b9 0901 	subs.w	r9, r9, #1
 8007610:	d505      	bpl.n	800761e <_fwalk_sglue+0x22>
 8007612:	6824      	ldr	r4, [r4, #0]
 8007614:	2c00      	cmp	r4, #0
 8007616:	d1f7      	bne.n	8007608 <_fwalk_sglue+0xc>
 8007618:	4630      	mov	r0, r6
 800761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d907      	bls.n	8007634 <_fwalk_sglue+0x38>
 8007624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007628:	3301      	adds	r3, #1
 800762a:	d003      	beq.n	8007634 <_fwalk_sglue+0x38>
 800762c:	4629      	mov	r1, r5
 800762e:	4638      	mov	r0, r7
 8007630:	47c0      	blx	r8
 8007632:	4306      	orrs	r6, r0
 8007634:	3568      	adds	r5, #104	@ 0x68
 8007636:	e7e9      	b.n	800760c <_fwalk_sglue+0x10>

08007638 <iprintf>:
 8007638:	b40f      	push	{r0, r1, r2, r3}
 800763a:	b507      	push	{r0, r1, r2, lr}
 800763c:	4906      	ldr	r1, [pc, #24]	@ (8007658 <iprintf+0x20>)
 800763e:	ab04      	add	r3, sp, #16
 8007640:	6808      	ldr	r0, [r1, #0]
 8007642:	f853 2b04 	ldr.w	r2, [r3], #4
 8007646:	6881      	ldr	r1, [r0, #8]
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	f000 f971 	bl	8007930 <_vfiprintf_r>
 800764e:	b003      	add	sp, #12
 8007650:	f85d eb04 	ldr.w	lr, [sp], #4
 8007654:	b004      	add	sp, #16
 8007656:	4770      	bx	lr
 8007658:	20000018 	.word	0x20000018

0800765c <__sread>:
 800765c:	b510      	push	{r4, lr}
 800765e:	460c      	mov	r4, r1
 8007660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007664:	f000 f87a 	bl	800775c <_read_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	bfab      	itete	ge
 800766c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800766e:	89a3      	ldrhlt	r3, [r4, #12]
 8007670:	181b      	addge	r3, r3, r0
 8007672:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007676:	bfac      	ite	ge
 8007678:	6563      	strge	r3, [r4, #84]	@ 0x54
 800767a:	81a3      	strhlt	r3, [r4, #12]
 800767c:	bd10      	pop	{r4, pc}

0800767e <__swrite>:
 800767e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	461f      	mov	r7, r3
 8007684:	898b      	ldrh	r3, [r1, #12]
 8007686:	05db      	lsls	r3, r3, #23
 8007688:	4605      	mov	r5, r0
 800768a:	460c      	mov	r4, r1
 800768c:	4616      	mov	r6, r2
 800768e:	d505      	bpl.n	800769c <__swrite+0x1e>
 8007690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007694:	2302      	movs	r3, #2
 8007696:	2200      	movs	r2, #0
 8007698:	f000 f84e 	bl	8007738 <_lseek_r>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	4628      	mov	r0, r5
 80076ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b2:	f000 b875 	b.w	80077a0 <_write_r>

080076b6 <__sseek>:
 80076b6:	b510      	push	{r4, lr}
 80076b8:	460c      	mov	r4, r1
 80076ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076be:	f000 f83b 	bl	8007738 <_lseek_r>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	bf15      	itete	ne
 80076c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076d2:	81a3      	strheq	r3, [r4, #12]
 80076d4:	bf18      	it	ne
 80076d6:	81a3      	strhne	r3, [r4, #12]
 80076d8:	bd10      	pop	{r4, pc}

080076da <__sclose>:
 80076da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076de:	f000 b81b 	b.w	8007718 <_close_r>

080076e2 <memset>:
 80076e2:	4402      	add	r2, r0
 80076e4:	4603      	mov	r3, r0
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d100      	bne.n	80076ec <memset+0xa>
 80076ea:	4770      	bx	lr
 80076ec:	f803 1b01 	strb.w	r1, [r3], #1
 80076f0:	e7f9      	b.n	80076e6 <memset+0x4>

080076f2 <strncpy>:
 80076f2:	b510      	push	{r4, lr}
 80076f4:	3901      	subs	r1, #1
 80076f6:	4603      	mov	r3, r0
 80076f8:	b132      	cbz	r2, 8007708 <strncpy+0x16>
 80076fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80076fe:	f803 4b01 	strb.w	r4, [r3], #1
 8007702:	3a01      	subs	r2, #1
 8007704:	2c00      	cmp	r4, #0
 8007706:	d1f7      	bne.n	80076f8 <strncpy+0x6>
 8007708:	441a      	add	r2, r3
 800770a:	2100      	movs	r1, #0
 800770c:	4293      	cmp	r3, r2
 800770e:	d100      	bne.n	8007712 <strncpy+0x20>
 8007710:	bd10      	pop	{r4, pc}
 8007712:	f803 1b01 	strb.w	r1, [r3], #1
 8007716:	e7f9      	b.n	800770c <strncpy+0x1a>

08007718 <_close_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4d06      	ldr	r5, [pc, #24]	@ (8007734 <_close_r+0x1c>)
 800771c:	2300      	movs	r3, #0
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	602b      	str	r3, [r5, #0]
 8007724:	f7fa fd2b 	bl	800217e <_close>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_close_r+0x1a>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_close_r+0x1a>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	20000cc0 	.word	0x20000cc0

08007738 <_lseek_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d07      	ldr	r5, [pc, #28]	@ (8007758 <_lseek_r+0x20>)
 800773c:	4604      	mov	r4, r0
 800773e:	4608      	mov	r0, r1
 8007740:	4611      	mov	r1, r2
 8007742:	2200      	movs	r2, #0
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f7fa fd40 	bl	80021cc <_lseek>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_lseek_r+0x1e>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_lseek_r+0x1e>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	20000cc0 	.word	0x20000cc0

0800775c <_read_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d07      	ldr	r5, [pc, #28]	@ (800777c <_read_r+0x20>)
 8007760:	4604      	mov	r4, r0
 8007762:	4608      	mov	r0, r1
 8007764:	4611      	mov	r1, r2
 8007766:	2200      	movs	r2, #0
 8007768:	602a      	str	r2, [r5, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	f7fa fcce 	bl	800210c <_read>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d102      	bne.n	800777a <_read_r+0x1e>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b103      	cbz	r3, 800777a <_read_r+0x1e>
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	20000cc0 	.word	0x20000cc0

08007780 <_sbrk_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d06      	ldr	r5, [pc, #24]	@ (800779c <_sbrk_r+0x1c>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	f7fa fd2c 	bl	80021e8 <_sbrk>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_sbrk_r+0x1a>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_sbrk_r+0x1a>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	20000cc0 	.word	0x20000cc0

080077a0 <_write_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4d07      	ldr	r5, [pc, #28]	@ (80077c0 <_write_r+0x20>)
 80077a4:	4604      	mov	r4, r0
 80077a6:	4608      	mov	r0, r1
 80077a8:	4611      	mov	r1, r2
 80077aa:	2200      	movs	r2, #0
 80077ac:	602a      	str	r2, [r5, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	f7fa fcc9 	bl	8002146 <_write>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d102      	bne.n	80077be <_write_r+0x1e>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	b103      	cbz	r3, 80077be <_write_r+0x1e>
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	20000cc0 	.word	0x20000cc0

080077c4 <__errno>:
 80077c4:	4b01      	ldr	r3, [pc, #4]	@ (80077cc <__errno+0x8>)
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	20000018 	.word	0x20000018

080077d0 <__libc_init_array>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007808 <__libc_init_array+0x38>)
 80077d4:	4c0d      	ldr	r4, [pc, #52]	@ (800780c <__libc_init_array+0x3c>)
 80077d6:	1b64      	subs	r4, r4, r5
 80077d8:	10a4      	asrs	r4, r4, #2
 80077da:	2600      	movs	r6, #0
 80077dc:	42a6      	cmp	r6, r4
 80077de:	d109      	bne.n	80077f4 <__libc_init_array+0x24>
 80077e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007810 <__libc_init_array+0x40>)
 80077e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007814 <__libc_init_array+0x44>)
 80077e4:	f000 fd52 	bl	800828c <_init>
 80077e8:	1b64      	subs	r4, r4, r5
 80077ea:	10a4      	asrs	r4, r4, #2
 80077ec:	2600      	movs	r6, #0
 80077ee:	42a6      	cmp	r6, r4
 80077f0:	d105      	bne.n	80077fe <__libc_init_array+0x2e>
 80077f2:	bd70      	pop	{r4, r5, r6, pc}
 80077f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f8:	4798      	blx	r3
 80077fa:	3601      	adds	r6, #1
 80077fc:	e7ee      	b.n	80077dc <__libc_init_array+0xc>
 80077fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007802:	4798      	blx	r3
 8007804:	3601      	adds	r6, #1
 8007806:	e7f2      	b.n	80077ee <__libc_init_array+0x1e>
 8007808:	0800a9e0 	.word	0x0800a9e0
 800780c:	0800a9e0 	.word	0x0800a9e0
 8007810:	0800a9e0 	.word	0x0800a9e0
 8007814:	0800a9e4 	.word	0x0800a9e4

08007818 <__retarget_lock_init_recursive>:
 8007818:	4770      	bx	lr

0800781a <__retarget_lock_acquire_recursive>:
 800781a:	4770      	bx	lr

0800781c <__retarget_lock_release_recursive>:
 800781c:	4770      	bx	lr

0800781e <memcpy>:
 800781e:	440a      	add	r2, r1
 8007820:	4291      	cmp	r1, r2
 8007822:	f100 33ff 	add.w	r3, r0, #4294967295
 8007826:	d100      	bne.n	800782a <memcpy+0xc>
 8007828:	4770      	bx	lr
 800782a:	b510      	push	{r4, lr}
 800782c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007830:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007834:	4291      	cmp	r1, r2
 8007836:	d1f9      	bne.n	800782c <memcpy+0xe>
 8007838:	bd10      	pop	{r4, pc}

0800783a <abort>:
 800783a:	b508      	push	{r3, lr}
 800783c:	2006      	movs	r0, #6
 800783e:	f000 fc85 	bl	800814c <raise>
 8007842:	2001      	movs	r0, #1
 8007844:	f7fa fc57 	bl	80020f6 <_exit>

08007848 <_free_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4605      	mov	r5, r0
 800784c:	2900      	cmp	r1, #0
 800784e:	d041      	beq.n	80078d4 <_free_r+0x8c>
 8007850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007854:	1f0c      	subs	r4, r1, #4
 8007856:	2b00      	cmp	r3, #0
 8007858:	bfb8      	it	lt
 800785a:	18e4      	addlt	r4, r4, r3
 800785c:	f7ff fe0c 	bl	8007478 <__malloc_lock>
 8007860:	4a1d      	ldr	r2, [pc, #116]	@ (80078d8 <_free_r+0x90>)
 8007862:	6813      	ldr	r3, [r2, #0]
 8007864:	b933      	cbnz	r3, 8007874 <_free_r+0x2c>
 8007866:	6063      	str	r3, [r4, #4]
 8007868:	6014      	str	r4, [r2, #0]
 800786a:	4628      	mov	r0, r5
 800786c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007870:	f7ff be08 	b.w	8007484 <__malloc_unlock>
 8007874:	42a3      	cmp	r3, r4
 8007876:	d908      	bls.n	800788a <_free_r+0x42>
 8007878:	6820      	ldr	r0, [r4, #0]
 800787a:	1821      	adds	r1, r4, r0
 800787c:	428b      	cmp	r3, r1
 800787e:	bf01      	itttt	eq
 8007880:	6819      	ldreq	r1, [r3, #0]
 8007882:	685b      	ldreq	r3, [r3, #4]
 8007884:	1809      	addeq	r1, r1, r0
 8007886:	6021      	streq	r1, [r4, #0]
 8007888:	e7ed      	b.n	8007866 <_free_r+0x1e>
 800788a:	461a      	mov	r2, r3
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	b10b      	cbz	r3, 8007894 <_free_r+0x4c>
 8007890:	42a3      	cmp	r3, r4
 8007892:	d9fa      	bls.n	800788a <_free_r+0x42>
 8007894:	6811      	ldr	r1, [r2, #0]
 8007896:	1850      	adds	r0, r2, r1
 8007898:	42a0      	cmp	r0, r4
 800789a:	d10b      	bne.n	80078b4 <_free_r+0x6c>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	4401      	add	r1, r0
 80078a0:	1850      	adds	r0, r2, r1
 80078a2:	4283      	cmp	r3, r0
 80078a4:	6011      	str	r1, [r2, #0]
 80078a6:	d1e0      	bne.n	800786a <_free_r+0x22>
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	6053      	str	r3, [r2, #4]
 80078ae:	4408      	add	r0, r1
 80078b0:	6010      	str	r0, [r2, #0]
 80078b2:	e7da      	b.n	800786a <_free_r+0x22>
 80078b4:	d902      	bls.n	80078bc <_free_r+0x74>
 80078b6:	230c      	movs	r3, #12
 80078b8:	602b      	str	r3, [r5, #0]
 80078ba:	e7d6      	b.n	800786a <_free_r+0x22>
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	1821      	adds	r1, r4, r0
 80078c0:	428b      	cmp	r3, r1
 80078c2:	bf04      	itt	eq
 80078c4:	6819      	ldreq	r1, [r3, #0]
 80078c6:	685b      	ldreq	r3, [r3, #4]
 80078c8:	6063      	str	r3, [r4, #4]
 80078ca:	bf04      	itt	eq
 80078cc:	1809      	addeq	r1, r1, r0
 80078ce:	6021      	streq	r1, [r4, #0]
 80078d0:	6054      	str	r4, [r2, #4]
 80078d2:	e7ca      	b.n	800786a <_free_r+0x22>
 80078d4:	bd38      	pop	{r3, r4, r5, pc}
 80078d6:	bf00      	nop
 80078d8:	20000b80 	.word	0x20000b80

080078dc <__sfputc_r>:
 80078dc:	6893      	ldr	r3, [r2, #8]
 80078de:	3b01      	subs	r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	b410      	push	{r4}
 80078e4:	6093      	str	r3, [r2, #8]
 80078e6:	da08      	bge.n	80078fa <__sfputc_r+0x1e>
 80078e8:	6994      	ldr	r4, [r2, #24]
 80078ea:	42a3      	cmp	r3, r4
 80078ec:	db01      	blt.n	80078f2 <__sfputc_r+0x16>
 80078ee:	290a      	cmp	r1, #10
 80078f0:	d103      	bne.n	80078fa <__sfputc_r+0x1e>
 80078f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078f6:	f000 bb6d 	b.w	8007fd4 <__swbuf_r>
 80078fa:	6813      	ldr	r3, [r2, #0]
 80078fc:	1c58      	adds	r0, r3, #1
 80078fe:	6010      	str	r0, [r2, #0]
 8007900:	7019      	strb	r1, [r3, #0]
 8007902:	4608      	mov	r0, r1
 8007904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007908:	4770      	bx	lr

0800790a <__sfputs_r>:
 800790a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790c:	4606      	mov	r6, r0
 800790e:	460f      	mov	r7, r1
 8007910:	4614      	mov	r4, r2
 8007912:	18d5      	adds	r5, r2, r3
 8007914:	42ac      	cmp	r4, r5
 8007916:	d101      	bne.n	800791c <__sfputs_r+0x12>
 8007918:	2000      	movs	r0, #0
 800791a:	e007      	b.n	800792c <__sfputs_r+0x22>
 800791c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007920:	463a      	mov	r2, r7
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ffda 	bl	80078dc <__sfputc_r>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d1f3      	bne.n	8007914 <__sfputs_r+0xa>
 800792c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007930 <_vfiprintf_r>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	460d      	mov	r5, r1
 8007936:	b09d      	sub	sp, #116	@ 0x74
 8007938:	4614      	mov	r4, r2
 800793a:	4698      	mov	r8, r3
 800793c:	4606      	mov	r6, r0
 800793e:	b118      	cbz	r0, 8007948 <_vfiprintf_r+0x18>
 8007940:	6a03      	ldr	r3, [r0, #32]
 8007942:	b90b      	cbnz	r3, 8007948 <_vfiprintf_r+0x18>
 8007944:	f7ff fe30 	bl	80075a8 <__sinit>
 8007948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800794a:	07d9      	lsls	r1, r3, #31
 800794c:	d405      	bmi.n	800795a <_vfiprintf_r+0x2a>
 800794e:	89ab      	ldrh	r3, [r5, #12]
 8007950:	059a      	lsls	r2, r3, #22
 8007952:	d402      	bmi.n	800795a <_vfiprintf_r+0x2a>
 8007954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007956:	f7ff ff60 	bl	800781a <__retarget_lock_acquire_recursive>
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	071b      	lsls	r3, r3, #28
 800795e:	d501      	bpl.n	8007964 <_vfiprintf_r+0x34>
 8007960:	692b      	ldr	r3, [r5, #16]
 8007962:	b99b      	cbnz	r3, 800798c <_vfiprintf_r+0x5c>
 8007964:	4629      	mov	r1, r5
 8007966:	4630      	mov	r0, r6
 8007968:	f000 fb72 	bl	8008050 <__swsetup_r>
 800796c:	b170      	cbz	r0, 800798c <_vfiprintf_r+0x5c>
 800796e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007970:	07dc      	lsls	r4, r3, #31
 8007972:	d504      	bpl.n	800797e <_vfiprintf_r+0x4e>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	b01d      	add	sp, #116	@ 0x74
 800797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	0598      	lsls	r0, r3, #22
 8007982:	d4f7      	bmi.n	8007974 <_vfiprintf_r+0x44>
 8007984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007986:	f7ff ff49 	bl	800781c <__retarget_lock_release_recursive>
 800798a:	e7f3      	b.n	8007974 <_vfiprintf_r+0x44>
 800798c:	2300      	movs	r3, #0
 800798e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007990:	2320      	movs	r3, #32
 8007992:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007996:	f8cd 800c 	str.w	r8, [sp, #12]
 800799a:	2330      	movs	r3, #48	@ 0x30
 800799c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b4c <_vfiprintf_r+0x21c>
 80079a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079a4:	f04f 0901 	mov.w	r9, #1
 80079a8:	4623      	mov	r3, r4
 80079aa:	469a      	mov	sl, r3
 80079ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b0:	b10a      	cbz	r2, 80079b6 <_vfiprintf_r+0x86>
 80079b2:	2a25      	cmp	r2, #37	@ 0x25
 80079b4:	d1f9      	bne.n	80079aa <_vfiprintf_r+0x7a>
 80079b6:	ebba 0b04 	subs.w	fp, sl, r4
 80079ba:	d00b      	beq.n	80079d4 <_vfiprintf_r+0xa4>
 80079bc:	465b      	mov	r3, fp
 80079be:	4622      	mov	r2, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff ffa1 	bl	800790a <__sfputs_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	f000 80a7 	beq.w	8007b1c <_vfiprintf_r+0x1ec>
 80079ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079d0:	445a      	add	r2, fp
 80079d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80079d4:	f89a 3000 	ldrb.w	r3, [sl]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 809f 	beq.w	8007b1c <_vfiprintf_r+0x1ec>
 80079de:	2300      	movs	r3, #0
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295
 80079e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e8:	f10a 0a01 	add.w	sl, sl, #1
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	9307      	str	r3, [sp, #28]
 80079f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80079f6:	4654      	mov	r4, sl
 80079f8:	2205      	movs	r2, #5
 80079fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fe:	4853      	ldr	r0, [pc, #332]	@ (8007b4c <_vfiprintf_r+0x21c>)
 8007a00:	f7f8 fc0e 	bl	8000220 <memchr>
 8007a04:	9a04      	ldr	r2, [sp, #16]
 8007a06:	b9d8      	cbnz	r0, 8007a40 <_vfiprintf_r+0x110>
 8007a08:	06d1      	lsls	r1, r2, #27
 8007a0a:	bf44      	itt	mi
 8007a0c:	2320      	movmi	r3, #32
 8007a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a12:	0713      	lsls	r3, r2, #28
 8007a14:	bf44      	itt	mi
 8007a16:	232b      	movmi	r3, #43	@ 0x2b
 8007a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a20:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a22:	d015      	beq.n	8007a50 <_vfiprintf_r+0x120>
 8007a24:	9a07      	ldr	r2, [sp, #28]
 8007a26:	4654      	mov	r4, sl
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f04f 0c0a 	mov.w	ip, #10
 8007a2e:	4621      	mov	r1, r4
 8007a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a34:	3b30      	subs	r3, #48	@ 0x30
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d94b      	bls.n	8007ad2 <_vfiprintf_r+0x1a2>
 8007a3a:	b1b0      	cbz	r0, 8007a6a <_vfiprintf_r+0x13a>
 8007a3c:	9207      	str	r2, [sp, #28]
 8007a3e:	e014      	b.n	8007a6a <_vfiprintf_r+0x13a>
 8007a40:	eba0 0308 	sub.w	r3, r0, r8
 8007a44:	fa09 f303 	lsl.w	r3, r9, r3
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	46a2      	mov	sl, r4
 8007a4e:	e7d2      	b.n	80079f6 <_vfiprintf_r+0xc6>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	1d19      	adds	r1, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	9103      	str	r1, [sp, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	bfbb      	ittet	lt
 8007a5c:	425b      	neglt	r3, r3
 8007a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a62:	9307      	strge	r3, [sp, #28]
 8007a64:	9307      	strlt	r3, [sp, #28]
 8007a66:	bfb8      	it	lt
 8007a68:	9204      	strlt	r2, [sp, #16]
 8007a6a:	7823      	ldrb	r3, [r4, #0]
 8007a6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a6e:	d10a      	bne.n	8007a86 <_vfiprintf_r+0x156>
 8007a70:	7863      	ldrb	r3, [r4, #1]
 8007a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a74:	d132      	bne.n	8007adc <_vfiprintf_r+0x1ac>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	1d1a      	adds	r2, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	9203      	str	r2, [sp, #12]
 8007a7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a82:	3402      	adds	r4, #2
 8007a84:	9305      	str	r3, [sp, #20]
 8007a86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007b5c <_vfiprintf_r+0x22c>
 8007a8a:	7821      	ldrb	r1, [r4, #0]
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	4650      	mov	r0, sl
 8007a90:	f7f8 fbc6 	bl	8000220 <memchr>
 8007a94:	b138      	cbz	r0, 8007aa6 <_vfiprintf_r+0x176>
 8007a96:	9b04      	ldr	r3, [sp, #16]
 8007a98:	eba0 000a 	sub.w	r0, r0, sl
 8007a9c:	2240      	movs	r2, #64	@ 0x40
 8007a9e:	4082      	lsls	r2, r0
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	3401      	adds	r4, #1
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aaa:	4829      	ldr	r0, [pc, #164]	@ (8007b50 <_vfiprintf_r+0x220>)
 8007aac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ab0:	2206      	movs	r2, #6
 8007ab2:	f7f8 fbb5 	bl	8000220 <memchr>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d03f      	beq.n	8007b3a <_vfiprintf_r+0x20a>
 8007aba:	4b26      	ldr	r3, [pc, #152]	@ (8007b54 <_vfiprintf_r+0x224>)
 8007abc:	bb1b      	cbnz	r3, 8007b06 <_vfiprintf_r+0x1d6>
 8007abe:	9b03      	ldr	r3, [sp, #12]
 8007ac0:	3307      	adds	r3, #7
 8007ac2:	f023 0307 	bic.w	r3, r3, #7
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007acc:	443b      	add	r3, r7
 8007ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ad0:	e76a      	b.n	80079a8 <_vfiprintf_r+0x78>
 8007ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	2001      	movs	r0, #1
 8007ada:	e7a8      	b.n	8007a2e <_vfiprintf_r+0xfe>
 8007adc:	2300      	movs	r3, #0
 8007ade:	3401      	adds	r4, #1
 8007ae0:	9305      	str	r3, [sp, #20]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f04f 0c0a 	mov.w	ip, #10
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aee:	3a30      	subs	r2, #48	@ 0x30
 8007af0:	2a09      	cmp	r2, #9
 8007af2:	d903      	bls.n	8007afc <_vfiprintf_r+0x1cc>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0c6      	beq.n	8007a86 <_vfiprintf_r+0x156>
 8007af8:	9105      	str	r1, [sp, #20]
 8007afa:	e7c4      	b.n	8007a86 <_vfiprintf_r+0x156>
 8007afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b00:	4604      	mov	r4, r0
 8007b02:	2301      	movs	r3, #1
 8007b04:	e7f0      	b.n	8007ae8 <_vfiprintf_r+0x1b8>
 8007b06:	ab03      	add	r3, sp, #12
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	462a      	mov	r2, r5
 8007b0c:	4b12      	ldr	r3, [pc, #72]	@ (8007b58 <_vfiprintf_r+0x228>)
 8007b0e:	a904      	add	r1, sp, #16
 8007b10:	4630      	mov	r0, r6
 8007b12:	f3af 8000 	nop.w
 8007b16:	4607      	mov	r7, r0
 8007b18:	1c78      	adds	r0, r7, #1
 8007b1a:	d1d6      	bne.n	8007aca <_vfiprintf_r+0x19a>
 8007b1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b1e:	07d9      	lsls	r1, r3, #31
 8007b20:	d405      	bmi.n	8007b2e <_vfiprintf_r+0x1fe>
 8007b22:	89ab      	ldrh	r3, [r5, #12]
 8007b24:	059a      	lsls	r2, r3, #22
 8007b26:	d402      	bmi.n	8007b2e <_vfiprintf_r+0x1fe>
 8007b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b2a:	f7ff fe77 	bl	800781c <__retarget_lock_release_recursive>
 8007b2e:	89ab      	ldrh	r3, [r5, #12]
 8007b30:	065b      	lsls	r3, r3, #25
 8007b32:	f53f af1f 	bmi.w	8007974 <_vfiprintf_r+0x44>
 8007b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b38:	e71e      	b.n	8007978 <_vfiprintf_r+0x48>
 8007b3a:	ab03      	add	r3, sp, #12
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	462a      	mov	r2, r5
 8007b40:	4b05      	ldr	r3, [pc, #20]	@ (8007b58 <_vfiprintf_r+0x228>)
 8007b42:	a904      	add	r1, sp, #16
 8007b44:	4630      	mov	r0, r6
 8007b46:	f000 f879 	bl	8007c3c <_printf_i>
 8007b4a:	e7e4      	b.n	8007b16 <_vfiprintf_r+0x1e6>
 8007b4c:	0800a9a4 	.word	0x0800a9a4
 8007b50:	0800a9ae 	.word	0x0800a9ae
 8007b54:	00000000 	.word	0x00000000
 8007b58:	0800790b 	.word	0x0800790b
 8007b5c:	0800a9aa 	.word	0x0800a9aa

08007b60 <_printf_common>:
 8007b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b64:	4616      	mov	r6, r2
 8007b66:	4698      	mov	r8, r3
 8007b68:	688a      	ldr	r2, [r1, #8]
 8007b6a:	690b      	ldr	r3, [r1, #16]
 8007b6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b70:	4293      	cmp	r3, r2
 8007b72:	bfb8      	it	lt
 8007b74:	4613      	movlt	r3, r2
 8007b76:	6033      	str	r3, [r6, #0]
 8007b78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	b10a      	cbz	r2, 8007b86 <_printf_common+0x26>
 8007b82:	3301      	adds	r3, #1
 8007b84:	6033      	str	r3, [r6, #0]
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	0699      	lsls	r1, r3, #26
 8007b8a:	bf42      	ittt	mi
 8007b8c:	6833      	ldrmi	r3, [r6, #0]
 8007b8e:	3302      	addmi	r3, #2
 8007b90:	6033      	strmi	r3, [r6, #0]
 8007b92:	6825      	ldr	r5, [r4, #0]
 8007b94:	f015 0506 	ands.w	r5, r5, #6
 8007b98:	d106      	bne.n	8007ba8 <_printf_common+0x48>
 8007b9a:	f104 0a19 	add.w	sl, r4, #25
 8007b9e:	68e3      	ldr	r3, [r4, #12]
 8007ba0:	6832      	ldr	r2, [r6, #0]
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	42ab      	cmp	r3, r5
 8007ba6:	dc26      	bgt.n	8007bf6 <_printf_common+0x96>
 8007ba8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007bac:	6822      	ldr	r2, [r4, #0]
 8007bae:	3b00      	subs	r3, #0
 8007bb0:	bf18      	it	ne
 8007bb2:	2301      	movne	r3, #1
 8007bb4:	0692      	lsls	r2, r2, #26
 8007bb6:	d42b      	bmi.n	8007c10 <_printf_common+0xb0>
 8007bb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bbc:	4641      	mov	r1, r8
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	47c8      	blx	r9
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d01e      	beq.n	8007c04 <_printf_common+0xa4>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	6922      	ldr	r2, [r4, #16]
 8007bca:	f003 0306 	and.w	r3, r3, #6
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	bf02      	ittt	eq
 8007bd2:	68e5      	ldreq	r5, [r4, #12]
 8007bd4:	6833      	ldreq	r3, [r6, #0]
 8007bd6:	1aed      	subeq	r5, r5, r3
 8007bd8:	68a3      	ldr	r3, [r4, #8]
 8007bda:	bf0c      	ite	eq
 8007bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be0:	2500      	movne	r5, #0
 8007be2:	4293      	cmp	r3, r2
 8007be4:	bfc4      	itt	gt
 8007be6:	1a9b      	subgt	r3, r3, r2
 8007be8:	18ed      	addgt	r5, r5, r3
 8007bea:	2600      	movs	r6, #0
 8007bec:	341a      	adds	r4, #26
 8007bee:	42b5      	cmp	r5, r6
 8007bf0:	d11a      	bne.n	8007c28 <_printf_common+0xc8>
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	e008      	b.n	8007c08 <_printf_common+0xa8>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4652      	mov	r2, sl
 8007bfa:	4641      	mov	r1, r8
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	47c8      	blx	r9
 8007c00:	3001      	adds	r0, #1
 8007c02:	d103      	bne.n	8007c0c <_printf_common+0xac>
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	e7c6      	b.n	8007b9e <_printf_common+0x3e>
 8007c10:	18e1      	adds	r1, r4, r3
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	2030      	movs	r0, #48	@ 0x30
 8007c16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c1a:	4422      	add	r2, r4
 8007c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c24:	3302      	adds	r3, #2
 8007c26:	e7c7      	b.n	8007bb8 <_printf_common+0x58>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	4638      	mov	r0, r7
 8007c30:	47c8      	blx	r9
 8007c32:	3001      	adds	r0, #1
 8007c34:	d0e6      	beq.n	8007c04 <_printf_common+0xa4>
 8007c36:	3601      	adds	r6, #1
 8007c38:	e7d9      	b.n	8007bee <_printf_common+0x8e>
	...

08007c3c <_printf_i>:
 8007c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	7e0f      	ldrb	r7, [r1, #24]
 8007c42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c44:	2f78      	cmp	r7, #120	@ 0x78
 8007c46:	4691      	mov	r9, r2
 8007c48:	4680      	mov	r8, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	469a      	mov	sl, r3
 8007c4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c52:	d807      	bhi.n	8007c64 <_printf_i+0x28>
 8007c54:	2f62      	cmp	r7, #98	@ 0x62
 8007c56:	d80a      	bhi.n	8007c6e <_printf_i+0x32>
 8007c58:	2f00      	cmp	r7, #0
 8007c5a:	f000 80d2 	beq.w	8007e02 <_printf_i+0x1c6>
 8007c5e:	2f58      	cmp	r7, #88	@ 0x58
 8007c60:	f000 80b9 	beq.w	8007dd6 <_printf_i+0x19a>
 8007c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c6c:	e03a      	b.n	8007ce4 <_printf_i+0xa8>
 8007c6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c72:	2b15      	cmp	r3, #21
 8007c74:	d8f6      	bhi.n	8007c64 <_printf_i+0x28>
 8007c76:	a101      	add	r1, pc, #4	@ (adr r1, 8007c7c <_printf_i+0x40>)
 8007c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c7c:	08007cd5 	.word	0x08007cd5
 8007c80:	08007ce9 	.word	0x08007ce9
 8007c84:	08007c65 	.word	0x08007c65
 8007c88:	08007c65 	.word	0x08007c65
 8007c8c:	08007c65 	.word	0x08007c65
 8007c90:	08007c65 	.word	0x08007c65
 8007c94:	08007ce9 	.word	0x08007ce9
 8007c98:	08007c65 	.word	0x08007c65
 8007c9c:	08007c65 	.word	0x08007c65
 8007ca0:	08007c65 	.word	0x08007c65
 8007ca4:	08007c65 	.word	0x08007c65
 8007ca8:	08007de9 	.word	0x08007de9
 8007cac:	08007d13 	.word	0x08007d13
 8007cb0:	08007da3 	.word	0x08007da3
 8007cb4:	08007c65 	.word	0x08007c65
 8007cb8:	08007c65 	.word	0x08007c65
 8007cbc:	08007e0b 	.word	0x08007e0b
 8007cc0:	08007c65 	.word	0x08007c65
 8007cc4:	08007d13 	.word	0x08007d13
 8007cc8:	08007c65 	.word	0x08007c65
 8007ccc:	08007c65 	.word	0x08007c65
 8007cd0:	08007dab 	.word	0x08007dab
 8007cd4:	6833      	ldr	r3, [r6, #0]
 8007cd6:	1d1a      	adds	r2, r3, #4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6032      	str	r2, [r6, #0]
 8007cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ce0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e09d      	b.n	8007e24 <_printf_i+0x1e8>
 8007ce8:	6833      	ldr	r3, [r6, #0]
 8007cea:	6820      	ldr	r0, [r4, #0]
 8007cec:	1d19      	adds	r1, r3, #4
 8007cee:	6031      	str	r1, [r6, #0]
 8007cf0:	0606      	lsls	r6, r0, #24
 8007cf2:	d501      	bpl.n	8007cf8 <_printf_i+0xbc>
 8007cf4:	681d      	ldr	r5, [r3, #0]
 8007cf6:	e003      	b.n	8007d00 <_printf_i+0xc4>
 8007cf8:	0645      	lsls	r5, r0, #25
 8007cfa:	d5fb      	bpl.n	8007cf4 <_printf_i+0xb8>
 8007cfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	da03      	bge.n	8007d0c <_printf_i+0xd0>
 8007d04:	232d      	movs	r3, #45	@ 0x2d
 8007d06:	426d      	negs	r5, r5
 8007d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d0c:	4859      	ldr	r0, [pc, #356]	@ (8007e74 <_printf_i+0x238>)
 8007d0e:	230a      	movs	r3, #10
 8007d10:	e011      	b.n	8007d36 <_printf_i+0xfa>
 8007d12:	6821      	ldr	r1, [r4, #0]
 8007d14:	6833      	ldr	r3, [r6, #0]
 8007d16:	0608      	lsls	r0, r1, #24
 8007d18:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d1c:	d402      	bmi.n	8007d24 <_printf_i+0xe8>
 8007d1e:	0649      	lsls	r1, r1, #25
 8007d20:	bf48      	it	mi
 8007d22:	b2ad      	uxthmi	r5, r5
 8007d24:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d26:	4853      	ldr	r0, [pc, #332]	@ (8007e74 <_printf_i+0x238>)
 8007d28:	6033      	str	r3, [r6, #0]
 8007d2a:	bf14      	ite	ne
 8007d2c:	230a      	movne	r3, #10
 8007d2e:	2308      	moveq	r3, #8
 8007d30:	2100      	movs	r1, #0
 8007d32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d36:	6866      	ldr	r6, [r4, #4]
 8007d38:	60a6      	str	r6, [r4, #8]
 8007d3a:	2e00      	cmp	r6, #0
 8007d3c:	bfa2      	ittt	ge
 8007d3e:	6821      	ldrge	r1, [r4, #0]
 8007d40:	f021 0104 	bicge.w	r1, r1, #4
 8007d44:	6021      	strge	r1, [r4, #0]
 8007d46:	b90d      	cbnz	r5, 8007d4c <_printf_i+0x110>
 8007d48:	2e00      	cmp	r6, #0
 8007d4a:	d04b      	beq.n	8007de4 <_printf_i+0x1a8>
 8007d4c:	4616      	mov	r6, r2
 8007d4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d52:	fb03 5711 	mls	r7, r3, r1, r5
 8007d56:	5dc7      	ldrb	r7, [r0, r7]
 8007d58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d5c:	462f      	mov	r7, r5
 8007d5e:	42bb      	cmp	r3, r7
 8007d60:	460d      	mov	r5, r1
 8007d62:	d9f4      	bls.n	8007d4e <_printf_i+0x112>
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d10b      	bne.n	8007d80 <_printf_i+0x144>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	07df      	lsls	r7, r3, #31
 8007d6c:	d508      	bpl.n	8007d80 <_printf_i+0x144>
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	6861      	ldr	r1, [r4, #4]
 8007d72:	4299      	cmp	r1, r3
 8007d74:	bfde      	ittt	le
 8007d76:	2330      	movle	r3, #48	@ 0x30
 8007d78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d80:	1b92      	subs	r2, r2, r6
 8007d82:	6122      	str	r2, [r4, #16]
 8007d84:	f8cd a000 	str.w	sl, [sp]
 8007d88:	464b      	mov	r3, r9
 8007d8a:	aa03      	add	r2, sp, #12
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	4640      	mov	r0, r8
 8007d90:	f7ff fee6 	bl	8007b60 <_printf_common>
 8007d94:	3001      	adds	r0, #1
 8007d96:	d14a      	bne.n	8007e2e <_printf_i+0x1f2>
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	b004      	add	sp, #16
 8007d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	f043 0320 	orr.w	r3, r3, #32
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	4833      	ldr	r0, [pc, #204]	@ (8007e78 <_printf_i+0x23c>)
 8007dac:	2778      	movs	r7, #120	@ 0x78
 8007dae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	6831      	ldr	r1, [r6, #0]
 8007db6:	061f      	lsls	r7, r3, #24
 8007db8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007dbc:	d402      	bmi.n	8007dc4 <_printf_i+0x188>
 8007dbe:	065f      	lsls	r7, r3, #25
 8007dc0:	bf48      	it	mi
 8007dc2:	b2ad      	uxthmi	r5, r5
 8007dc4:	6031      	str	r1, [r6, #0]
 8007dc6:	07d9      	lsls	r1, r3, #31
 8007dc8:	bf44      	itt	mi
 8007dca:	f043 0320 	orrmi.w	r3, r3, #32
 8007dce:	6023      	strmi	r3, [r4, #0]
 8007dd0:	b11d      	cbz	r5, 8007dda <_printf_i+0x19e>
 8007dd2:	2310      	movs	r3, #16
 8007dd4:	e7ac      	b.n	8007d30 <_printf_i+0xf4>
 8007dd6:	4827      	ldr	r0, [pc, #156]	@ (8007e74 <_printf_i+0x238>)
 8007dd8:	e7e9      	b.n	8007dae <_printf_i+0x172>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	f023 0320 	bic.w	r3, r3, #32
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	e7f6      	b.n	8007dd2 <_printf_i+0x196>
 8007de4:	4616      	mov	r6, r2
 8007de6:	e7bd      	b.n	8007d64 <_printf_i+0x128>
 8007de8:	6833      	ldr	r3, [r6, #0]
 8007dea:	6825      	ldr	r5, [r4, #0]
 8007dec:	6961      	ldr	r1, [r4, #20]
 8007dee:	1d18      	adds	r0, r3, #4
 8007df0:	6030      	str	r0, [r6, #0]
 8007df2:	062e      	lsls	r6, r5, #24
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	d501      	bpl.n	8007dfc <_printf_i+0x1c0>
 8007df8:	6019      	str	r1, [r3, #0]
 8007dfa:	e002      	b.n	8007e02 <_printf_i+0x1c6>
 8007dfc:	0668      	lsls	r0, r5, #25
 8007dfe:	d5fb      	bpl.n	8007df8 <_printf_i+0x1bc>
 8007e00:	8019      	strh	r1, [r3, #0]
 8007e02:	2300      	movs	r3, #0
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	4616      	mov	r6, r2
 8007e08:	e7bc      	b.n	8007d84 <_printf_i+0x148>
 8007e0a:	6833      	ldr	r3, [r6, #0]
 8007e0c:	1d1a      	adds	r2, r3, #4
 8007e0e:	6032      	str	r2, [r6, #0]
 8007e10:	681e      	ldr	r6, [r3, #0]
 8007e12:	6862      	ldr	r2, [r4, #4]
 8007e14:	2100      	movs	r1, #0
 8007e16:	4630      	mov	r0, r6
 8007e18:	f7f8 fa02 	bl	8000220 <memchr>
 8007e1c:	b108      	cbz	r0, 8007e22 <_printf_i+0x1e6>
 8007e1e:	1b80      	subs	r0, r0, r6
 8007e20:	6060      	str	r0, [r4, #4]
 8007e22:	6863      	ldr	r3, [r4, #4]
 8007e24:	6123      	str	r3, [r4, #16]
 8007e26:	2300      	movs	r3, #0
 8007e28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e2c:	e7aa      	b.n	8007d84 <_printf_i+0x148>
 8007e2e:	6923      	ldr	r3, [r4, #16]
 8007e30:	4632      	mov	r2, r6
 8007e32:	4649      	mov	r1, r9
 8007e34:	4640      	mov	r0, r8
 8007e36:	47d0      	blx	sl
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d0ad      	beq.n	8007d98 <_printf_i+0x15c>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	079b      	lsls	r3, r3, #30
 8007e40:	d413      	bmi.n	8007e6a <_printf_i+0x22e>
 8007e42:	68e0      	ldr	r0, [r4, #12]
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	4298      	cmp	r0, r3
 8007e48:	bfb8      	it	lt
 8007e4a:	4618      	movlt	r0, r3
 8007e4c:	e7a6      	b.n	8007d9c <_printf_i+0x160>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	4632      	mov	r2, r6
 8007e52:	4649      	mov	r1, r9
 8007e54:	4640      	mov	r0, r8
 8007e56:	47d0      	blx	sl
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d09d      	beq.n	8007d98 <_printf_i+0x15c>
 8007e5c:	3501      	adds	r5, #1
 8007e5e:	68e3      	ldr	r3, [r4, #12]
 8007e60:	9903      	ldr	r1, [sp, #12]
 8007e62:	1a5b      	subs	r3, r3, r1
 8007e64:	42ab      	cmp	r3, r5
 8007e66:	dcf2      	bgt.n	8007e4e <_printf_i+0x212>
 8007e68:	e7eb      	b.n	8007e42 <_printf_i+0x206>
 8007e6a:	2500      	movs	r5, #0
 8007e6c:	f104 0619 	add.w	r6, r4, #25
 8007e70:	e7f5      	b.n	8007e5e <_printf_i+0x222>
 8007e72:	bf00      	nop
 8007e74:	0800a9b5 	.word	0x0800a9b5
 8007e78:	0800a9c6 	.word	0x0800a9c6

08007e7c <__sflush_r>:
 8007e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e84:	0716      	lsls	r6, r2, #28
 8007e86:	4605      	mov	r5, r0
 8007e88:	460c      	mov	r4, r1
 8007e8a:	d454      	bmi.n	8007f36 <__sflush_r+0xba>
 8007e8c:	684b      	ldr	r3, [r1, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	dc02      	bgt.n	8007e98 <__sflush_r+0x1c>
 8007e92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	dd48      	ble.n	8007f2a <__sflush_r+0xae>
 8007e98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e9a:	2e00      	cmp	r6, #0
 8007e9c:	d045      	beq.n	8007f2a <__sflush_r+0xae>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ea4:	682f      	ldr	r7, [r5, #0]
 8007ea6:	6a21      	ldr	r1, [r4, #32]
 8007ea8:	602b      	str	r3, [r5, #0]
 8007eaa:	d030      	beq.n	8007f0e <__sflush_r+0x92>
 8007eac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	0759      	lsls	r1, r3, #29
 8007eb2:	d505      	bpl.n	8007ec0 <__sflush_r+0x44>
 8007eb4:	6863      	ldr	r3, [r4, #4]
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007eba:	b10b      	cbz	r3, 8007ec0 <__sflush_r+0x44>
 8007ebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ec4:	6a21      	ldr	r1, [r4, #32]
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	47b0      	blx	r6
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	d106      	bne.n	8007ede <__sflush_r+0x62>
 8007ed0:	6829      	ldr	r1, [r5, #0]
 8007ed2:	291d      	cmp	r1, #29
 8007ed4:	d82b      	bhi.n	8007f2e <__sflush_r+0xb2>
 8007ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8007f80 <__sflush_r+0x104>)
 8007ed8:	410a      	asrs	r2, r1
 8007eda:	07d6      	lsls	r6, r2, #31
 8007edc:	d427      	bmi.n	8007f2e <__sflush_r+0xb2>
 8007ede:	2200      	movs	r2, #0
 8007ee0:	6062      	str	r2, [r4, #4]
 8007ee2:	04d9      	lsls	r1, r3, #19
 8007ee4:	6922      	ldr	r2, [r4, #16]
 8007ee6:	6022      	str	r2, [r4, #0]
 8007ee8:	d504      	bpl.n	8007ef4 <__sflush_r+0x78>
 8007eea:	1c42      	adds	r2, r0, #1
 8007eec:	d101      	bne.n	8007ef2 <__sflush_r+0x76>
 8007eee:	682b      	ldr	r3, [r5, #0]
 8007ef0:	b903      	cbnz	r3, 8007ef4 <__sflush_r+0x78>
 8007ef2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ef6:	602f      	str	r7, [r5, #0]
 8007ef8:	b1b9      	cbz	r1, 8007f2a <__sflush_r+0xae>
 8007efa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007efe:	4299      	cmp	r1, r3
 8007f00:	d002      	beq.n	8007f08 <__sflush_r+0x8c>
 8007f02:	4628      	mov	r0, r5
 8007f04:	f7ff fca0 	bl	8007848 <_free_r>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f0c:	e00d      	b.n	8007f2a <__sflush_r+0xae>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	4628      	mov	r0, r5
 8007f12:	47b0      	blx	r6
 8007f14:	4602      	mov	r2, r0
 8007f16:	1c50      	adds	r0, r2, #1
 8007f18:	d1c9      	bne.n	8007eae <__sflush_r+0x32>
 8007f1a:	682b      	ldr	r3, [r5, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0c6      	beq.n	8007eae <__sflush_r+0x32>
 8007f20:	2b1d      	cmp	r3, #29
 8007f22:	d001      	beq.n	8007f28 <__sflush_r+0xac>
 8007f24:	2b16      	cmp	r3, #22
 8007f26:	d11e      	bne.n	8007f66 <__sflush_r+0xea>
 8007f28:	602f      	str	r7, [r5, #0]
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	e022      	b.n	8007f74 <__sflush_r+0xf8>
 8007f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f32:	b21b      	sxth	r3, r3
 8007f34:	e01b      	b.n	8007f6e <__sflush_r+0xf2>
 8007f36:	690f      	ldr	r7, [r1, #16]
 8007f38:	2f00      	cmp	r7, #0
 8007f3a:	d0f6      	beq.n	8007f2a <__sflush_r+0xae>
 8007f3c:	0793      	lsls	r3, r2, #30
 8007f3e:	680e      	ldr	r6, [r1, #0]
 8007f40:	bf08      	it	eq
 8007f42:	694b      	ldreq	r3, [r1, #20]
 8007f44:	600f      	str	r7, [r1, #0]
 8007f46:	bf18      	it	ne
 8007f48:	2300      	movne	r3, #0
 8007f4a:	eba6 0807 	sub.w	r8, r6, r7
 8007f4e:	608b      	str	r3, [r1, #8]
 8007f50:	f1b8 0f00 	cmp.w	r8, #0
 8007f54:	dde9      	ble.n	8007f2a <__sflush_r+0xae>
 8007f56:	6a21      	ldr	r1, [r4, #32]
 8007f58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f5a:	4643      	mov	r3, r8
 8007f5c:	463a      	mov	r2, r7
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b0      	blx	r6
 8007f62:	2800      	cmp	r0, #0
 8007f64:	dc08      	bgt.n	8007f78 <__sflush_r+0xfc>
 8007f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f78:	4407      	add	r7, r0
 8007f7a:	eba8 0800 	sub.w	r8, r8, r0
 8007f7e:	e7e7      	b.n	8007f50 <__sflush_r+0xd4>
 8007f80:	dfbffffe 	.word	0xdfbffffe

08007f84 <_fflush_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	690b      	ldr	r3, [r1, #16]
 8007f88:	4605      	mov	r5, r0
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	b913      	cbnz	r3, 8007f94 <_fflush_r+0x10>
 8007f8e:	2500      	movs	r5, #0
 8007f90:	4628      	mov	r0, r5
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	b118      	cbz	r0, 8007f9e <_fflush_r+0x1a>
 8007f96:	6a03      	ldr	r3, [r0, #32]
 8007f98:	b90b      	cbnz	r3, 8007f9e <_fflush_r+0x1a>
 8007f9a:	f7ff fb05 	bl	80075a8 <__sinit>
 8007f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0f3      	beq.n	8007f8e <_fflush_r+0xa>
 8007fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fa8:	07d0      	lsls	r0, r2, #31
 8007faa:	d404      	bmi.n	8007fb6 <_fflush_r+0x32>
 8007fac:	0599      	lsls	r1, r3, #22
 8007fae:	d402      	bmi.n	8007fb6 <_fflush_r+0x32>
 8007fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fb2:	f7ff fc32 	bl	800781a <__retarget_lock_acquire_recursive>
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	4621      	mov	r1, r4
 8007fba:	f7ff ff5f 	bl	8007e7c <__sflush_r>
 8007fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fc0:	07da      	lsls	r2, r3, #31
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	d4e4      	bmi.n	8007f90 <_fflush_r+0xc>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	059b      	lsls	r3, r3, #22
 8007fca:	d4e1      	bmi.n	8007f90 <_fflush_r+0xc>
 8007fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fce:	f7ff fc25 	bl	800781c <__retarget_lock_release_recursive>
 8007fd2:	e7dd      	b.n	8007f90 <_fflush_r+0xc>

08007fd4 <__swbuf_r>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	460e      	mov	r6, r1
 8007fd8:	4614      	mov	r4, r2
 8007fda:	4605      	mov	r5, r0
 8007fdc:	b118      	cbz	r0, 8007fe6 <__swbuf_r+0x12>
 8007fde:	6a03      	ldr	r3, [r0, #32]
 8007fe0:	b90b      	cbnz	r3, 8007fe6 <__swbuf_r+0x12>
 8007fe2:	f7ff fae1 	bl	80075a8 <__sinit>
 8007fe6:	69a3      	ldr	r3, [r4, #24]
 8007fe8:	60a3      	str	r3, [r4, #8]
 8007fea:	89a3      	ldrh	r3, [r4, #12]
 8007fec:	071a      	lsls	r2, r3, #28
 8007fee:	d501      	bpl.n	8007ff4 <__swbuf_r+0x20>
 8007ff0:	6923      	ldr	r3, [r4, #16]
 8007ff2:	b943      	cbnz	r3, 8008006 <__swbuf_r+0x32>
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 f82a 	bl	8008050 <__swsetup_r>
 8007ffc:	b118      	cbz	r0, 8008006 <__swbuf_r+0x32>
 8007ffe:	f04f 37ff 	mov.w	r7, #4294967295
 8008002:	4638      	mov	r0, r7
 8008004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	6922      	ldr	r2, [r4, #16]
 800800a:	1a98      	subs	r0, r3, r2
 800800c:	6963      	ldr	r3, [r4, #20]
 800800e:	b2f6      	uxtb	r6, r6
 8008010:	4283      	cmp	r3, r0
 8008012:	4637      	mov	r7, r6
 8008014:	dc05      	bgt.n	8008022 <__swbuf_r+0x4e>
 8008016:	4621      	mov	r1, r4
 8008018:	4628      	mov	r0, r5
 800801a:	f7ff ffb3 	bl	8007f84 <_fflush_r>
 800801e:	2800      	cmp	r0, #0
 8008020:	d1ed      	bne.n	8007ffe <__swbuf_r+0x2a>
 8008022:	68a3      	ldr	r3, [r4, #8]
 8008024:	3b01      	subs	r3, #1
 8008026:	60a3      	str	r3, [r4, #8]
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	6022      	str	r2, [r4, #0]
 800802e:	701e      	strb	r6, [r3, #0]
 8008030:	6962      	ldr	r2, [r4, #20]
 8008032:	1c43      	adds	r3, r0, #1
 8008034:	429a      	cmp	r2, r3
 8008036:	d004      	beq.n	8008042 <__swbuf_r+0x6e>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	07db      	lsls	r3, r3, #31
 800803c:	d5e1      	bpl.n	8008002 <__swbuf_r+0x2e>
 800803e:	2e0a      	cmp	r6, #10
 8008040:	d1df      	bne.n	8008002 <__swbuf_r+0x2e>
 8008042:	4621      	mov	r1, r4
 8008044:	4628      	mov	r0, r5
 8008046:	f7ff ff9d 	bl	8007f84 <_fflush_r>
 800804a:	2800      	cmp	r0, #0
 800804c:	d0d9      	beq.n	8008002 <__swbuf_r+0x2e>
 800804e:	e7d6      	b.n	8007ffe <__swbuf_r+0x2a>

08008050 <__swsetup_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4b29      	ldr	r3, [pc, #164]	@ (80080f8 <__swsetup_r+0xa8>)
 8008054:	4605      	mov	r5, r0
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	460c      	mov	r4, r1
 800805a:	b118      	cbz	r0, 8008064 <__swsetup_r+0x14>
 800805c:	6a03      	ldr	r3, [r0, #32]
 800805e:	b90b      	cbnz	r3, 8008064 <__swsetup_r+0x14>
 8008060:	f7ff faa2 	bl	80075a8 <__sinit>
 8008064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008068:	0719      	lsls	r1, r3, #28
 800806a:	d422      	bmi.n	80080b2 <__swsetup_r+0x62>
 800806c:	06da      	lsls	r2, r3, #27
 800806e:	d407      	bmi.n	8008080 <__swsetup_r+0x30>
 8008070:	2209      	movs	r2, #9
 8008072:	602a      	str	r2, [r5, #0]
 8008074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008078:	81a3      	strh	r3, [r4, #12]
 800807a:	f04f 30ff 	mov.w	r0, #4294967295
 800807e:	e033      	b.n	80080e8 <__swsetup_r+0x98>
 8008080:	0758      	lsls	r0, r3, #29
 8008082:	d512      	bpl.n	80080aa <__swsetup_r+0x5a>
 8008084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008086:	b141      	cbz	r1, 800809a <__swsetup_r+0x4a>
 8008088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800808c:	4299      	cmp	r1, r3
 800808e:	d002      	beq.n	8008096 <__swsetup_r+0x46>
 8008090:	4628      	mov	r0, r5
 8008092:	f7ff fbd9 	bl	8007848 <_free_r>
 8008096:	2300      	movs	r3, #0
 8008098:	6363      	str	r3, [r4, #52]	@ 0x34
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	2300      	movs	r3, #0
 80080a4:	6063      	str	r3, [r4, #4]
 80080a6:	6923      	ldr	r3, [r4, #16]
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	f043 0308 	orr.w	r3, r3, #8
 80080b0:	81a3      	strh	r3, [r4, #12]
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	b94b      	cbnz	r3, 80080ca <__swsetup_r+0x7a>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c0:	d003      	beq.n	80080ca <__swsetup_r+0x7a>
 80080c2:	4621      	mov	r1, r4
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 f883 	bl	80081d0 <__smakebuf_r>
 80080ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ce:	f013 0201 	ands.w	r2, r3, #1
 80080d2:	d00a      	beq.n	80080ea <__swsetup_r+0x9a>
 80080d4:	2200      	movs	r2, #0
 80080d6:	60a2      	str	r2, [r4, #8]
 80080d8:	6962      	ldr	r2, [r4, #20]
 80080da:	4252      	negs	r2, r2
 80080dc:	61a2      	str	r2, [r4, #24]
 80080de:	6922      	ldr	r2, [r4, #16]
 80080e0:	b942      	cbnz	r2, 80080f4 <__swsetup_r+0xa4>
 80080e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080e6:	d1c5      	bne.n	8008074 <__swsetup_r+0x24>
 80080e8:	bd38      	pop	{r3, r4, r5, pc}
 80080ea:	0799      	lsls	r1, r3, #30
 80080ec:	bf58      	it	pl
 80080ee:	6962      	ldrpl	r2, [r4, #20]
 80080f0:	60a2      	str	r2, [r4, #8]
 80080f2:	e7f4      	b.n	80080de <__swsetup_r+0x8e>
 80080f4:	2000      	movs	r0, #0
 80080f6:	e7f7      	b.n	80080e8 <__swsetup_r+0x98>
 80080f8:	20000018 	.word	0x20000018

080080fc <_raise_r>:
 80080fc:	291f      	cmp	r1, #31
 80080fe:	b538      	push	{r3, r4, r5, lr}
 8008100:	4605      	mov	r5, r0
 8008102:	460c      	mov	r4, r1
 8008104:	d904      	bls.n	8008110 <_raise_r+0x14>
 8008106:	2316      	movs	r3, #22
 8008108:	6003      	str	r3, [r0, #0]
 800810a:	f04f 30ff 	mov.w	r0, #4294967295
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008112:	b112      	cbz	r2, 800811a <_raise_r+0x1e>
 8008114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008118:	b94b      	cbnz	r3, 800812e <_raise_r+0x32>
 800811a:	4628      	mov	r0, r5
 800811c:	f000 f830 	bl	8008180 <_getpid_r>
 8008120:	4622      	mov	r2, r4
 8008122:	4601      	mov	r1, r0
 8008124:	4628      	mov	r0, r5
 8008126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800812a:	f000 b817 	b.w	800815c <_kill_r>
 800812e:	2b01      	cmp	r3, #1
 8008130:	d00a      	beq.n	8008148 <_raise_r+0x4c>
 8008132:	1c59      	adds	r1, r3, #1
 8008134:	d103      	bne.n	800813e <_raise_r+0x42>
 8008136:	2316      	movs	r3, #22
 8008138:	6003      	str	r3, [r0, #0]
 800813a:	2001      	movs	r0, #1
 800813c:	e7e7      	b.n	800810e <_raise_r+0x12>
 800813e:	2100      	movs	r1, #0
 8008140:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008144:	4620      	mov	r0, r4
 8008146:	4798      	blx	r3
 8008148:	2000      	movs	r0, #0
 800814a:	e7e0      	b.n	800810e <_raise_r+0x12>

0800814c <raise>:
 800814c:	4b02      	ldr	r3, [pc, #8]	@ (8008158 <raise+0xc>)
 800814e:	4601      	mov	r1, r0
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	f7ff bfd3 	b.w	80080fc <_raise_r>
 8008156:	bf00      	nop
 8008158:	20000018 	.word	0x20000018

0800815c <_kill_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	@ (800817c <_kill_r+0x20>)
 8008160:	2300      	movs	r3, #0
 8008162:	4604      	mov	r4, r0
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	602b      	str	r3, [r5, #0]
 800816a:	f7f9 ffb4 	bl	80020d6 <_kill>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	d102      	bne.n	8008178 <_kill_r+0x1c>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	b103      	cbz	r3, 8008178 <_kill_r+0x1c>
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	bf00      	nop
 800817c:	20000cc0 	.word	0x20000cc0

08008180 <_getpid_r>:
 8008180:	f7f9 bfa1 	b.w	80020c6 <_getpid>

08008184 <__swhatbuf_r>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	460c      	mov	r4, r1
 8008188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818c:	2900      	cmp	r1, #0
 800818e:	b096      	sub	sp, #88	@ 0x58
 8008190:	4615      	mov	r5, r2
 8008192:	461e      	mov	r6, r3
 8008194:	da0d      	bge.n	80081b2 <__swhatbuf_r+0x2e>
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800819c:	f04f 0100 	mov.w	r1, #0
 80081a0:	bf14      	ite	ne
 80081a2:	2340      	movne	r3, #64	@ 0x40
 80081a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081a8:	2000      	movs	r0, #0
 80081aa:	6031      	str	r1, [r6, #0]
 80081ac:	602b      	str	r3, [r5, #0]
 80081ae:	b016      	add	sp, #88	@ 0x58
 80081b0:	bd70      	pop	{r4, r5, r6, pc}
 80081b2:	466a      	mov	r2, sp
 80081b4:	f000 f848 	bl	8008248 <_fstat_r>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	dbec      	blt.n	8008196 <__swhatbuf_r+0x12>
 80081bc:	9901      	ldr	r1, [sp, #4]
 80081be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081c6:	4259      	negs	r1, r3
 80081c8:	4159      	adcs	r1, r3
 80081ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081ce:	e7eb      	b.n	80081a8 <__swhatbuf_r+0x24>

080081d0 <__smakebuf_r>:
 80081d0:	898b      	ldrh	r3, [r1, #12]
 80081d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081d4:	079d      	lsls	r5, r3, #30
 80081d6:	4606      	mov	r6, r0
 80081d8:	460c      	mov	r4, r1
 80081da:	d507      	bpl.n	80081ec <__smakebuf_r+0x1c>
 80081dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	6123      	str	r3, [r4, #16]
 80081e4:	2301      	movs	r3, #1
 80081e6:	6163      	str	r3, [r4, #20]
 80081e8:	b003      	add	sp, #12
 80081ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ec:	ab01      	add	r3, sp, #4
 80081ee:	466a      	mov	r2, sp
 80081f0:	f7ff ffc8 	bl	8008184 <__swhatbuf_r>
 80081f4:	9f00      	ldr	r7, [sp, #0]
 80081f6:	4605      	mov	r5, r0
 80081f8:	4639      	mov	r1, r7
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff f8bc 	bl	8007378 <_malloc_r>
 8008200:	b948      	cbnz	r0, 8008216 <__smakebuf_r+0x46>
 8008202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008206:	059a      	lsls	r2, r3, #22
 8008208:	d4ee      	bmi.n	80081e8 <__smakebuf_r+0x18>
 800820a:	f023 0303 	bic.w	r3, r3, #3
 800820e:	f043 0302 	orr.w	r3, r3, #2
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	e7e2      	b.n	80081dc <__smakebuf_r+0xc>
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	6020      	str	r0, [r4, #0]
 800821a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	9b01      	ldr	r3, [sp, #4]
 8008222:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008226:	b15b      	cbz	r3, 8008240 <__smakebuf_r+0x70>
 8008228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800822c:	4630      	mov	r0, r6
 800822e:	f000 f81d 	bl	800826c <_isatty_r>
 8008232:	b128      	cbz	r0, 8008240 <__smakebuf_r+0x70>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	431d      	orrs	r5, r3
 8008244:	81a5      	strh	r5, [r4, #12]
 8008246:	e7cf      	b.n	80081e8 <__smakebuf_r+0x18>

08008248 <_fstat_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d07      	ldr	r5, [pc, #28]	@ (8008268 <_fstat_r+0x20>)
 800824c:	2300      	movs	r3, #0
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	4611      	mov	r1, r2
 8008254:	602b      	str	r3, [r5, #0]
 8008256:	f7f9 ff9e 	bl	8002196 <_fstat>
 800825a:	1c43      	adds	r3, r0, #1
 800825c:	d102      	bne.n	8008264 <_fstat_r+0x1c>
 800825e:	682b      	ldr	r3, [r5, #0]
 8008260:	b103      	cbz	r3, 8008264 <_fstat_r+0x1c>
 8008262:	6023      	str	r3, [r4, #0]
 8008264:	bd38      	pop	{r3, r4, r5, pc}
 8008266:	bf00      	nop
 8008268:	20000cc0 	.word	0x20000cc0

0800826c <_isatty_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d06      	ldr	r5, [pc, #24]	@ (8008288 <_isatty_r+0x1c>)
 8008270:	2300      	movs	r3, #0
 8008272:	4604      	mov	r4, r0
 8008274:	4608      	mov	r0, r1
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	f7f9 ff9d 	bl	80021b6 <_isatty>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_isatty_r+0x1a>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_isatty_r+0x1a>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	20000cc0 	.word	0x20000cc0

0800828c <_init>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	bf00      	nop
 8008290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008292:	bc08      	pop	{r3}
 8008294:	469e      	mov	lr, r3
 8008296:	4770      	bx	lr

08008298 <_fini>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	bf00      	nop
 800829c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829e:	bc08      	pop	{r3}
 80082a0:	469e      	mov	lr, r3
 80082a2:	4770      	bx	lr
